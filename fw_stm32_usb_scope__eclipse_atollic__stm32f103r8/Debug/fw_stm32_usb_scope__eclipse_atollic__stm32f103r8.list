
fw_stm32_usb_scope__eclipse_atollic__stm32f103r8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cbc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08004dc8  08004dc8  00014dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004e84  08004e84  00014e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004e88  08004e88  00014e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000110  20000000  08004e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004658  20000110  08004f9c  00020110  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20004768  08004f9c  00024768  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
  9 .debug_info   000237a2  00000000  00000000  00020139  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004483  00000000  00000000  000438db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000aad8  00000000  00000000  00047d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001120  00000000  00000000  00052838  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001110  00000000  00000000  00053958  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008e82  00000000  00000000  00054a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000520c  00000000  00000000  0005d8ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00062af6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002aa8  00000000  00000000  00062b74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000110 	.word	0x20000110
 8000128:	00000000 	.word	0x00000000
 800012c:	08004db0 	.word	0x08004db0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000114 	.word	0x20000114
 8000148:	08004db0 	.word	0x08004db0

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b510      	push	{r4, lr}
 800014e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000150:	4b0e      	ldr	r3, [pc, #56]	; (800018c <HAL_InitTick+0x40>)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0c      	ldr	r2, [pc, #48]	; (8000190 <HAL_InitTick+0x44>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 fba2 	bl	80008ac <HAL_SYSTICK_Config>
 8000168:	b968      	cbnz	r0, 8000186 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016a:	2c0f      	cmp	r4, #15
 800016c:	d901      	bls.n	8000172 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800016e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8000170:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000172:	2200      	movs	r2, #0
 8000174:	4621      	mov	r1, r4
 8000176:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800017a:	f000 fb59 	bl	8000830 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017e:	4b05      	ldr	r3, [pc, #20]	; (8000194 <HAL_InitTick+0x48>)
 8000180:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000182:	2000      	movs	r0, #0
 8000184:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000186:	2001      	movs	r0, #1
 8000188:	bd10      	pop	{r4, pc}
 800018a:	bf00      	nop
 800018c:	20000000 	.word	0x20000000
 8000190:	20000088 	.word	0x20000088
 8000194:	20000004 	.word	0x20000004

08000198 <HAL_Init>:
{
 8000198:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019a:	4a07      	ldr	r2, [pc, #28]	; (80001b8 <HAL_Init+0x20>)
 800019c:	6813      	ldr	r3, [r2, #0]
 800019e:	f043 0310 	orr.w	r3, r3, #16
 80001a2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a4:	2003      	movs	r0, #3
 80001a6:	f000 fb31 	bl	800080c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001aa:	2000      	movs	r0, #0
 80001ac:	f7ff ffce 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001b0:	f004 faba 	bl	8004728 <HAL_MspInit>
}
 80001b4:	2000      	movs	r0, #0
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	40022000 	.word	0x40022000

080001bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001bc:	4a03      	ldr	r2, [pc, #12]	; (80001cc <HAL_IncTick+0x10>)
 80001be:	6811      	ldr	r1, [r2, #0]
 80001c0:	4b03      	ldr	r3, [pc, #12]	; (80001d0 <HAL_IncTick+0x14>)
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	440b      	add	r3, r1
 80001c6:	6013      	str	r3, [r2, #0]
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	20000194 	.word	0x20000194
 80001d0:	20000000 	.word	0x20000000

080001d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d4:	4b01      	ldr	r3, [pc, #4]	; (80001dc <HAL_GetTick+0x8>)
 80001d6:	6818      	ldr	r0, [r3, #0]
}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	20000194 	.word	0x20000194

080001e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001e0:	b538      	push	{r3, r4, r5, lr}
 80001e2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e4:	f7ff fff6 	bl	80001d4 <HAL_GetTick>
 80001e8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001ea:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80001ee:	d002      	beq.n	80001f6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <HAL_Delay+0x24>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f6:	f7ff ffed 	bl	80001d4 <HAL_GetTick>
 80001fa:	1b40      	subs	r0, r0, r5
 80001fc:	4284      	cmp	r4, r0
 80001fe:	d8fa      	bhi.n	80001f6 <HAL_Delay+0x16>
  {
  }
}
 8000200:	bd38      	pop	{r3, r4, r5, pc}
 8000202:	bf00      	nop
 8000204:	20000000 	.word	0x20000000

08000208 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000208:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800020a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800020c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800020e:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000212:	d11e      	bne.n	8000252 <ADC_DMAConvCplt+0x4a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000214:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800021a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800021c:	681a      	ldr	r2, [r3, #0]
 800021e:	6892      	ldr	r2, [r2, #8]
 8000220:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000224:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000228:	d003      	beq.n	8000232 <ADC_DMAConvCplt+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 800022a:	4618      	mov	r0, r3
 800022c:	f003 ff80 	bl	8004130 <HAL_ADC_ConvCpltCallback>
 8000230:	bd08      	pop	{r3, pc}
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000232:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000234:	2a00      	cmp	r2, #0
 8000236:	d1f8      	bne.n	800022a <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000238:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800023a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800023e:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000242:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8000246:	d1f0      	bne.n	800022a <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800024a:	f042 0201 	orr.w	r2, r2, #1
 800024e:	629a      	str	r2, [r3, #40]	; 0x28
 8000250:	e7eb      	b.n	800022a <ADC_DMAConvCplt+0x22>
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000252:	6a1b      	ldr	r3, [r3, #32]
 8000254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000256:	4798      	blx	r3
 8000258:	bd08      	pop	{r3, pc}

0800025a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800025a:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800025c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800025e:	f003 ff77 	bl	8004150 <HAL_ADC_ConvHalfCpltCallback>
 8000262:	bd08      	pop	{r3, pc}

08000264 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000264:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000266:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000268:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800026a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800026e:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000270:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000272:	f043 0304 	orr.w	r3, r3, #4
 8000276:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8000278:	f003 ff6b 	bl	8004152 <HAL_ADC_ErrorCallback>
 800027c:	bd08      	pop	{r3, pc}
	...

08000280 <HAL_ADC_ConfigChannel>:
{ 
 8000280:	b430      	push	{r4, r5}
 8000282:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8000284:	2300      	movs	r3, #0
 8000286:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000288:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800028c:	2b01      	cmp	r3, #1
 800028e:	f000 808b 	beq.w	80003a8 <HAL_ADC_ConfigChannel+0x128>
 8000292:	4602      	mov	r2, r0
 8000294:	2301      	movs	r3, #1
 8000296:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800029a:	684b      	ldr	r3, [r1, #4]
 800029c:	2b06      	cmp	r3, #6
 800029e:	d829      	bhi.n	80002f4 <HAL_ADC_ConfigChannel+0x74>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80002a0:	6805      	ldr	r5, [r0, #0]
 80002a2:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80002a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80002a8:	3b05      	subs	r3, #5
 80002aa:	241f      	movs	r4, #31
 80002ac:	409c      	lsls	r4, r3
 80002ae:	ea20 0004 	bic.w	r0, r0, r4
 80002b2:	680c      	ldr	r4, [r1, #0]
 80002b4:	fa04 f303 	lsl.w	r3, r4, r3
 80002b8:	4303      	orrs	r3, r0
 80002ba:	636b      	str	r3, [r5, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80002bc:	680b      	ldr	r3, [r1, #0]
 80002be:	2b09      	cmp	r3, #9
 80002c0:	d938      	bls.n	8000334 <HAL_ADC_ConfigChannel+0xb4>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80002c2:	6815      	ldr	r5, [r2, #0]
 80002c4:	68e8      	ldr	r0, [r5, #12]
 80002c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80002ca:	3b1e      	subs	r3, #30
 80002cc:	2407      	movs	r4, #7
 80002ce:	409c      	lsls	r4, r3
 80002d0:	ea20 0004 	bic.w	r0, r0, r4
 80002d4:	688c      	ldr	r4, [r1, #8]
 80002d6:	fa04 f303 	lsl.w	r3, r4, r3
 80002da:	4303      	orrs	r3, r0
 80002dc:	60eb      	str	r3, [r5, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80002de:	680b      	ldr	r3, [r1, #0]
 80002e0:	3b10      	subs	r3, #16
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	d934      	bls.n	8000350 <HAL_ADC_ConfigChannel+0xd0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80002e6:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80002e8:	2300      	movs	r3, #0
 80002ea:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 80002ee:	b002      	add	sp, #8
 80002f0:	bc30      	pop	{r4, r5}
 80002f2:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 80002f4:	2b0c      	cmp	r3, #12
 80002f6:	d80e      	bhi.n	8000316 <HAL_ADC_ConfigChannel+0x96>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80002f8:	6805      	ldr	r5, [r0, #0]
 80002fa:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80002fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000300:	3b23      	subs	r3, #35	; 0x23
 8000302:	241f      	movs	r4, #31
 8000304:	409c      	lsls	r4, r3
 8000306:	ea20 0004 	bic.w	r0, r0, r4
 800030a:	680c      	ldr	r4, [r1, #0]
 800030c:	fa04 f303 	lsl.w	r3, r4, r3
 8000310:	4303      	orrs	r3, r0
 8000312:	632b      	str	r3, [r5, #48]	; 0x30
 8000314:	e7d2      	b.n	80002bc <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000316:	6805      	ldr	r5, [r0, #0]
 8000318:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800031a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800031e:	3b41      	subs	r3, #65	; 0x41
 8000320:	241f      	movs	r4, #31
 8000322:	409c      	lsls	r4, r3
 8000324:	ea20 0004 	bic.w	r0, r0, r4
 8000328:	680c      	ldr	r4, [r1, #0]
 800032a:	fa04 f303 	lsl.w	r3, r4, r3
 800032e:	4303      	orrs	r3, r0
 8000330:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000332:	e7c3      	b.n	80002bc <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000334:	6815      	ldr	r5, [r2, #0]
 8000336:	6928      	ldr	r0, [r5, #16]
 8000338:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800033c:	2407      	movs	r4, #7
 800033e:	409c      	lsls	r4, r3
 8000340:	ea20 0004 	bic.w	r0, r0, r4
 8000344:	688c      	ldr	r4, [r1, #8]
 8000346:	fa04 f303 	lsl.w	r3, r4, r3
 800034a:	4303      	orrs	r3, r0
 800034c:	612b      	str	r3, [r5, #16]
 800034e:	e7c6      	b.n	80002de <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8000350:	6813      	ldr	r3, [r2, #0]
 8000352:	4816      	ldr	r0, [pc, #88]	; (80003ac <HAL_ADC_ConfigChannel+0x12c>)
 8000354:	4283      	cmp	r3, r0
 8000356:	d005      	beq.n	8000364 <HAL_ADC_ConfigChannel+0xe4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000358:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800035a:	f043 0320 	orr.w	r3, r3, #32
 800035e:	6293      	str	r3, [r2, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000360:	2001      	movs	r0, #1
 8000362:	e7c1      	b.n	80002e8 <HAL_ADC_ConfigChannel+0x68>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000364:	6898      	ldr	r0, [r3, #8]
 8000366:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800036a:	d11b      	bne.n	80003a4 <HAL_ADC_ConfigChannel+0x124>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800036c:	6898      	ldr	r0, [r3, #8]
 800036e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000372:	6098      	str	r0, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000374:	680b      	ldr	r3, [r1, #0]
 8000376:	2b10      	cmp	r3, #16
 8000378:	d001      	beq.n	800037e <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800037a:	2000      	movs	r0, #0
 800037c:	e7b4      	b.n	80002e8 <HAL_ADC_ConfigChannel+0x68>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800037e:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <HAL_ADC_ConfigChannel+0x130>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	490c      	ldr	r1, [pc, #48]	; (80003b4 <HAL_ADC_ConfigChannel+0x134>)
 8000384:	fba1 1303 	umull	r1, r3, r1, r3
 8000388:	0c9b      	lsrs	r3, r3, #18
 800038a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800038e:	0059      	lsls	r1, r3, #1
 8000390:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8000392:	e002      	b.n	800039a <HAL_ADC_ConfigChannel+0x11a>
            wait_loop_index--;
 8000394:	9b01      	ldr	r3, [sp, #4]
 8000396:	3b01      	subs	r3, #1
 8000398:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800039a:	9b01      	ldr	r3, [sp, #4]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d1f9      	bne.n	8000394 <HAL_ADC_ConfigChannel+0x114>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003a0:	2000      	movs	r0, #0
 80003a2:	e7a1      	b.n	80002e8 <HAL_ADC_ConfigChannel+0x68>
 80003a4:	2000      	movs	r0, #0
 80003a6:	e79f      	b.n	80002e8 <HAL_ADC_ConfigChannel+0x68>
  __HAL_LOCK(hadc);
 80003a8:	2002      	movs	r0, #2
 80003aa:	e7a0      	b.n	80002ee <HAL_ADC_ConfigChannel+0x6e>
 80003ac:	40012400 	.word	0x40012400
 80003b0:	20000088 	.word	0x20000088
 80003b4:	431bde83 	.word	0x431bde83

080003b8 <ADC_Enable>:
{
 80003b8:	b530      	push	{r4, r5, lr}
 80003ba:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80003bc:	2300      	movs	r3, #0
 80003be:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80003c0:	6803      	ldr	r3, [r0, #0]
 80003c2:	689a      	ldr	r2, [r3, #8]
 80003c4:	f012 0f01 	tst.w	r2, #1
 80003c8:	d12e      	bne.n	8000428 <ADC_Enable+0x70>
    __HAL_ADC_ENABLE(hadc);
 80003ca:	689a      	ldr	r2, [r3, #8]
 80003cc:	f042 0201 	orr.w	r2, r2, #1
 80003d0:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80003d2:	4b17      	ldr	r3, [pc, #92]	; (8000430 <ADC_Enable+0x78>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4a17      	ldr	r2, [pc, #92]	; (8000434 <ADC_Enable+0x7c>)
 80003d8:	fba2 2303 	umull	r2, r3, r2, r3
 80003dc:	0c9b      	lsrs	r3, r3, #18
 80003de:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80003e0:	e002      	b.n	80003e8 <ADC_Enable+0x30>
      wait_loop_index--;
 80003e2:	9b01      	ldr	r3, [sp, #4]
 80003e4:	3b01      	subs	r3, #1
 80003e6:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80003e8:	9b01      	ldr	r3, [sp, #4]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d1f9      	bne.n	80003e2 <ADC_Enable+0x2a>
 80003ee:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 80003f0:	f7ff fef0 	bl	80001d4 <HAL_GetTick>
 80003f4:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80003f6:	6823      	ldr	r3, [r4, #0]
 80003f8:	689b      	ldr	r3, [r3, #8]
 80003fa:	f013 0f01 	tst.w	r3, #1
 80003fe:	d111      	bne.n	8000424 <ADC_Enable+0x6c>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000400:	f7ff fee8 	bl	80001d4 <HAL_GetTick>
 8000404:	1b40      	subs	r0, r0, r5
 8000406:	2802      	cmp	r0, #2
 8000408:	d9f5      	bls.n	80003f6 <ADC_Enable+0x3e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800040a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800040c:	f043 0310 	orr.w	r3, r3, #16
 8000410:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000412:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000414:	f043 0301 	orr.w	r3, r3, #1
 8000418:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 800041a:	2300      	movs	r3, #0
 800041c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 8000420:	2001      	movs	r0, #1
 8000422:	e002      	b.n	800042a <ADC_Enable+0x72>
  return HAL_OK;
 8000424:	2000      	movs	r0, #0
 8000426:	e000      	b.n	800042a <ADC_Enable+0x72>
 8000428:	2000      	movs	r0, #0
}
 800042a:	b003      	add	sp, #12
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	bf00      	nop
 8000430:	20000088 	.word	0x20000088
 8000434:	431bde83 	.word	0x431bde83

08000438 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8000438:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800043c:	2b01      	cmp	r3, #1
 800043e:	d102      	bne.n	8000446 <HAL_ADC_Start+0xe>
 8000440:	2302      	movs	r3, #2
}
 8000442:	4618      	mov	r0, r3
 8000444:	4770      	bx	lr
{
 8000446:	b510      	push	{r4, lr}
 8000448:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800044a:	2301      	movs	r3, #1
 800044c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8000450:	f7ff ffb2 	bl	80003b8 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8000454:	4603      	mov	r3, r0
 8000456:	2800      	cmp	r0, #0
 8000458:	d15b      	bne.n	8000512 <HAL_ADC_Start+0xda>
    ADC_STATE_CLR_SET(hadc->State,
 800045a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800045c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000460:	f022 0201 	bic.w	r2, r2, #1
 8000464:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000468:	62a2      	str	r2, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800046a:	6822      	ldr	r2, [r4, #0]
 800046c:	492b      	ldr	r1, [pc, #172]	; (800051c <HAL_ADC_Start+0xe4>)
 800046e:	428a      	cmp	r2, r1
 8000470:	d027      	beq.n	80004c2 <HAL_ADC_Start+0x8a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000472:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000474:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
 8000478:	62a1      	str	r1, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800047a:	6851      	ldr	r1, [r2, #4]
 800047c:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8000480:	d005      	beq.n	800048e <HAL_ADC_Start+0x56>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000482:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000484:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8000488:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800048c:	62a1      	str	r1, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800048e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000490:	f411 5f80 	tst.w	r1, #4096	; 0x1000
 8000494:	d02b      	beq.n	80004ee <HAL_ADC_Start+0xb6>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000496:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000498:	f021 0106 	bic.w	r1, r1, #6
 800049c:	62e1      	str	r1, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 800049e:	2100      	movs	r1, #0
 80004a0:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80004a4:	f06f 0102 	mvn.w	r1, #2
 80004a8:	6011      	str	r1, [r2, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80004aa:	6822      	ldr	r2, [r4, #0]
 80004ac:	6891      	ldr	r1, [r2, #8]
 80004ae:	f401 2160 	and.w	r1, r1, #917504	; 0xe0000
 80004b2:	f5b1 2f60 	cmp.w	r1, #917504	; 0xe0000
 80004b6:	d01d      	beq.n	80004f4 <HAL_ADC_Start+0xbc>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80004b8:	6891      	ldr	r1, [r2, #8]
 80004ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004be:	6091      	str	r1, [r2, #8]
 80004c0:	e02a      	b.n	8000518 <HAL_ADC_Start+0xe0>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80004c2:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 80004c6:	6849      	ldr	r1, [r1, #4]
 80004c8:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 80004cc:	d0d1      	beq.n	8000472 <HAL_ADC_Start+0x3a>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80004ce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80004d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004d4:	62a1      	str	r1, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80004d6:	4912      	ldr	r1, [pc, #72]	; (8000520 <HAL_ADC_Start+0xe8>)
 80004d8:	6849      	ldr	r1, [r1, #4]
 80004da:	f411 6f80 	tst.w	r1, #1024	; 0x400
 80004de:	d0d6      	beq.n	800048e <HAL_ADC_Start+0x56>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80004e0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80004e2:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80004e6:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80004ea:	62a1      	str	r1, [r4, #40]	; 0x28
 80004ec:	e7cf      	b.n	800048e <HAL_ADC_Start+0x56>
      ADC_CLEAR_ERRORCODE(hadc);
 80004ee:	2100      	movs	r1, #0
 80004f0:	62e1      	str	r1, [r4, #44]	; 0x2c
 80004f2:	e7d4      	b.n	800049e <HAL_ADC_Start+0x66>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80004f4:	4909      	ldr	r1, [pc, #36]	; (800051c <HAL_ADC_Start+0xe4>)
 80004f6:	428a      	cmp	r2, r1
 80004f8:	d004      	beq.n	8000504 <HAL_ADC_Start+0xcc>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80004fa:	6891      	ldr	r1, [r2, #8]
 80004fc:	f441 01a0 	orr.w	r1, r1, #5242880	; 0x500000
 8000500:	6091      	str	r1, [r2, #8]
 8000502:	e009      	b.n	8000518 <HAL_ADC_Start+0xe0>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000504:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 8000508:	6849      	ldr	r1, [r1, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800050a:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 800050e:	d1d3      	bne.n	80004b8 <HAL_ADC_Start+0x80>
 8000510:	e7f3      	b.n	80004fa <HAL_ADC_Start+0xc2>
    __HAL_UNLOCK(hadc);
 8000512:	2200      	movs	r2, #0
 8000514:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
}
 8000518:	4618      	mov	r0, r3
 800051a:	bd10      	pop	{r4, pc}
 800051c:	40012800 	.word	0x40012800
 8000520:	40012400 	.word	0x40012400

08000524 <HAL_ADC_Start_DMA>:
{
 8000524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000526:	6804      	ldr	r4, [r0, #0]
 8000528:	4d45      	ldr	r5, [pc, #276]	; (8000640 <HAL_ADC_Start_DMA+0x11c>)
 800052a:	42ac      	cmp	r4, r5
 800052c:	d00a      	beq.n	8000544 <HAL_ADC_Start_DMA+0x20>
 800052e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000532:	42ac      	cmp	r4, r5
 8000534:	d006      	beq.n	8000544 <HAL_ADC_Start_DMA+0x20>
    __HAL_LOCK(hadc);
 8000536:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 800053a:	2c01      	cmp	r4, #1
 800053c:	d109      	bne.n	8000552 <HAL_ADC_Start_DMA+0x2e>
 800053e:	2502      	movs	r5, #2
}
 8000540:	4628      	mov	r0, r5
 8000542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000544:	4b3e      	ldr	r3, [pc, #248]	; (8000640 <HAL_ADC_Start_DMA+0x11c>)
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800054c:	d0f3      	beq.n	8000536 <HAL_ADC_Start_DMA+0x12>
    tmp_hal_status = HAL_ERROR;
 800054e:	2501      	movs	r5, #1
 8000550:	e7f6      	b.n	8000540 <HAL_ADC_Start_DMA+0x1c>
 8000552:	4617      	mov	r7, r2
 8000554:	460e      	mov	r6, r1
 8000556:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8000558:	2301      	movs	r3, #1
 800055a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 800055e:	f7ff ff2b 	bl	80003b8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000562:	4605      	mov	r5, r0
 8000564:	2800      	cmp	r0, #0
 8000566:	d167      	bne.n	8000638 <HAL_ADC_Start_DMA+0x114>
      ADC_STATE_CLR_SET(hadc->State,
 8000568:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800056a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800056e:	f023 0301 	bic.w	r3, r3, #1
 8000572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000576:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000578:	6822      	ldr	r2, [r4, #0]
 800057a:	4b32      	ldr	r3, [pc, #200]	; (8000644 <HAL_ADC_Start_DMA+0x120>)
 800057c:	429a      	cmp	r2, r3
 800057e:	d03d      	beq.n	80005fc <HAL_ADC_Start_DMA+0xd8>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000580:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000582:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000586:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000588:	6853      	ldr	r3, [r2, #4]
 800058a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800058e:	d005      	beq.n	800059c <HAL_ADC_Start_DMA+0x78>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000590:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000592:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000596:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800059a:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800059c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800059e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80005a2:	d041      	beq.n	8000628 <HAL_ADC_Start_DMA+0x104>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80005a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80005a6:	f023 0306 	bic.w	r3, r3, #6
 80005aa:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 80005ac:	2300      	movs	r3, #0
 80005ae:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80005b2:	6a23      	ldr	r3, [r4, #32]
 80005b4:	4a24      	ldr	r2, [pc, #144]	; (8000648 <HAL_ADC_Start_DMA+0x124>)
 80005b6:	629a      	str	r2, [r3, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80005b8:	6a23      	ldr	r3, [r4, #32]
 80005ba:	4a24      	ldr	r2, [pc, #144]	; (800064c <HAL_ADC_Start_DMA+0x128>)
 80005bc:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80005be:	6a23      	ldr	r3, [r4, #32]
 80005c0:	4a23      	ldr	r2, [pc, #140]	; (8000650 <HAL_ADC_Start_DMA+0x12c>)
 80005c2:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80005c4:	6823      	ldr	r3, [r4, #0]
 80005c6:	f06f 0202 	mvn.w	r2, #2
 80005ca:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80005cc:	6822      	ldr	r2, [r4, #0]
 80005ce:	6893      	ldr	r3, [r2, #8]
 80005d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005d4:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80005d6:	6821      	ldr	r1, [r4, #0]
 80005d8:	463b      	mov	r3, r7
 80005da:	4632      	mov	r2, r6
 80005dc:	314c      	adds	r1, #76	; 0x4c
 80005de:	6a20      	ldr	r0, [r4, #32]
 80005e0:	f000 f9e2 	bl	80009a8 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80005e4:	6822      	ldr	r2, [r4, #0]
 80005e6:	6893      	ldr	r3, [r2, #8]
 80005e8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80005ec:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80005f0:	d01d      	beq.n	800062e <HAL_ADC_Start_DMA+0x10a>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80005f2:	6893      	ldr	r3, [r2, #8]
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	6093      	str	r3, [r2, #8]
 80005fa:	e7a1      	b.n	8000540 <HAL_ADC_Start_DMA+0x1c>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80005fc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8000606:	d0bb      	beq.n	8000580 <HAL_ADC_Start_DMA+0x5c>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000608:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800060a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800060e:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000610:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <HAL_ADC_Start_DMA+0x11c>)
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000618:	d0c0      	beq.n	800059c <HAL_ADC_Start_DMA+0x78>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800061a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800061c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000620:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000624:	62a3      	str	r3, [r4, #40]	; 0x28
 8000626:	e7b9      	b.n	800059c <HAL_ADC_Start_DMA+0x78>
        ADC_CLEAR_ERRORCODE(hadc);
 8000628:	2300      	movs	r3, #0
 800062a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800062c:	e7be      	b.n	80005ac <HAL_ADC_Start_DMA+0x88>
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800062e:	6893      	ldr	r3, [r2, #8]
 8000630:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8000634:	6093      	str	r3, [r2, #8]
 8000636:	e783      	b.n	8000540 <HAL_ADC_Start_DMA+0x1c>
      __HAL_UNLOCK(hadc);
 8000638:	2300      	movs	r3, #0
 800063a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800063e:	e77f      	b.n	8000540 <HAL_ADC_Start_DMA+0x1c>
 8000640:	40012400 	.word	0x40012400
 8000644:	40012800 	.word	0x40012800
 8000648:	08000209 	.word	0x08000209
 800064c:	0800025b 	.word	0x0800025b
 8000650:	08000265 	.word	0x08000265

08000654 <ADC_ConversionStop_Disable>:
{
 8000654:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000656:	6803      	ldr	r3, [r0, #0]
 8000658:	689a      	ldr	r2, [r3, #8]
 800065a:	f012 0f01 	tst.w	r2, #1
 800065e:	d101      	bne.n	8000664 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8000660:	2000      	movs	r0, #0
}
 8000662:	bd38      	pop	{r3, r4, r5, pc}
 8000664:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8000666:	689a      	ldr	r2, [r3, #8]
 8000668:	f022 0201 	bic.w	r2, r2, #1
 800066c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800066e:	f7ff fdb1 	bl	80001d4 <HAL_GetTick>
 8000672:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000674:	6823      	ldr	r3, [r4, #0]
 8000676:	689b      	ldr	r3, [r3, #8]
 8000678:	f013 0f01 	tst.w	r3, #1
 800067c:	d00e      	beq.n	800069c <ADC_ConversionStop_Disable+0x48>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800067e:	f7ff fda9 	bl	80001d4 <HAL_GetTick>
 8000682:	1b40      	subs	r0, r0, r5
 8000684:	2802      	cmp	r0, #2
 8000686:	d9f5      	bls.n	8000674 <ADC_ConversionStop_Disable+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000688:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000690:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000692:	f043 0301 	orr.w	r3, r3, #1
 8000696:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_ERROR;
 8000698:	2001      	movs	r0, #1
 800069a:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800069c:	2000      	movs	r0, #0
 800069e:	bd38      	pop	{r3, r4, r5, pc}

080006a0 <HAL_ADC_Init>:
  if(hadc == NULL)
 80006a0:	2800      	cmp	r0, #0
 80006a2:	d07f      	beq.n	80007a4 <HAL_ADC_Init+0x104>
{
 80006a4:	b538      	push	{r3, r4, r5, lr}
 80006a6:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 80006a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d04a      	beq.n	8000744 <HAL_ADC_Init+0xa4>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80006ae:	4620      	mov	r0, r4
 80006b0:	f7ff ffd0 	bl	8000654 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80006b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80006b6:	f013 0310 	ands.w	r3, r3, #16
 80006ba:	d16d      	bne.n	8000798 <HAL_ADC_Init+0xf8>
 80006bc:	2800      	cmp	r0, #0
 80006be:	d16b      	bne.n	8000798 <HAL_ADC_Init+0xf8>
    ADC_STATE_CLR_SET(hadc->State,
 80006c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80006c2:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80006c6:	f022 0202 	bic.w	r2, r2, #2
 80006ca:	f042 0202 	orr.w	r2, r2, #2
 80006ce:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80006d0:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80006d2:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80006d4:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80006d6:	68e5      	ldr	r5, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80006d8:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80006dc:	68a1      	ldr	r1, [r4, #8]
 80006de:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80006e2:	d038      	beq.n	8000756 <HAL_ADC_Init+0xb6>
 80006e4:	2901      	cmp	r1, #1
 80006e6:	d033      	beq.n	8000750 <HAL_ADC_Init+0xb0>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80006e8:	6961      	ldr	r1, [r4, #20]
 80006ea:	2901      	cmp	r1, #1
 80006ec:	d036      	beq.n	800075c <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->CR1,
 80006ee:	6825      	ldr	r5, [r4, #0]
 80006f0:	6869      	ldr	r1, [r5, #4]
 80006f2:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 80006f6:	430b      	orrs	r3, r1
 80006f8:	606b      	str	r3, [r5, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80006fa:	6821      	ldr	r1, [r4, #0]
 80006fc:	688d      	ldr	r5, [r1, #8]
 80006fe:	4b2a      	ldr	r3, [pc, #168]	; (80007a8 <HAL_ADC_Init+0x108>)
 8000700:	402b      	ands	r3, r5
 8000702:	4313      	orrs	r3, r2
 8000704:	608b      	str	r3, [r1, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000706:	68a3      	ldr	r3, [r4, #8]
 8000708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800070c:	d037      	beq.n	800077e <HAL_ADC_Init+0xde>
 800070e:	2b01      	cmp	r3, #1
 8000710:	d035      	beq.n	800077e <HAL_ADC_Init+0xde>
  uint32_t tmp_sqr1 = 0U;
 8000712:	2300      	movs	r3, #0
    MODIFY_REG(hadc->Instance->SQR1,
 8000714:	6825      	ldr	r5, [r4, #0]
 8000716:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8000718:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 800071c:	430b      	orrs	r3, r1
 800071e:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000720:	6823      	ldr	r3, [r4, #0]
 8000722:	6899      	ldr	r1, [r3, #8]
 8000724:	4b21      	ldr	r3, [pc, #132]	; (80007ac <HAL_ADC_Init+0x10c>)
 8000726:	400b      	ands	r3, r1
 8000728:	429a      	cmp	r2, r3
 800072a:	d02c      	beq.n	8000786 <HAL_ADC_Init+0xe6>
      ADC_STATE_CLR_SET(hadc->State,
 800072c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800072e:	f023 0312 	bic.w	r3, r3, #18
 8000732:	f043 0310 	orr.w	r3, r3, #16
 8000736:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000738:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800073a:	f043 0301 	orr.w	r3, r3, #1
 800073e:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 8000740:	2001      	movs	r0, #1
 8000742:	bd38      	pop	{r3, r4, r5, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 8000744:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000746:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800074a:	f003 f8f3 	bl	8003934 <HAL_ADC_MspInit>
 800074e:	e7ae      	b.n	80006ae <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000750:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000754:	e7c8      	b.n	80006e8 <HAL_ADC_Init+0x48>
 8000756:	f44f 7380 	mov.w	r3, #256	; 0x100
 800075a:	e7c5      	b.n	80006e8 <HAL_ADC_Init+0x48>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800075c:	b935      	cbnz	r5, 800076c <HAL_ADC_Init+0xcc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800075e:	69a1      	ldr	r1, [r4, #24]
 8000760:	3901      	subs	r1, #1
 8000762:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 8000766:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800076a:	e7c0      	b.n	80006ee <HAL_ADC_Init+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800076c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800076e:	f041 0120 	orr.w	r1, r1, #32
 8000772:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000774:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000776:	f041 0101 	orr.w	r1, r1, #1
 800077a:	62e1      	str	r1, [r4, #44]	; 0x2c
 800077c:	e7b7      	b.n	80006ee <HAL_ADC_Init+0x4e>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800077e:	6923      	ldr	r3, [r4, #16]
 8000780:	3b01      	subs	r3, #1
 8000782:	051b      	lsls	r3, r3, #20
 8000784:	e7c6      	b.n	8000714 <HAL_ADC_Init+0x74>
      ADC_CLEAR_ERRORCODE(hadc);
 8000786:	2300      	movs	r3, #0
 8000788:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800078a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800078c:	f023 0303 	bic.w	r3, r3, #3
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	62a3      	str	r3, [r4, #40]	; 0x28
 8000796:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000798:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800079a:	f043 0310 	orr.w	r3, r3, #16
 800079e:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 80007a0:	2001      	movs	r0, #1
 80007a2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80007a4:	2001      	movs	r0, #1
 80007a6:	4770      	bx	lr
 80007a8:	ffe1f7fd 	.word	0xffe1f7fd
 80007ac:	ff1f0efe 	.word	0xff1f0efe

080007b0 <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 80007b0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d102      	bne.n	80007be <HAL_ADC_Stop_DMA+0xe>
 80007b8:	2302      	movs	r3, #2
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	4770      	bx	lr
{
 80007be:	b510      	push	{r4, lr}
 80007c0:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80007c2:	2301      	movs	r3, #1
 80007c4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80007c8:	f7ff ff44 	bl	8000654 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 80007cc:	4603      	mov	r3, r0
 80007ce:	b120      	cbz	r0, 80007da <HAL_ADC_Stop_DMA+0x2a>
  __HAL_UNLOCK(hadc);
 80007d0:	2200      	movs	r2, #0
 80007d2:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	bd10      	pop	{r4, pc}
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80007da:	6822      	ldr	r2, [r4, #0]
 80007dc:	6893      	ldr	r3, [r2, #8]
 80007de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007e2:	6093      	str	r3, [r2, #8]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80007e4:	6a20      	ldr	r0, [r4, #32]
 80007e6:	f000 f919 	bl	8000a1c <HAL_DMA_Abort>
    if (tmp_hal_status == HAL_OK)
 80007ea:	4603      	mov	r3, r0
 80007ec:	b940      	cbnz	r0, 8000800 <HAL_ADC_Stop_DMA+0x50>
      ADC_STATE_CLR_SET(hadc->State,
 80007ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80007f0:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80007f4:	f022 0201 	bic.w	r2, r2, #1
 80007f8:	f042 0201 	orr.w	r2, r2, #1
 80007fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80007fe:	e7e7      	b.n	80007d0 <HAL_ADC_Stop_DMA+0x20>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000800:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000802:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000806:	62a2      	str	r2, [r4, #40]	; 0x28
 8000808:	e7e2      	b.n	80007d0 <HAL_ADC_Stop_DMA+0x20>
	...

0800080c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800080c:	4a07      	ldr	r2, [pc, #28]	; (800082c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800080e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000810:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000814:	041b      	lsls	r3, r3, #16
 8000816:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000818:	0200      	lsls	r0, r0, #8
 800081a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800081e:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000820:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000824:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000828:	60d0      	str	r0, [r2, #12]
 800082a:	4770      	bx	lr
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000830:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000832:	4b16      	ldr	r3, [pc, #88]	; (800088c <HAL_NVIC_SetPriority+0x5c>)
 8000834:	68db      	ldr	r3, [r3, #12]
 8000836:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800083a:	f1c3 0407 	rsb	r4, r3, #7
 800083e:	2c04      	cmp	r4, #4
 8000840:	bf28      	it	cs
 8000842:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000844:	1d1d      	adds	r5, r3, #4
 8000846:	2d06      	cmp	r5, #6
 8000848:	d917      	bls.n	800087a <HAL_NVIC_SetPriority+0x4a>
 800084a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800084c:	2501      	movs	r5, #1
 800084e:	fa05 f404 	lsl.w	r4, r5, r4
 8000852:	3c01      	subs	r4, #1
 8000854:	4021      	ands	r1, r4
 8000856:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000858:	fa05 f303 	lsl.w	r3, r5, r3
 800085c:	3b01      	subs	r3, #1
 800085e:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000860:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000862:	2800      	cmp	r0, #0
 8000864:	db0b      	blt.n	800087e <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000866:	0109      	lsls	r1, r1, #4
 8000868:	b2c9      	uxtb	r1, r1
 800086a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800086e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000872:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000876:	bc30      	pop	{r4, r5}
 8000878:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800087a:	2300      	movs	r3, #0
 800087c:	e7e6      	b.n	800084c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087e:	f000 000f 	and.w	r0, r0, #15
 8000882:	0109      	lsls	r1, r1, #4
 8000884:	b2c9      	uxtb	r1, r1
 8000886:	4b02      	ldr	r3, [pc, #8]	; (8000890 <HAL_NVIC_SetPriority+0x60>)
 8000888:	5419      	strb	r1, [r3, r0]
 800088a:	e7f4      	b.n	8000876 <HAL_NVIC_SetPriority+0x46>
 800088c:	e000ed00 	.word	0xe000ed00
 8000890:	e000ed14 	.word	0xe000ed14

08000894 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000894:	0942      	lsrs	r2, r0, #5
 8000896:	f000 001f 	and.w	r0, r0, #31
 800089a:	2301      	movs	r3, #1
 800089c:	fa03 f000 	lsl.w	r0, r3, r0
 80008a0:	4b01      	ldr	r3, [pc, #4]	; (80008a8 <HAL_NVIC_EnableIRQ+0x14>)
 80008a2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80008a6:	4770      	bx	lr
 80008a8:	e000e100 	.word	0xe000e100

080008ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008ac:	3801      	subs	r0, #1
 80008ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008b2:	d20a      	bcs.n	80008ca <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_SYSTICK_Config+0x24>)
 80008b6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b8:	21f0      	movs	r1, #240	; 0xf0
 80008ba:	4a06      	ldr	r2, [pc, #24]	; (80008d4 <HAL_SYSTICK_Config+0x28>)
 80008bc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c0:	2000      	movs	r0, #0
 80008c2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008c4:	2207      	movs	r2, #7
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80008ca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000e010 	.word	0xe000e010
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80008d8:	2804      	cmp	r0, #4
 80008da:	d005      	beq.n	80008e8 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80008dc:	4a05      	ldr	r2, [pc, #20]	; (80008f4 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80008de:	6813      	ldr	r3, [r2, #0]
 80008e0:	f023 0304 	bic.w	r3, r3, #4
 80008e4:	6013      	str	r3, [r2, #0]
 80008e6:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80008e8:	4a02      	ldr	r2, [pc, #8]	; (80008f4 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80008ea:	6813      	ldr	r3, [r2, #0]
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	6013      	str	r3, [r2, #0]
 80008f2:	4770      	bx	lr
 80008f4:	e000e010 	.word	0xe000e010

080008f8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80008f8:	4770      	bx	lr

080008fa <HAL_SYSTICK_IRQHandler>:
{
 80008fa:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80008fc:	f7ff fffc 	bl	80008f8 <HAL_SYSTICK_Callback>
 8000900:	bd08      	pop	{r3, pc}

08000902 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000902:	b470      	push	{r4, r5, r6}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000904:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8000906:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8000908:	2401      	movs	r4, #1
 800090a:	40b4      	lsls	r4, r6
 800090c:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800090e:	6804      	ldr	r4, [r0, #0]
 8000910:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000912:	6843      	ldr	r3, [r0, #4]
 8000914:	2b10      	cmp	r3, #16
 8000916:	d005      	beq.n	8000924 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000918:	6803      	ldr	r3, [r0, #0]
 800091a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800091c:	6803      	ldr	r3, [r0, #0]
 800091e:	60da      	str	r2, [r3, #12]
  }
}
 8000920:	bc70      	pop	{r4, r5, r6}
 8000922:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8000924:	6803      	ldr	r3, [r0, #0]
 8000926:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000928:	6803      	ldr	r3, [r0, #0]
 800092a:	60d9      	str	r1, [r3, #12]
 800092c:	e7f8      	b.n	8000920 <DMA_SetConfig+0x1e>
	...

08000930 <HAL_DMA_Init>:
  if(hdma == NULL)
 8000930:	2800      	cmp	r0, #0
 8000932:	d030      	beq.n	8000996 <HAL_DMA_Init+0x66>
{
 8000934:	b410      	push	{r4}
 8000936:	4603      	mov	r3, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000938:	6800      	ldr	r0, [r0, #0]
 800093a:	4a18      	ldr	r2, [pc, #96]	; (800099c <HAL_DMA_Init+0x6c>)
 800093c:	4402      	add	r2, r0
 800093e:	4918      	ldr	r1, [pc, #96]	; (80009a0 <HAL_DMA_Init+0x70>)
 8000940:	fba1 1202 	umull	r1, r2, r1, r2
 8000944:	0912      	lsrs	r2, r2, #4
 8000946:	0092      	lsls	r2, r2, #2
 8000948:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800094a:	4a16      	ldr	r2, [pc, #88]	; (80009a4 <HAL_DMA_Init+0x74>)
 800094c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 800094e:	2202      	movs	r2, #2
 8000950:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8000954:	6801      	ldr	r1, [r0, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000956:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
 800095a:	f021 0130 	bic.w	r1, r1, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 800095e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000960:	689c      	ldr	r4, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000962:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000964:	68dc      	ldr	r4, [r3, #12]
 8000966:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000968:	691c      	ldr	r4, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800096a:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800096c:	695c      	ldr	r4, [r3, #20]
 800096e:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000970:	699c      	ldr	r4, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000972:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000974:	69dc      	ldr	r4, [r3, #28]
 8000976:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8000978:	430a      	orrs	r2, r1
  hdma->Instance->CCR = tmp;
 800097a:	6002      	str	r2, [r0, #0]
  hdma->XferCpltCallback = NULL;
 800097c:	2000      	movs	r0, #0
 800097e:	6298      	str	r0, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000980:	62d8      	str	r0, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000982:	6318      	str	r0, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000984:	6358      	str	r0, [r3, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000986:	6398      	str	r0, [r3, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8000988:	2201      	movs	r2, #1
 800098a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 800098e:	f883 0020 	strb.w	r0, [r3, #32]
}
 8000992:	bc10      	pop	{r4}
 8000994:	4770      	bx	lr
    return HAL_ERROR;
 8000996:	2001      	movs	r0, #1
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	bffdfff8 	.word	0xbffdfff8
 80009a0:	cccccccd 	.word	0xcccccccd
 80009a4:	40020000 	.word	0x40020000

080009a8 <HAL_DMA_Start_IT>:
{
 80009a8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 80009aa:	f890 4020 	ldrb.w	r4, [r0, #32]
 80009ae:	2c01      	cmp	r4, #1
 80009b0:	d032      	beq.n	8000a18 <HAL_DMA_Start_IT+0x70>
 80009b2:	2401      	movs	r4, #1
 80009b4:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80009b8:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 80009bc:	2c01      	cmp	r4, #1
 80009be:	d004      	beq.n	80009ca <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 80009c0:	2300      	movs	r3, #0
 80009c2:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 80009c6:	2002      	movs	r0, #2
 80009c8:	bd38      	pop	{r3, r4, r5, pc}
 80009ca:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 80009cc:	2002      	movs	r0, #2
 80009ce:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009d2:	2000      	movs	r0, #0
 80009d4:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80009d6:	6825      	ldr	r5, [r4, #0]
 80009d8:	6828      	ldr	r0, [r5, #0]
 80009da:	f020 0001 	bic.w	r0, r0, #1
 80009de:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80009e0:	4620      	mov	r0, r4
 80009e2:	f7ff ff8e 	bl	8000902 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 80009e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80009e8:	b15b      	cbz	r3, 8000a02 <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009ea:	6822      	ldr	r2, [r4, #0]
 80009ec:	6813      	ldr	r3, [r2, #0]
 80009ee:	f043 030e 	orr.w	r3, r3, #14
 80009f2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80009f4:	6822      	ldr	r2, [r4, #0]
 80009f6:	6813      	ldr	r3, [r2, #0]
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80009fe:	2000      	movs	r0, #0
 8000a00:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000a02:	6822      	ldr	r2, [r4, #0]
 8000a04:	6813      	ldr	r3, [r2, #0]
 8000a06:	f023 0304 	bic.w	r3, r3, #4
 8000a0a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000a0c:	6822      	ldr	r2, [r4, #0]
 8000a0e:	6813      	ldr	r3, [r2, #0]
 8000a10:	f043 030a 	orr.w	r3, r3, #10
 8000a14:	6013      	str	r3, [r2, #0]
 8000a16:	e7ed      	b.n	80009f4 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8000a18:	2002      	movs	r0, #2
}
 8000a1a:	bd38      	pop	{r3, r4, r5, pc}

08000a1c <HAL_DMA_Abort>:
{
 8000a1c:	4603      	mov	r3, r0
  __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a1e:	6801      	ldr	r1, [r0, #0]
 8000a20:	680a      	ldr	r2, [r1, #0]
 8000a22:	f022 020e 	bic.w	r2, r2, #14
 8000a26:	600a      	str	r2, [r1, #0]
  __HAL_DMA_DISABLE(hdma);
 8000a28:	6801      	ldr	r1, [r0, #0]
 8000a2a:	680a      	ldr	r2, [r1, #0]
 8000a2c:	f022 0201 	bic.w	r2, r2, #1
 8000a30:	600a      	str	r2, [r1, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a32:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8000a34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a36:	2101      	movs	r1, #1
 8000a38:	fa01 f202 	lsl.w	r2, r1, r2
 8000a3c:	6042      	str	r2, [r0, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8000a3e:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 8000a42:	2000      	movs	r0, #0
 8000a44:	f883 0020 	strb.w	r0, [r3, #32]
}
 8000a48:	4770      	bx	lr
	...

08000a4c <HAL_DMA_IRQHandler>:
{
 8000a4c:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000a4e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000a50:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000a52:	6804      	ldr	r4, [r0, #0]
 8000a54:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000a56:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000a58:	2304      	movs	r3, #4
 8000a5a:	408b      	lsls	r3, r1
 8000a5c:	421a      	tst	r2, r3
 8000a5e:	d036      	beq.n	8000ace <HAL_DMA_IRQHandler+0x82>
 8000a60:	f015 0f04 	tst.w	r5, #4
 8000a64:	d033      	beq.n	8000ace <HAL_DMA_IRQHandler+0x82>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a66:	6823      	ldr	r3, [r4, #0]
 8000a68:	f013 0f20 	tst.w	r3, #32
 8000a6c:	d103      	bne.n	8000a76 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000a6e:	6823      	ldr	r3, [r4, #0]
 8000a70:	f023 0304 	bic.w	r3, r3, #4
 8000a74:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000a76:	6803      	ldr	r3, [r0, #0]
 8000a78:	4a43      	ldr	r2, [pc, #268]	; (8000b88 <HAL_DMA_IRQHandler+0x13c>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d014      	beq.n	8000aa8 <HAL_DMA_IRQHandler+0x5c>
 8000a7e:	3214      	adds	r2, #20
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d019      	beq.n	8000ab8 <HAL_DMA_IRQHandler+0x6c>
 8000a84:	3214      	adds	r2, #20
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d018      	beq.n	8000abc <HAL_DMA_IRQHandler+0x70>
 8000a8a:	3214      	adds	r2, #20
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d018      	beq.n	8000ac2 <HAL_DMA_IRQHandler+0x76>
 8000a90:	3214      	adds	r2, #20
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d018      	beq.n	8000ac8 <HAL_DMA_IRQHandler+0x7c>
 8000a96:	3214      	adds	r2, #20
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d002      	beq.n	8000aa2 <HAL_DMA_IRQHandler+0x56>
 8000a9c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000aa0:	e003      	b.n	8000aaa <HAL_DMA_IRQHandler+0x5e>
 8000aa2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000aa6:	e000      	b.n	8000aaa <HAL_DMA_IRQHandler+0x5e>
 8000aa8:	2204      	movs	r2, #4
 8000aaa:	4b38      	ldr	r3, [pc, #224]	; (8000b8c <HAL_DMA_IRQHandler+0x140>)
 8000aac:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000aae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d067      	beq.n	8000b84 <HAL_DMA_IRQHandler+0x138>
      hdma->XferHalfCpltCallback(hdma);
 8000ab4:	4798      	blx	r3
 8000ab6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000ab8:	2240      	movs	r2, #64	; 0x40
 8000aba:	e7f6      	b.n	8000aaa <HAL_DMA_IRQHandler+0x5e>
 8000abc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ac0:	e7f3      	b.n	8000aaa <HAL_DMA_IRQHandler+0x5e>
 8000ac2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ac6:	e7f0      	b.n	8000aaa <HAL_DMA_IRQHandler+0x5e>
 8000ac8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000acc:	e7ed      	b.n	8000aaa <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000ace:	2302      	movs	r3, #2
 8000ad0:	408b      	lsls	r3, r1
 8000ad2:	421a      	tst	r2, r3
 8000ad4:	d03b      	beq.n	8000b4e <HAL_DMA_IRQHandler+0x102>
 8000ad6:	f015 0f02 	tst.w	r5, #2
 8000ada:	d038      	beq.n	8000b4e <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000adc:	6823      	ldr	r3, [r4, #0]
 8000ade:	f013 0f20 	tst.w	r3, #32
 8000ae2:	d106      	bne.n	8000af2 <HAL_DMA_IRQHandler+0xa6>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000ae4:	6823      	ldr	r3, [r4, #0]
 8000ae6:	f023 030a 	bic.w	r3, r3, #10
 8000aea:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000aec:	2301      	movs	r3, #1
 8000aee:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000af2:	6803      	ldr	r3, [r0, #0]
 8000af4:	4a24      	ldr	r2, [pc, #144]	; (8000b88 <HAL_DMA_IRQHandler+0x13c>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d014      	beq.n	8000b24 <HAL_DMA_IRQHandler+0xd8>
 8000afa:	3214      	adds	r2, #20
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d01b      	beq.n	8000b38 <HAL_DMA_IRQHandler+0xec>
 8000b00:	3214      	adds	r2, #20
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d01a      	beq.n	8000b3c <HAL_DMA_IRQHandler+0xf0>
 8000b06:	3214      	adds	r2, #20
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d01a      	beq.n	8000b42 <HAL_DMA_IRQHandler+0xf6>
 8000b0c:	3214      	adds	r2, #20
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d01a      	beq.n	8000b48 <HAL_DMA_IRQHandler+0xfc>
 8000b12:	3214      	adds	r2, #20
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d002      	beq.n	8000b1e <HAL_DMA_IRQHandler+0xd2>
 8000b18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b1c:	e003      	b.n	8000b26 <HAL_DMA_IRQHandler+0xda>
 8000b1e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b22:	e000      	b.n	8000b26 <HAL_DMA_IRQHandler+0xda>
 8000b24:	2202      	movs	r2, #2
 8000b26:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <HAL_DMA_IRQHandler+0x140>)
 8000b28:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000b30:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000b32:	b33b      	cbz	r3, 8000b84 <HAL_DMA_IRQHandler+0x138>
      hdma->XferCpltCallback(hdma);
 8000b34:	4798      	blx	r3
 8000b36:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000b38:	2220      	movs	r2, #32
 8000b3a:	e7f4      	b.n	8000b26 <HAL_DMA_IRQHandler+0xda>
 8000b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b40:	e7f1      	b.n	8000b26 <HAL_DMA_IRQHandler+0xda>
 8000b42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b46:	e7ee      	b.n	8000b26 <HAL_DMA_IRQHandler+0xda>
 8000b48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b4c:	e7eb      	b.n	8000b26 <HAL_DMA_IRQHandler+0xda>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000b4e:	2308      	movs	r3, #8
 8000b50:	fa03 f101 	lsl.w	r1, r3, r1
 8000b54:	420a      	tst	r2, r1
 8000b56:	d015      	beq.n	8000b84 <HAL_DMA_IRQHandler+0x138>
 8000b58:	f015 0f08 	tst.w	r5, #8
 8000b5c:	d012      	beq.n	8000b84 <HAL_DMA_IRQHandler+0x138>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b5e:	6823      	ldr	r3, [r4, #0]
 8000b60:	f023 030e 	bic.w	r3, r3, #14
 8000b64:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b66:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000b68:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	fa03 f202 	lsl.w	r2, r3, r2
 8000b70:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000b72:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000b74:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000b7e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000b80:	b103      	cbz	r3, 8000b84 <HAL_DMA_IRQHandler+0x138>
      hdma->XferErrorCallback(hdma);
 8000b82:	4798      	blx	r3
 8000b84:	bd38      	pop	{r3, r4, r5, pc}
 8000b86:	bf00      	nop
 8000b88:	40020008 	.word	0x40020008
 8000b8c:	40020000 	.word	0x40020000

08000b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b92:	b083      	sub	sp, #12
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000b94:	2600      	movs	r6, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000b96:	4634      	mov	r4, r6
 8000b98:	e071      	b.n	8000c7e <HAL_GPIO_Init+0xee>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	f000 80a1 	beq.w	8000ce2 <HAL_GPIO_Init+0x152>
 8000ba0:	2d01      	cmp	r5, #1
 8000ba2:	d100      	bne.n	8000ba6 <HAL_GPIO_Init+0x16>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ba4:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ba6:	2bff      	cmp	r3, #255	; 0xff
 8000ba8:	f200 80af 	bhi.w	8000d0a <HAL_GPIO_Init+0x17a>
 8000bac:	4686      	mov	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000bae:	2bff      	cmp	r3, #255	; 0xff
 8000bb0:	f200 80ae 	bhi.w	8000d10 <HAL_GPIO_Init+0x180>
 8000bb4:	00a5      	lsls	r5, r4, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bb6:	f8de 2000 	ldr.w	r2, [lr]
 8000bba:	270f      	movs	r7, #15
 8000bbc:	40af      	lsls	r7, r5
 8000bbe:	ea22 0207 	bic.w	r2, r2, r7
 8000bc2:	fa06 f505 	lsl.w	r5, r6, r5
 8000bc6:	432a      	orrs	r2, r5
 8000bc8:	f8ce 2000 	str.w	r2, [lr]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bcc:	684a      	ldr	r2, [r1, #4]
 8000bce:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000bd2:	d053      	beq.n	8000c7c <HAL_GPIO_Init+0xec>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bd4:	4a63      	ldr	r2, [pc, #396]	; (8000d64 <HAL_GPIO_Init+0x1d4>)
 8000bd6:	6995      	ldr	r5, [r2, #24]
 8000bd8:	f045 0501 	orr.w	r5, r5, #1
 8000bdc:	6195      	str	r5, [r2, #24]
 8000bde:	6992      	ldr	r2, [r2, #24]
 8000be0:	f002 0201 	and.w	r2, r2, #1
 8000be4:	9201      	str	r2, [sp, #4]
 8000be6:	9a01      	ldr	r2, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 8000be8:	08a5      	lsrs	r5, r4, #2
 8000bea:	1caf      	adds	r7, r5, #2
 8000bec:	4a5e      	ldr	r2, [pc, #376]	; (8000d68 <HAL_GPIO_Init+0x1d8>)
 8000bee:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000bf2:	f004 0703 	and.w	r7, r4, #3
 8000bf6:	00bf      	lsls	r7, r7, #2
 8000bf8:	f04f 0e0f 	mov.w	lr, #15
 8000bfc:	fa0e fe07 	lsl.w	lr, lr, r7
 8000c00:	ea22 020e 	bic.w	r2, r2, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c04:	f8df e170 	ldr.w	lr, [pc, #368]	; 8000d78 <HAL_GPIO_Init+0x1e8>
 8000c08:	4570      	cmp	r0, lr
 8000c0a:	f000 8088 	beq.w	8000d1e <HAL_GPIO_Init+0x18e>
 8000c0e:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8000c12:	4570      	cmp	r0, lr
 8000c14:	f000 8086 	beq.w	8000d24 <HAL_GPIO_Init+0x194>
 8000c18:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8000c1c:	4570      	cmp	r0, lr
 8000c1e:	f000 8084 	beq.w	8000d2a <HAL_GPIO_Init+0x19a>
 8000c22:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8000c26:	4570      	cmp	r0, lr
 8000c28:	d076      	beq.n	8000d18 <HAL_GPIO_Init+0x188>
 8000c2a:	f04f 0e04 	mov.w	lr, #4
 8000c2e:	fa0e f707 	lsl.w	r7, lr, r7
 8000c32:	433a      	orrs	r2, r7
        AFIO->EXTICR[position >> 2U] = temp;
 8000c34:	3502      	adds	r5, #2
 8000c36:	4f4c      	ldr	r7, [pc, #304]	; (8000d68 <HAL_GPIO_Init+0x1d8>)
 8000c38:	f847 2025 	str.w	r2, [r7, r5, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c3c:	684a      	ldr	r2, [r1, #4]
 8000c3e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8000c42:	d075      	beq.n	8000d30 <HAL_GPIO_Init+0x1a0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c44:	4d49      	ldr	r5, [pc, #292]	; (8000d6c <HAL_GPIO_Init+0x1dc>)
 8000c46:	682a      	ldr	r2, [r5, #0]
 8000c48:	431a      	orrs	r2, r3
 8000c4a:	602a      	str	r2, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c4c:	684a      	ldr	r2, [r1, #4]
 8000c4e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000c52:	d073      	beq.n	8000d3c <HAL_GPIO_Init+0x1ac>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c54:	4d45      	ldr	r5, [pc, #276]	; (8000d6c <HAL_GPIO_Init+0x1dc>)
 8000c56:	686a      	ldr	r2, [r5, #4]
 8000c58:	431a      	orrs	r2, r3
 8000c5a:	606a      	str	r2, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c5c:	684a      	ldr	r2, [r1, #4]
 8000c5e:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8000c62:	d071      	beq.n	8000d48 <HAL_GPIO_Init+0x1b8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c64:	4d41      	ldr	r5, [pc, #260]	; (8000d6c <HAL_GPIO_Init+0x1dc>)
 8000c66:	68aa      	ldr	r2, [r5, #8]
 8000c68:	431a      	orrs	r2, r3
 8000c6a:	60aa      	str	r2, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c6c:	684a      	ldr	r2, [r1, #4]
 8000c6e:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8000c72:	d06f      	beq.n	8000d54 <HAL_GPIO_Init+0x1c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c74:	4d3d      	ldr	r5, [pc, #244]	; (8000d6c <HAL_GPIO_Init+0x1dc>)
 8000c76:	68ea      	ldr	r2, [r5, #12]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	60eb      	str	r3, [r5, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000c7c:	3401      	adds	r4, #1
 8000c7e:	2c0f      	cmp	r4, #15
 8000c80:	d86e      	bhi.n	8000d60 <HAL_GPIO_Init+0x1d0>
    ioposition = (0x01U << position);
 8000c82:	2201      	movs	r2, #1
 8000c84:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c86:	680b      	ldr	r3, [r1, #0]
 8000c88:	4013      	ands	r3, r2
    if (iocurrent == ioposition)
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d1f6      	bne.n	8000c7c <HAL_GPIO_Init+0xec>
      switch (GPIO_Init->Mode)
 8000c8e:	684d      	ldr	r5, [r1, #4]
 8000c90:	2d12      	cmp	r5, #18
 8000c92:	d030      	beq.n	8000cf6 <HAL_GPIO_Init+0x166>
 8000c94:	d80b      	bhi.n	8000cae <HAL_GPIO_Init+0x11e>
 8000c96:	2d02      	cmp	r5, #2
 8000c98:	d02a      	beq.n	8000cf0 <HAL_GPIO_Init+0x160>
 8000c9a:	f67f af7e 	bls.w	8000b9a <HAL_GPIO_Init+0xa>
 8000c9e:	2d03      	cmp	r5, #3
 8000ca0:	d02f      	beq.n	8000d02 <HAL_GPIO_Init+0x172>
 8000ca2:	2d11      	cmp	r5, #17
 8000ca4:	f47f af7f 	bne.w	8000ba6 <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ca8:	68ce      	ldr	r6, [r1, #12]
 8000caa:	3604      	adds	r6, #4
          break;
 8000cac:	e77b      	b.n	8000ba6 <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 8000cae:	4f30      	ldr	r7, [pc, #192]	; (8000d70 <HAL_GPIO_Init+0x1e0>)
 8000cb0:	42bd      	cmp	r5, r7
 8000cb2:	d016      	beq.n	8000ce2 <HAL_GPIO_Init+0x152>
 8000cb4:	d90c      	bls.n	8000cd0 <HAL_GPIO_Init+0x140>
 8000cb6:	4f2f      	ldr	r7, [pc, #188]	; (8000d74 <HAL_GPIO_Init+0x1e4>)
 8000cb8:	42bd      	cmp	r5, r7
 8000cba:	d012      	beq.n	8000ce2 <HAL_GPIO_Init+0x152>
 8000cbc:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000cc0:	42bd      	cmp	r5, r7
 8000cc2:	d00e      	beq.n	8000ce2 <HAL_GPIO_Init+0x152>
 8000cc4:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000cc8:	42bd      	cmp	r5, r7
 8000cca:	f47f af6c 	bne.w	8000ba6 <HAL_GPIO_Init+0x16>
 8000cce:	e008      	b.n	8000ce2 <HAL_GPIO_Init+0x152>
 8000cd0:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000cd4:	42bd      	cmp	r5, r7
 8000cd6:	d004      	beq.n	8000ce2 <HAL_GPIO_Init+0x152>
 8000cd8:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000cdc:	42bd      	cmp	r5, r7
 8000cde:	f47f af62 	bne.w	8000ba6 <HAL_GPIO_Init+0x16>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ce2:	688d      	ldr	r5, [r1, #8]
 8000ce4:	b17d      	cbz	r5, 8000d06 <HAL_GPIO_Init+0x176>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ce6:	2d01      	cmp	r5, #1
 8000ce8:	d008      	beq.n	8000cfc <HAL_GPIO_Init+0x16c>
            GPIOx->BRR = ioposition;
 8000cea:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cec:	2608      	movs	r6, #8
 8000cee:	e75a      	b.n	8000ba6 <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cf0:	68ce      	ldr	r6, [r1, #12]
 8000cf2:	3608      	adds	r6, #8
          break;
 8000cf4:	e757      	b.n	8000ba6 <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cf6:	68ce      	ldr	r6, [r1, #12]
 8000cf8:	360c      	adds	r6, #12
          break;
 8000cfa:	e754      	b.n	8000ba6 <HAL_GPIO_Init+0x16>
            GPIOx->BSRR = ioposition;
 8000cfc:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cfe:	2608      	movs	r6, #8
 8000d00:	e751      	b.n	8000ba6 <HAL_GPIO_Init+0x16>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d02:	2600      	movs	r6, #0
 8000d04:	e74f      	b.n	8000ba6 <HAL_GPIO_Init+0x16>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d06:	2604      	movs	r6, #4
 8000d08:	e74d      	b.n	8000ba6 <HAL_GPIO_Init+0x16>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d0a:	f100 0e04 	add.w	lr, r0, #4
 8000d0e:	e74e      	b.n	8000bae <HAL_GPIO_Init+0x1e>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000d10:	f1a4 0508 	sub.w	r5, r4, #8
 8000d14:	00ad      	lsls	r5, r5, #2
 8000d16:	e74e      	b.n	8000bb6 <HAL_GPIO_Init+0x26>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d18:	f04f 0e03 	mov.w	lr, #3
 8000d1c:	e787      	b.n	8000c2e <HAL_GPIO_Init+0x9e>
 8000d1e:	f04f 0e00 	mov.w	lr, #0
 8000d22:	e784      	b.n	8000c2e <HAL_GPIO_Init+0x9e>
 8000d24:	f04f 0e01 	mov.w	lr, #1
 8000d28:	e781      	b.n	8000c2e <HAL_GPIO_Init+0x9e>
 8000d2a:	f04f 0e02 	mov.w	lr, #2
 8000d2e:	e77e      	b.n	8000c2e <HAL_GPIO_Init+0x9e>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d30:	4d0e      	ldr	r5, [pc, #56]	; (8000d6c <HAL_GPIO_Init+0x1dc>)
 8000d32:	682a      	ldr	r2, [r5, #0]
 8000d34:	ea22 0203 	bic.w	r2, r2, r3
 8000d38:	602a      	str	r2, [r5, #0]
 8000d3a:	e787      	b.n	8000c4c <HAL_GPIO_Init+0xbc>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d3c:	4d0b      	ldr	r5, [pc, #44]	; (8000d6c <HAL_GPIO_Init+0x1dc>)
 8000d3e:	686a      	ldr	r2, [r5, #4]
 8000d40:	ea22 0203 	bic.w	r2, r2, r3
 8000d44:	606a      	str	r2, [r5, #4]
 8000d46:	e789      	b.n	8000c5c <HAL_GPIO_Init+0xcc>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d48:	4d08      	ldr	r5, [pc, #32]	; (8000d6c <HAL_GPIO_Init+0x1dc>)
 8000d4a:	68aa      	ldr	r2, [r5, #8]
 8000d4c:	ea22 0203 	bic.w	r2, r2, r3
 8000d50:	60aa      	str	r2, [r5, #8]
 8000d52:	e78b      	b.n	8000c6c <HAL_GPIO_Init+0xdc>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d54:	4d05      	ldr	r5, [pc, #20]	; (8000d6c <HAL_GPIO_Init+0x1dc>)
 8000d56:	68ea      	ldr	r2, [r5, #12]
 8000d58:	ea22 0303 	bic.w	r3, r2, r3
 8000d5c:	60eb      	str	r3, [r5, #12]
 8000d5e:	e78d      	b.n	8000c7c <HAL_GPIO_Init+0xec>
        }
      }
    }
  }
}
 8000d60:	b003      	add	sp, #12
 8000d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40010000 	.word	0x40010000
 8000d6c:	40010400 	.word	0x40010400
 8000d70:	10210000 	.word	0x10210000
 8000d74:	10310000 	.word	0x10310000
 8000d78:	40010800 	.word	0x40010800

08000d7c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d7c:	6883      	ldr	r3, [r0, #8]
 8000d7e:	4219      	tst	r1, r3
 8000d80:	d101      	bne.n	8000d86 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d82:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8000d84:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8000d86:	2001      	movs	r0, #1
 8000d88:	4770      	bx	lr

08000d8a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d8a:	b912      	cbnz	r2, 8000d92 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d8c:	0409      	lsls	r1, r1, #16
 8000d8e:	6101      	str	r1, [r0, #16]
 8000d90:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000d92:	6101      	str	r1, [r0, #16]
 8000d94:	4770      	bx	lr

08000d96 <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000d96:	2800      	cmp	r0, #0
 8000d98:	d066      	beq.n	8000e68 <HAL_PCD_Init+0xd2>
{
 8000d9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d9c:	b087      	sub	sp, #28
 8000d9e:	4604      	mov	r4, r0
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8000da0:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 8000da4:	b1c3      	cbz	r3, 8000dd8 <HAL_PCD_Init+0x42>

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000da6:	2303      	movs	r3, #3
 8000da8:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000dac:	6820      	ldr	r0, [r4, #0]
 8000dae:	f001 fb6a 	bl	8002486 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000db2:	4625      	mov	r5, r4
 8000db4:	f855 7b10 	ldr.w	r7, [r5], #16
 8000db8:	466e      	mov	r6, sp
 8000dba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dbc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000dbe:	682b      	ldr	r3, [r5, #0]
 8000dc0:	6033      	str	r3, [r6, #0]
 8000dc2:	1d23      	adds	r3, r4, #4
 8000dc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dc6:	4638      	mov	r0, r7
 8000dc8:	f001 fb4d 	bl	8002466 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000dcc:	2100      	movs	r1, #0
 8000dce:	6820      	ldr	r0, [r4, #0]
 8000dd0:	f001 fb63 	bl	800249a <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	e015      	b.n	8000e04 <HAL_PCD_Init+0x6e>
    hpcd->Lock = HAL_UNLOCKED;
 8000dd8:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
    HAL_PCD_MspInit(hpcd);
 8000ddc:	f003 fe06 	bl	80049ec <HAL_PCD_MspInit>
 8000de0:	e7e1      	b.n	8000da6 <HAL_PCD_Init+0x10>
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 8000de2:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8000de6:	2101      	movs	r1, #1
 8000de8:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
    hpcd->IN_ep[index].num = index;
 8000dec:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000df0:	8693      	strh	r3, [r2, #52]	; 0x34
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000df2:	2100      	movs	r1, #0
 8000df4:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0U;
 8000df8:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0U;
 8000dfa:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0U;
 8000dfc:	1c9a      	adds	r2, r3, #2
 8000dfe:	0152      	lsls	r2, r2, #5
 8000e00:	50a1      	str	r1, [r4, r2]
  for (index = 0U; index < 15U ; index++)
 8000e02:	3301      	adds	r3, #1
 8000e04:	2b0e      	cmp	r3, #14
 8000e06:	d9ec      	bls.n	8000de2 <HAL_PCD_Init+0x4c>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	e012      	b.n	8000e32 <HAL_PCD_Init+0x9c>
  }
 
  for (index = 0U; index < 15U ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8000e0c:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8000e10:	2100      	movs	r1, #0
 8000e12:	f882 1229 	strb.w	r1, [r2, #553]	; 0x229
    hpcd->OUT_ep[index].num = index;
 8000e16:	f882 3228 	strb.w	r3, [r2, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000e1a:	8693      	strh	r3, [r2, #52]	; 0x34
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8000e1c:	f882 122b 	strb.w	r1, [r2, #555]	; 0x22b
    hpcd->OUT_ep[index].maxpacket = 0U;
 8000e20:	f8c2 1238 	str.w	r1, [r2, #568]	; 0x238
    hpcd->OUT_ep[index].xfer_buff = 0U;
 8000e24:	f8c2 123c 	str.w	r1, [r2, #572]	; 0x23c
    hpcd->OUT_ep[index].xfer_len = 0U;
 8000e28:	f103 0212 	add.w	r2, r3, #18
 8000e2c:	0152      	lsls	r2, r2, #5
 8000e2e:	50a1      	str	r1, [r4, r2]
  for (index = 0U; index < 15U ; index++)
 8000e30:	3301      	adds	r3, #1
 8000e32:	2b0e      	cmp	r3, #14
 8000e34:	d9ea      	bls.n	8000e0c <HAL_PCD_Init+0x76>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8000e36:	4625      	mov	r5, r4
 8000e38:	f855 7b10 	ldr.w	r7, [r5], #16
 8000e3c:	466e      	mov	r6, sp
 8000e3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e40:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000e42:	682b      	ldr	r3, [r5, #0]
 8000e44:	6033      	str	r3, [r6, #0]
 8000e46:	1d23      	adds	r3, r4, #4
 8000e48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e4a:	4638      	mov	r0, r7
 8000e4c:	f001 fb27 	bl	800249e <USB_DevInit>
  
  hpcd->USB_Address = 0U;
 8000e50:	2500      	movs	r5, #0
 8000e52:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 8000e56:	2301      	movs	r3, #1
 8000e58:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  
  USB_DevDisconnect (hpcd->Instance);  
 8000e5c:	6820      	ldr	r0, [r4, #0]
 8000e5e:	f001 fe37 	bl	8002ad0 <USB_DevDisconnect>
  return HAL_OK;
 8000e62:	4628      	mov	r0, r5
}
 8000e64:	b007      	add	sp, #28
 8000e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000e68:	2001      	movs	r0, #1
 8000e6a:	4770      	bx	lr

08000e6c <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8000e6c:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d101      	bne.n	8000e78 <HAL_PCD_Start+0xc>
 8000e74:	2002      	movs	r0, #2
 8000e76:	4770      	bx	lr
{
 8000e78:	b510      	push	{r4, lr}
 8000e7a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8000e82:	f003 fee2 	bl	8004c4a <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8000e86:	6820      	ldr	r0, [r4, #0]
 8000e88:	f001 fe20 	bl	8002acc <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000e8c:	6820      	ldr	r0, [r4, #0]
 8000e8e:	f001 faf1 	bl	8002474 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000e92:	2000      	movs	r0, #0
 8000e94:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000e98:	bd10      	pop	{r4, pc}

08000e9a <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8000e9a:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d101      	bne.n	8000ea6 <HAL_PCD_SetAddress+0xc>
 8000ea2:	2002      	movs	r0, #2
 8000ea4:	4770      	bx	lr
{
 8000ea6:	b510      	push	{r4, lr}
 8000ea8:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000eaa:	2301      	movs	r3, #1
 8000eac:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 8000eb0:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 8000eb4:	6800      	ldr	r0, [r0, #0]
 8000eb6:	f001 fe03 	bl	8002ac0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000ec0:	bd10      	pop	{r4, pc}

08000ec2 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000ec2:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000ec4:	b24d      	sxtb	r5, r1
 8000ec6:	2d00      	cmp	r5, #0
 8000ec8:	db12      	blt.n	8000ef0 <HAL_PCD_EP_Open+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000eca:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8000ece:	0164      	lsls	r4, r4, #5
 8000ed0:	f504 740a 	add.w	r4, r4, #552	; 0x228
 8000ed4:	4404      	add	r4, r0
  }
  ep->num   = ep_addr & 0x7FU;
 8000ed6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000eda:	7021      	strb	r1, [r4, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000edc:	0fed      	lsrs	r5, r5, #31
 8000ede:	7065      	strb	r5, [r4, #1]
  ep->maxpacket = ep_mps;
 8000ee0:	6122      	str	r2, [r4, #16]
  ep->type = ep_type;
 8000ee2:	70e3      	strb	r3, [r4, #3]
    
  __HAL_LOCK(hpcd);
 8000ee4:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d107      	bne.n	8000efc <HAL_PCD_EP_Open+0x3a>
 8000eec:	2002      	movs	r0, #2
  USB_ActivateEndpoint(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd);
  return ret;
}
 8000eee:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000ef0:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8000ef4:	0164      	lsls	r4, r4, #5
 8000ef6:	3428      	adds	r4, #40	; 0x28
 8000ef8:	4404      	add	r4, r0
 8000efa:	e7ec      	b.n	8000ed6 <HAL_PCD_EP_Open+0x14>
 8000efc:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd);
 8000efe:	2301      	movs	r3, #1
 8000f00:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000f04:	4621      	mov	r1, r4
 8000f06:	6800      	ldr	r0, [r0, #0]
 8000f08:	f001 fadf 	bl	80024ca <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f885 0428 	strb.w	r0, [r5, #1064]	; 0x428
  return ret;
 8000f12:	bd38      	pop	{r3, r4, r5, pc}

08000f14 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000f14:	b24a      	sxtb	r2, r1
 8000f16:	2a00      	cmp	r2, #0
 8000f18:	db10      	blt.n	8000f3c <HAL_PCD_EP_Close+0x28>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000f1a:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8000f1e:	015b      	lsls	r3, r3, #5
 8000f20:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000f24:	4403      	add	r3, r0
  }
  ep->num   = ep_addr & 0x7FU;
 8000f26:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000f2a:	7019      	strb	r1, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000f2c:	0fd2      	lsrs	r2, r2, #31
 8000f2e:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8000f30:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
 8000f34:	2a01      	cmp	r2, #1
 8000f36:	d107      	bne.n	8000f48 <HAL_PCD_EP_Close+0x34>
 8000f38:	2002      	movs	r0, #2
 8000f3a:	4770      	bx	lr
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000f3c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8000f40:	015b      	lsls	r3, r3, #5
 8000f42:	3328      	adds	r3, #40	; 0x28
 8000f44:	4403      	add	r3, r0
 8000f46:	e7ee      	b.n	8000f26 <HAL_PCD_EP_Close+0x12>
{  
 8000f48:	b510      	push	{r4, lr}
 8000f4a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000f52:	4619      	mov	r1, r3
 8000f54:	6800      	ldr	r0, [r0, #0]
 8000f56:	f001 fc51 	bl	80027fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000f60:	bd10      	pop	{r4, pc}

08000f62 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000f62:	b570      	push	{r4, r5, r6, lr}
 8000f64:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000f68:	016c      	lsls	r4, r5, #5
 8000f6a:	f504 710a 	add.w	r1, r4, #552	; 0x228
 8000f6e:	4401      	add	r1, r0
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000f70:	4404      	add	r4, r0
 8000f72:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
  ep->xfer_len = len;
 8000f76:	f105 0212 	add.w	r2, r5, #18
 8000f7a:	0152      	lsls	r2, r2, #5
 8000f7c:	1886      	adds	r6, r0, r2
 8000f7e:	5083      	str	r3, [r0, r2]
  ep->xfer_count = 0U;
 8000f80:	2300      	movs	r3, #0
 8000f82:	6073      	str	r3, [r6, #4]
  ep->is_in = 0U;
 8000f84:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  ep->num = ep_addr & 0x7FU;
 8000f88:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228

  if ((ep_addr & 0x7FU) == 0U)
 8000f8c:	b125      	cbz	r5, 8000f98 <HAL_PCD_EP_Receive+0x36>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000f8e:	6800      	ldr	r0, [r0, #0]
 8000f90:	f001 fdbb 	bl	8002b0a <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000f94:	2000      	movs	r0, #0
 8000f96:	bd70      	pop	{r4, r5, r6, pc}
    USB_EP0StartXfer(hpcd->Instance , ep);
 8000f98:	6800      	ldr	r0, [r0, #0]
 8000f9a:	f001 fdb6 	bl	8002b0a <USB_EPStartXfer>
 8000f9e:	e7f9      	b.n	8000f94 <HAL_PCD_EP_Receive+0x32>

08000fa0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000fa0:	b570      	push	{r4, r5, r6, lr}
 8000fa2:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000fa6:	016c      	lsls	r4, r5, #5
 8000fa8:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8000fac:	4401      	add	r1, r0
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000fae:	4404      	add	r4, r0
 8000fb0:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_len = len;
 8000fb2:	1caa      	adds	r2, r5, #2
 8000fb4:	0152      	lsls	r2, r2, #5
 8000fb6:	1886      	adds	r6, r0, r2
 8000fb8:	5083      	str	r3, [r0, r2]
  ep->xfer_count = 0U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	6073      	str	r3, [r6, #4]
  ep->is_in = 1U;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  ep->num = ep_addr & 0x7FU;
 8000fc4:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28

  if ((ep_addr & 0x7FU) == 0U)
 8000fc8:	b125      	cbz	r5, 8000fd4 <HAL_PCD_EP_Transmit+0x34>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000fca:	6800      	ldr	r0, [r0, #0]
 8000fcc:	f001 fd9d 	bl	8002b0a <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	bd70      	pop	{r4, r5, r6, pc}
    USB_EP0StartXfer(hpcd->Instance , ep);
 8000fd4:	6800      	ldr	r0, [r0, #0]
 8000fd6:	f001 fd98 	bl	8002b0a <USB_EPStartXfer>
 8000fda:	e7f9      	b.n	8000fd0 <HAL_PCD_EP_Transmit+0x30>

08000fdc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8000fdc:	b570      	push	{r4, r5, r6, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	4605      	mov	r5, r0
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f8ad 3006 	strh.w	r3, [sp, #6]
  __IO uint16_t wEPVal = 0;
 8000fe8:	f8ad 3004 	strh.w	r3, [sp, #4]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8000fec:	e195      	b.n	800131a <PCD_EP_ISR_Handler+0x33e>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000fee:	8803      	ldrh	r3, [r0, #0]
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000ffe:	682a      	ldr	r2, [r5, #0]
 8001000:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001004:	b29b      	uxth	r3, r3
 8001006:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800100a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800100e:	3302      	adds	r3, #2
 8001010:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001014:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001018:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800101c:	646b      	str	r3, [r5, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800101e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001020:	4413      	add	r3, r2
 8001022:	63eb      	str	r3, [r5, #60]	; 0x3c
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001024:	2100      	movs	r1, #0
 8001026:	4628      	mov	r0, r5
 8001028:	f003 fd12 	bl	8004a50 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 800102c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8001030:	2b00      	cmp	r3, #0
 8001032:	f000 8172 	beq.w	800131a <PCD_EP_ISR_Handler+0x33e>
 8001036:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001038:	2b00      	cmp	r3, #0
 800103a:	f040 816e 	bne.w	800131a <PCD_EP_ISR_Handler+0x33e>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 800103e:	682a      	ldr	r2, [r5, #0]
 8001040:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8001044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001048:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800104c:	2300      	movs	r3, #0
 800104e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8001052:	e162      	b.n	800131a <PCD_EP_ISR_Handler+0x33e>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001054:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001058:	b29b      	uxth	r3, r3
 800105a:	f895 2228 	ldrb.w	r2, [r5, #552]	; 0x228
 800105e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001062:	3306      	adds	r3, #6
 8001064:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001068:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800106c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001070:	f8c5 3244 	str.w	r3, [r5, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8001074:	f8b5 222c 	ldrh.w	r2, [r5, #556]	; 0x22c
 8001078:	f205 412c 	addw	r1, r5, #1068	; 0x42c
 800107c:	f001 feab 	bl	8002dd6 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8001080:	682a      	ldr	r2, [r5, #0]
 8001082:	8813      	ldrh	r3, [r2, #0]
 8001084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001088:	051b      	lsls	r3, r3, #20
 800108a:	0d1b      	lsrs	r3, r3, #20
 800108c:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 800108e:	4628      	mov	r0, r5
 8001090:	f003 fccc 	bl	8004a2c <HAL_PCD_SetupStageCallback>
 8001094:	e141      	b.n	800131a <PCD_EP_ISR_Handler+0x33e>
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
          
          if (ep->xfer_count != 0U)
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001096:	f8b5 222c 	ldrh.w	r2, [r5, #556]	; 0x22c
 800109a:	f8d5 123c 	ldr.w	r1, [r5, #572]	; 0x23c
 800109e:	f001 fe9a 	bl	8002dd6 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 80010a2:	f8d5 2244 	ldr.w	r2, [r5, #580]	; 0x244
 80010a6:	f8d5 323c 	ldr.w	r3, [r5, #572]	; 0x23c
 80010aa:	4413      	add	r3, r2
 80010ac:	f8c5 323c 	str.w	r3, [r5, #572]	; 0x23c
 80010b0:	e172      	b.n	8001398 <PCD_EP_ISR_Handler+0x3bc>
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80010b2:	f3c1 024f 	ubfx	r2, r1, #1, #16
 80010b6:	f011 0f01 	tst.w	r1, #1
 80010ba:	d001      	beq.n	80010c0 <PCD_EP_ISR_Handler+0xe4>
 80010bc:	3201      	adds	r2, #1
 80010be:	b292      	uxth	r2, r2
 80010c0:	0292      	lsls	r2, r2, #10
 80010c2:	b292      	uxth	r2, r2
 80010c4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 80010c8:	e184      	b.n	80013d4 <PCD_EP_ISR_Handler+0x3f8>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80010ca:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	f8ad 3004 	strh.w	r3, [sp, #4]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80010d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80010d8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80010dc:	d136      	bne.n	800114c <PCD_EP_ISR_Handler+0x170>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80010de:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80010e2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80010e6:	f000 8118 	beq.w	800131a <PCD_EP_ISR_Handler+0x33e>
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80010ea:	682a      	ldr	r2, [r5, #0]
 80010ec:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80010f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8001100:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 8001104:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001108:	2b00      	cmp	r3, #0
 800110a:	f040 80b6 	bne.w	800127a <PCD_EP_ISR_Handler+0x29e>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800110e:	6828      	ldr	r0, [r5, #0]
 8001110:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001114:	b29b      	uxth	r3, r3
 8001116:	eb05 1244 	add.w	r2, r5, r4, lsl #5
 800111a:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800111e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001122:	3302      	adds	r3, #2
 8001124:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001128:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800112c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001130:	1ca2      	adds	r2, r4, #2
 8001132:	eb05 1242 	add.w	r2, r5, r2, lsl #5
 8001136:	6053      	str	r3, [r2, #4]
          if (ep->xfer_count != 0U)
 8001138:	2b00      	cmp	r3, #0
 800113a:	f000 80cd 	beq.w	80012d8 <PCD_EP_ISR_Handler+0x2fc>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800113e:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 8001142:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8001144:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8001146:	f001 fccb 	bl	8002ae0 <USB_WritePMA>
 800114a:	e0c5      	b.n	80012d8 <PCD_EP_ISR_Handler+0x2fc>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800114c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001154:	051b      	lsls	r3, r3, #20
 8001156:	0d1b      	lsrs	r3, r3, #20
 8001158:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->doublebuffer == 0U)
 800115c:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 8001160:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
 8001164:	b9db      	cbnz	r3, 800119e <PCD_EP_ISR_Handler+0x1c2>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001166:	6828      	ldr	r0, [r5, #0]
 8001168:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800116c:	b29b      	uxth	r3, r3
 800116e:	eb05 1244 	add.w	r2, r5, r4, lsl #5
 8001172:	f892 2228 	ldrb.w	r2, [r2, #552]	; 0x228
 8001176:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800117a:	3306      	adds	r3, #6
 800117c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001180:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 8001184:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 8001188:	b38e      	cbz	r6, 80011ee <PCD_EP_ISR_Handler+0x212>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800118a:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 800118e:	4633      	mov	r3, r6
 8001190:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 8001194:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8001198:	f001 fe1d 	bl	8002dd6 <USB_ReadPMA>
 800119c:	e027      	b.n	80011ee <PCD_EP_ISR_Handler+0x212>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 800119e:	6828      	ldr	r0, [r5, #0]
 80011a0:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 80011a4:	f893 2228 	ldrb.w	r2, [r3, #552]	; 0x228
 80011a8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80011ac:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80011b0:	d043      	beq.n	800123a <PCD_EP_ISR_Handler+0x25e>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80011b2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80011bc:	3302      	adds	r3, #2
 80011be:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80011c2:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 80011c6:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 80011ca:	bb66      	cbnz	r6, 8001226 <PCD_EP_ISR_Handler+0x24a>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 80011cc:	682a      	ldr	r2, [r5, #0]
 80011ce:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 80011d2:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 80011d6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80011da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80011de:	051b      	lsls	r3, r3, #20
 80011e0:	0d1b      	lsrs	r3, r3, #20
 80011e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80011ea:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        ep->xfer_count+=count;
 80011ee:	f104 0312 	add.w	r3, r4, #18
 80011f2:	015b      	lsls	r3, r3, #5
 80011f4:	18e9      	adds	r1, r5, r3
 80011f6:	684a      	ldr	r2, [r1, #4]
 80011f8:	4432      	add	r2, r6
 80011fa:	604a      	str	r2, [r1, #4]
        ep->xfer_buff+=count;
 80011fc:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 8001200:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
 8001204:	4432      	add	r2, r6
 8001206:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800120a:	58eb      	ldr	r3, [r5, r3]
 800120c:	b11b      	cbz	r3, 8001216 <PCD_EP_ISR_Handler+0x23a>
 800120e:	f8d1 1238 	ldr.w	r1, [r1, #568]	; 0x238
 8001212:	428e      	cmp	r6, r1
 8001214:	d229      	bcs.n	800126a <PCD_EP_ISR_Handler+0x28e>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001216:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 800121a:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 800121e:	4628      	mov	r0, r5
 8001220:	f003 fc0c 	bl	8004a3c <HAL_PCD_DataOutStageCallback>
 8001224:	e75b      	b.n	80010de <PCD_EP_ISR_Handler+0x102>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001226:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 800122a:	4633      	mov	r3, r6
 800122c:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
 8001230:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8001234:	f001 fdcf 	bl	8002dd6 <USB_ReadPMA>
 8001238:	e7c8      	b.n	80011cc <PCD_EP_ISR_Handler+0x1f0>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800123a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800123e:	b29b      	uxth	r3, r3
 8001240:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001244:	3306      	adds	r3, #6
 8001246:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800124a:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 800124e:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8001252:	2e00      	cmp	r6, #0
 8001254:	d0ba      	beq.n	80011cc <PCD_EP_ISR_Handler+0x1f0>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001256:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 800125a:	4633      	mov	r3, r6
 800125c:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8001260:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8001264:	f001 fdb7 	bl	8002dd6 <USB_ReadPMA>
 8001268:	e7b0      	b.n	80011cc <PCD_EP_ISR_Handler+0x1f0>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800126a:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 800126e:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8001272:	4628      	mov	r0, r5
 8001274:	f7ff fe75 	bl	8000f62 <HAL_PCD_EP_Receive>
 8001278:	e731      	b.n	80010de <PCD_EP_ISR_Handler+0x102>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 800127a:	6828      	ldr	r0, [r5, #0]
 800127c:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 8001280:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001284:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001288:	f013 0f40 	tst.w	r3, #64	; 0x40
 800128c:	f000 80b8 	beq.w	8001400 <PCD_EP_ISR_Handler+0x424>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001290:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001294:	b29b      	uxth	r3, r3
 8001296:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800129a:	3302      	adds	r3, #2
 800129c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80012a0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80012a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012a8:	1ca2      	adds	r2, r4, #2
 80012aa:	eb05 1242 	add.w	r2, r5, r2, lsl #5
 80012ae:	6053      	str	r3, [r2, #4]
            if (ep->xfer_count != 0U)
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f040 809e 	bne.w	80013f2 <PCD_EP_ISR_Handler+0x416>
            if (ep->xfer_count != 0U)
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 80012b6:	682a      	ldr	r2, [r5, #0]
 80012b8:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 80012bc:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 80012c0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80012c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012c8:	051b      	lsls	r3, r3, #20
 80012ca:	0d1b      	lsrs	r3, r3, #20
 80012cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d4:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80012d8:	682a      	ldr	r2, [r5, #0]
 80012da:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80012de:	b29b      	uxth	r3, r3
 80012e0:	eb05 1044 	add.w	r0, r5, r4, lsl #5
 80012e4:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 80012e8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80012ec:	3302      	adds	r3, #2
 80012ee:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80012f2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80012f6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80012fa:	1ca3      	adds	r3, r4, #2
 80012fc:	015b      	lsls	r3, r3, #5
 80012fe:	18e9      	adds	r1, r5, r3
 8001300:	604a      	str	r2, [r1, #4]
        ep->xfer_buff+=ep->xfer_count;
 8001302:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001304:	440a      	add	r2, r1
 8001306:	63c2      	str	r2, [r0, #60]	; 0x3c
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001308:	58eb      	ldr	r3, [r5, r3]
 800130a:	2b00      	cmp	r3, #0
 800130c:	f040 8092 	bne.w	8001434 <PCD_EP_ISR_Handler+0x458>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001310:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 8001314:	4628      	mov	r0, r5
 8001316:	f003 fb9b 	bl	8004a50 <HAL_PCD_DataInStageCallback>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 800131a:	6828      	ldr	r0, [r5, #0]
 800131c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001320:	b29b      	uxth	r3, r3
 8001322:	f8ad 3006 	strh.w	r3, [sp, #6]
 8001326:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800132a:	f000 808b 	beq.w	8001444 <PCD_EP_ISR_Handler+0x468>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800132e:	f8bd 4006 	ldrh.w	r4, [sp, #6]
    if (epindex == 0)
 8001332:	f014 040f 	ands.w	r4, r4, #15
 8001336:	f47f aec8 	bne.w	80010ca <PCD_EP_ISR_Handler+0xee>
      if ((wIstr & USB_ISTR_DIR) == 0)
 800133a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800133e:	f013 0f10 	tst.w	r3, #16
 8001342:	f43f ae54 	beq.w	8000fee <PCD_EP_ISR_Handler+0x12>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001346:	8803      	ldrh	r3, [r0, #0]
 8001348:	b29b      	uxth	r3, r3
 800134a:	f8ad 3004 	strh.w	r3, [sp, #4]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800134e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001352:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001356:	f47f ae7d 	bne.w	8001054 <PCD_EP_ISR_Handler+0x78>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800135a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800135e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001362:	d0da      	beq.n	800131a <PCD_EP_ISR_Handler+0x33e>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001364:	8803      	ldrh	r3, [r0, #0]
 8001366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800136a:	051b      	lsls	r3, r3, #20
 800136c:	0d1b      	lsrs	r3, r3, #20
 800136e:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001370:	6828      	ldr	r0, [r5, #0]
 8001372:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001376:	b29b      	uxth	r3, r3
 8001378:	f895 2228 	ldrb.w	r2, [r5, #552]	; 0x228
 800137c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001380:	3306      	adds	r3, #6
 8001382:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001386:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800138a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800138e:	f8c5 3244 	str.w	r3, [r5, #580]	; 0x244
          if (ep->xfer_count != 0U)
 8001392:	2b00      	cmp	r3, #0
 8001394:	f47f ae7f 	bne.w	8001096 <PCD_EP_ISR_Handler+0xba>
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001398:	2100      	movs	r1, #0
 800139a:	4628      	mov	r0, r5
 800139c:	f003 fb4e 	bl	8004a3c <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80013a0:	682a      	ldr	r2, [r5, #0]
 80013a2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	3306      	adds	r3, #6
 80013aa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80013ae:	f8d5 1238 	ldr.w	r1, [r5, #568]	; 0x238
 80013b2:	293e      	cmp	r1, #62	; 0x3e
 80013b4:	f67f ae7d 	bls.w	80010b2 <PCD_EP_ISR_Handler+0xd6>
 80013b8:	f3c1 124f 	ubfx	r2, r1, #5, #16
 80013bc:	f011 0f1f 	tst.w	r1, #31
 80013c0:	d101      	bne.n	80013c6 <PCD_EP_ISR_Handler+0x3ea>
 80013c2:	3a01      	subs	r2, #1
 80013c4:	b292      	uxth	r2, r2
 80013c6:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80013ca:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80013ce:	b292      	uxth	r2, r2
 80013d0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80013d4:	682a      	ldr	r2, [r5, #0]
 80013d6:	8813      	ldrh	r3, [r2, #0]
 80013d8:	b29b      	uxth	r3, r3
 80013da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013e2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80013e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013ee:	8013      	strh	r3, [r2, #0]
 80013f0:	e793      	b.n	800131a <PCD_EP_ISR_Handler+0x33e>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 80013f2:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 80013f6:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 80013f8:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80013fa:	f001 fb71 	bl	8002ae0 <USB_WritePMA>
 80013fe:	e75a      	b.n	80012b6 <PCD_EP_ISR_Handler+0x2da>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001400:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001404:	b29b      	uxth	r3, r3
 8001406:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800140a:	3306      	adds	r3, #6
 800140c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001410:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001414:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001418:	1ca2      	adds	r2, r4, #2
 800141a:	eb05 1242 	add.w	r2, r5, r2, lsl #5
 800141e:	6053      	str	r3, [r2, #4]
            if (ep->xfer_count != 0U)
 8001420:	2b00      	cmp	r3, #0
 8001422:	f43f af48 	beq.w	80012b6 <PCD_EP_ISR_Handler+0x2da>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8001426:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 800142a:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 800142c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800142e:	f001 fb57 	bl	8002ae0 <USB_WritePMA>
 8001432:	e740      	b.n	80012b6 <PCD_EP_ISR_Handler+0x2da>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001434:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8001438:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800143c:	4628      	mov	r0, r5
 800143e:	f7ff fdaf 	bl	8000fa0 <HAL_PCD_EP_Transmit>
 8001442:	e76a      	b.n	800131a <PCD_EP_ISR_Handler+0x33e>
        }
      } 
    }
  }
  return HAL_OK;
}
 8001444:	2000      	movs	r0, #0
 8001446:	b002      	add	sp, #8
 8001448:	bd70      	pop	{r4, r5, r6, pc}

0800144a <HAL_PCD_IRQHandler>:
{ 
 800144a:	b510      	push	{r4, lr}
 800144c:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 800144e:	6800      	ldr	r0, [r0, #0]
 8001450:	f001 fb40 	bl	8002ad4 <USB_ReadInterrupts>
 8001454:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8001458:	d145      	bne.n	80014e6 <HAL_PCD_IRQHandler+0x9c>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 800145a:	6820      	ldr	r0, [r4, #0]
 800145c:	f001 fb3a 	bl	8002ad4 <USB_ReadInterrupts>
 8001460:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8001464:	d143      	bne.n	80014ee <HAL_PCD_IRQHandler+0xa4>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8001466:	6820      	ldr	r0, [r4, #0]
 8001468:	f001 fb34 	bl	8002ad4 <USB_ReadInterrupts>
 800146c:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8001470:	d008      	beq.n	8001484 <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8001472:	6822      	ldr	r2, [r4, #0]
 8001474:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001478:	b29b      	uxth	r3, r3
 800147a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800147e:	b29b      	uxth	r3, r3
 8001480:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8001484:	6820      	ldr	r0, [r4, #0]
 8001486:	f001 fb25 	bl	8002ad4 <USB_ReadInterrupts>
 800148a:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 800148e:	d008      	beq.n	80014a2 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8001490:	6822      	ldr	r2, [r4, #0]
 8001492:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001496:	b29b      	uxth	r3, r3
 8001498:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800149c:	b29b      	uxth	r3, r3
 800149e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 80014a2:	6820      	ldr	r0, [r4, #0]
 80014a4:	f001 fb16 	bl	8002ad4 <USB_ReadInterrupts>
 80014a8:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80014ac:	d130      	bne.n	8001510 <HAL_PCD_IRQHandler+0xc6>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 80014ae:	6820      	ldr	r0, [r4, #0]
 80014b0:	f001 fb10 	bl	8002ad4 <USB_ReadInterrupts>
 80014b4:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80014b8:	d149      	bne.n	800154e <HAL_PCD_IRQHandler+0x104>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 80014ba:	6820      	ldr	r0, [r4, #0]
 80014bc:	f001 fb0a 	bl	8002ad4 <USB_ReadInterrupts>
 80014c0:	f410 7f00 	tst.w	r0, #512	; 0x200
 80014c4:	d166      	bne.n	8001594 <HAL_PCD_IRQHandler+0x14a>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 80014c6:	6820      	ldr	r0, [r4, #0]
 80014c8:	f001 fb04 	bl	8002ad4 <USB_ReadInterrupts>
 80014cc:	f410 7f80 	tst.w	r0, #256	; 0x100
 80014d0:	d008      	beq.n	80014e4 <HAL_PCD_IRQHandler+0x9a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 80014d2:	6822      	ldr	r2, [r4, #0]
 80014d4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80014d8:	b29b      	uxth	r3, r3
 80014da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014de:	b29b      	uxth	r3, r3
 80014e0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 80014e4:	bd10      	pop	{r4, pc}
    PCD_EP_ISR_Handler(hpcd);
 80014e6:	4620      	mov	r0, r4
 80014e8:	f7ff fd78 	bl	8000fdc <PCD_EP_ISR_Handler>
 80014ec:	e7b5      	b.n	800145a <HAL_PCD_IRQHandler+0x10>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80014ee:	6822      	ldr	r2, [r4, #0]
 80014f0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001500:	4620      	mov	r0, r4
 8001502:	f003 fab4 	bl	8004a6e <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8001506:	2100      	movs	r1, #0
 8001508:	4620      	mov	r0, r4
 800150a:	f7ff fcc6 	bl	8000e9a <HAL_PCD_SetAddress>
 800150e:	e7aa      	b.n	8001466 <HAL_PCD_IRQHandler+0x1c>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8001510:	6822      	ldr	r2, [r4, #0]
 8001512:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001516:	b29b      	uxth	r3, r3
 8001518:	f023 0304 	bic.w	r3, r3, #4
 800151c:	b29b      	uxth	r3, r3
 800151e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8001522:	6822      	ldr	r2, [r4, #0]
 8001524:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001528:	b29b      	uxth	r3, r3
 800152a:	f023 0308 	bic.w	r3, r3, #8
 800152e:	b29b      	uxth	r3, r3
 8001530:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8001534:	4620      	mov	r0, r4
 8001536:	f003 fab7 	bl	8004aa8 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 800153a:	6822      	ldr	r2, [r4, #0]
 800153c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001540:	b29b      	uxth	r3, r3
 8001542:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001546:	b29b      	uxth	r3, r3
 8001548:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 800154c:	e7af      	b.n	80014ae <HAL_PCD_IRQHandler+0x64>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800154e:	6822      	ldr	r2, [r4, #0]
 8001550:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001554:	b29b      	uxth	r3, r3
 8001556:	f043 0308 	orr.w	r3, r3, #8
 800155a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 800155e:	6822      	ldr	r2, [r4, #0]
 8001560:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001564:	b29b      	uxth	r3, r3
 8001566:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800156a:	b29b      	uxth	r3, r3
 800156c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001570:	6822      	ldr	r2, [r4, #0]
 8001572:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001576:	b29b      	uxth	r3, r3
 8001578:	f043 0304 	orr.w	r3, r3, #4
 800157c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8001580:	6820      	ldr	r0, [r4, #0]
 8001582:	f001 faa7 	bl	8002ad4 <USB_ReadInterrupts>
 8001586:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 800158a:	d196      	bne.n	80014ba <HAL_PCD_IRQHandler+0x70>
      HAL_PCD_SuspendCallback(hpcd);
 800158c:	4620      	mov	r0, r4
 800158e:	f003 fa7b 	bl	8004a88 <HAL_PCD_SuspendCallback>
 8001592:	e792      	b.n	80014ba <HAL_PCD_IRQHandler+0x70>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8001594:	6822      	ldr	r2, [r4, #0]
 8001596:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800159a:	b29b      	uxth	r3, r3
 800159c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80015a6:	4620      	mov	r0, r4
 80015a8:	f003 fa5b 	bl	8004a62 <HAL_PCD_SOFCallback>
 80015ac:	e78b      	b.n	80014c6 <HAL_PCD_IRQHandler+0x7c>

080015ae <HAL_PCD_EP_SetStall>:
{
 80015ae:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 80015b0:	b24a      	sxtb	r2, r1
 80015b2:	2a00      	cmp	r2, #0
 80015b4:	db10      	blt.n	80015d8 <HAL_PCD_EP_SetStall+0x2a>
    ep = &hpcd->OUT_ep[ep_addr];
 80015b6:	014b      	lsls	r3, r1, #5
 80015b8:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80015bc:	4403      	add	r3, r0
  ep->is_stall = 1U;
 80015be:	2401      	movs	r4, #1
 80015c0:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 80015c2:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 80015c6:	701c      	strb	r4, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80015c8:	0fd2      	lsrs	r2, r2, #31
 80015ca:	705a      	strb	r2, [r3, #1]
  __HAL_LOCK(hpcd);
 80015cc:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
 80015d0:	2a01      	cmp	r2, #1
 80015d2:	d107      	bne.n	80015e4 <HAL_PCD_EP_SetStall+0x36>
 80015d4:	2002      	movs	r0, #2
}
 80015d6:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80015d8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80015dc:	015b      	lsls	r3, r3, #5
 80015de:	3328      	adds	r3, #40	; 0x28
 80015e0:	4403      	add	r3, r0
 80015e2:	e7ec      	b.n	80015be <HAL_PCD_EP_SetStall+0x10>
 80015e4:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd);
 80015e6:	2201      	movs	r2, #1
 80015e8:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 80015ec:	4619      	mov	r1, r3
 80015ee:	6800      	ldr	r0, [r0, #0]
 80015f0:	f001 f9e6 	bl	80029c0 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 80015f4:	b11c      	cbz	r4, 80015fe <HAL_PCD_EP_SetStall+0x50>
  __HAL_UNLOCK(hpcd); 
 80015f6:	2000      	movs	r0, #0
 80015f8:	f885 0428 	strb.w	r0, [r5, #1064]	; 0x428
  return HAL_OK;
 80015fc:	bd38      	pop	{r3, r4, r5, pc}
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80015fe:	f205 412c 	addw	r1, r5, #1068	; 0x42c
 8001602:	6828      	ldr	r0, [r5, #0]
 8001604:	f001 fa6a 	bl	8002adc <USB_EP0_OutStart>
 8001608:	e7f5      	b.n	80015f6 <HAL_PCD_EP_SetStall+0x48>

0800160a <HAL_PCD_EP_ClrStall>:
{
 800160a:	b510      	push	{r4, lr}
  if ((0x80U & ep_addr) == 0x80U)
 800160c:	b24a      	sxtb	r2, r1
 800160e:	2a00      	cmp	r2, #0
 8001610:	db10      	blt.n	8001634 <HAL_PCD_EP_ClrStall+0x2a>
    ep = &hpcd->OUT_ep[ep_addr];
 8001612:	014b      	lsls	r3, r1, #5
 8001614:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001618:	4403      	add	r3, r0
  ep->is_stall = 0U;
 800161a:	2400      	movs	r4, #0
 800161c:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 800161e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001622:	7019      	strb	r1, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001624:	0fd2      	lsrs	r2, r2, #31
 8001626:	705a      	strb	r2, [r3, #1]
  __HAL_LOCK(hpcd); 
 8001628:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
 800162c:	2a01      	cmp	r2, #1
 800162e:	d107      	bne.n	8001640 <HAL_PCD_EP_ClrStall+0x36>
 8001630:	2002      	movs	r0, #2
}
 8001632:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001634:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8001638:	015b      	lsls	r3, r3, #5
 800163a:	3328      	adds	r3, #40	; 0x28
 800163c:	4403      	add	r3, r0
 800163e:	e7ec      	b.n	800161a <HAL_PCD_EP_ClrStall+0x10>
 8001640:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8001642:	2201      	movs	r2, #1
 8001644:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8001648:	4619      	mov	r1, r3
 800164a:	6800      	ldr	r0, [r0, #0]
 800164c:	f001 f9ef 	bl	8002a2e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001650:	2000      	movs	r0, #0
 8001652:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8001656:	bd10      	pop	{r4, pc}

08001658 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8001658:	f011 0f80 	tst.w	r1, #128	; 0x80
 800165c:	d00c      	beq.n	8001678 <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800165e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001662:	0149      	lsls	r1, r1, #5
 8001664:	3128      	adds	r1, #40	; 0x28
 8001666:	4401      	add	r1, r0
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001668:	b15a      	cbz	r2, 8001682 <HAL_PCDEx_PMAConfig+0x2a>
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 800166a:	2201      	movs	r2, #1
 800166c:	728a      	strb	r2, [r1, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 800166e:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8001670:	0c1b      	lsrs	r3, r3, #16
 8001672:	810b      	strh	r3, [r1, #8]
  }
  
  return HAL_OK; 
}
 8001674:	2000      	movs	r0, #0
 8001676:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8001678:	0149      	lsls	r1, r1, #5
 800167a:	f501 710a 	add.w	r1, r1, #552	; 0x228
 800167e:	4401      	add	r1, r0
 8001680:	e7f2      	b.n	8001668 <HAL_PCDEx_PMAConfig+0x10>
    ep->doublebuffer = 0U;
 8001682:	728a      	strb	r2, [r1, #10]
    ep->pmaadress = (uint16_t)pmaadress;
 8001684:	808b      	strh	r3, [r1, #4]
 8001686:	e7f5      	b.n	8001674 <HAL_PCDEx_PMAConfig+0x1c>

08001688 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001688:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <RCC_Delay+0x24>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a08      	ldr	r2, [pc, #32]	; (80016b0 <RCC_Delay+0x28>)
 8001690:	fba2 2303 	umull	r2, r3, r2, r3
 8001694:	0a5b      	lsrs	r3, r3, #9
 8001696:	fb00 f003 	mul.w	r0, r0, r3
 800169a:	9001      	str	r0, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800169c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800169e:	9b01      	ldr	r3, [sp, #4]
 80016a0:	1e5a      	subs	r2, r3, #1
 80016a2:	9201      	str	r2, [sp, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1f9      	bne.n	800169c <RCC_Delay+0x14>
}
 80016a8:	b002      	add	sp, #8
 80016aa:	4770      	bx	lr
 80016ac:	20000088 	.word	0x20000088
 80016b0:	10624dd3 	.word	0x10624dd3

080016b4 <HAL_RCC_OscConfig>:
{
 80016b4:	b570      	push	{r4, r5, r6, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ba:	6803      	ldr	r3, [r0, #0]
 80016bc:	f013 0f01 	tst.w	r3, #1
 80016c0:	d03d      	beq.n	800173e <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016c2:	4bac      	ldr	r3, [pc, #688]	; (8001974 <HAL_RCC_OscConfig+0x2c0>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 030c 	and.w	r3, r3, #12
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	d02e      	beq.n	800172c <HAL_RCC_OscConfig+0x78>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016ce:	4ba9      	ldr	r3, [pc, #676]	; (8001974 <HAL_RCC_OscConfig+0x2c0>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 030c 	and.w	r3, r3, #12
 80016d6:	2b08      	cmp	r3, #8
 80016d8:	d023      	beq.n	8001722 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016da:	6863      	ldr	r3, [r4, #4]
 80016dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e0:	d051      	beq.n	8001786 <HAL_RCC_OscConfig+0xd2>
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d155      	bne.n	8001792 <HAL_RCC_OscConfig+0xde>
 80016e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016ea:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016fc:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016fe:	6863      	ldr	r3, [r4, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d060      	beq.n	80017c6 <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 8001704:	f7fe fd66 	bl	80001d4 <HAL_GetTick>
 8001708:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170a:	4b9a      	ldr	r3, [pc, #616]	; (8001974 <HAL_RCC_OscConfig+0x2c0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001712:	d114      	bne.n	800173e <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001714:	f7fe fd5e 	bl	80001d4 <HAL_GetTick>
 8001718:	1b40      	subs	r0, r0, r5
 800171a:	2864      	cmp	r0, #100	; 0x64
 800171c:	d9f5      	bls.n	800170a <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 800171e:	2003      	movs	r0, #3
 8001720:	e1af      	b.n	8001a82 <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001722:	4b94      	ldr	r3, [pc, #592]	; (8001974 <HAL_RCC_OscConfig+0x2c0>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800172a:	d0d6      	beq.n	80016da <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800172c:	4b91      	ldr	r3, [pc, #580]	; (8001974 <HAL_RCC_OscConfig+0x2c0>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001734:	d003      	beq.n	800173e <HAL_RCC_OscConfig+0x8a>
 8001736:	6863      	ldr	r3, [r4, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 819f 	beq.w	8001a7c <HAL_RCC_OscConfig+0x3c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800173e:	6823      	ldr	r3, [r4, #0]
 8001740:	f013 0f02 	tst.w	r3, #2
 8001744:	d065      	beq.n	8001812 <HAL_RCC_OscConfig+0x15e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001746:	4b8b      	ldr	r3, [pc, #556]	; (8001974 <HAL_RCC_OscConfig+0x2c0>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f013 0f0c 	tst.w	r3, #12
 800174e:	d04e      	beq.n	80017ee <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001750:	4b88      	ldr	r3, [pc, #544]	; (8001974 <HAL_RCC_OscConfig+0x2c0>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 030c 	and.w	r3, r3, #12
 8001758:	2b08      	cmp	r3, #8
 800175a:	d043      	beq.n	80017e4 <HAL_RCC_OscConfig+0x130>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800175c:	6923      	ldr	r3, [r4, #16]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d079      	beq.n	8001856 <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_ENABLE();
 8001762:	2201      	movs	r2, #1
 8001764:	4b84      	ldr	r3, [pc, #528]	; (8001978 <HAL_RCC_OscConfig+0x2c4>)
 8001766:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001768:	f7fe fd34 	bl	80001d4 <HAL_GetTick>
 800176c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176e:	4b81      	ldr	r3, [pc, #516]	; (8001974 <HAL_RCC_OscConfig+0x2c0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f013 0f02 	tst.w	r3, #2
 8001776:	d165      	bne.n	8001844 <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001778:	f7fe fd2c 	bl	80001d4 <HAL_GetTick>
 800177c:	1b40      	subs	r0, r0, r5
 800177e:	2802      	cmp	r0, #2
 8001780:	d9f5      	bls.n	800176e <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 8001782:	2003      	movs	r0, #3
 8001784:	e17d      	b.n	8001a82 <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001786:	4a7b      	ldr	r2, [pc, #492]	; (8001974 <HAL_RCC_OscConfig+0x2c0>)
 8001788:	6813      	ldr	r3, [r2, #0]
 800178a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	e7b5      	b.n	80016fe <HAL_RCC_OscConfig+0x4a>
 8001792:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001796:	d009      	beq.n	80017ac <HAL_RCC_OscConfig+0xf8>
 8001798:	4b76      	ldr	r3, [pc, #472]	; (8001974 <HAL_RCC_OscConfig+0x2c0>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	e7a8      	b.n	80016fe <HAL_RCC_OscConfig+0x4a>
 80017ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80017b0:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	e79b      	b.n	80016fe <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 80017c6:	f7fe fd05 	bl	80001d4 <HAL_GetTick>
 80017ca:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017cc:	4b69      	ldr	r3, [pc, #420]	; (8001974 <HAL_RCC_OscConfig+0x2c0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80017d4:	d0b3      	beq.n	800173e <HAL_RCC_OscConfig+0x8a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017d6:	f7fe fcfd 	bl	80001d4 <HAL_GetTick>
 80017da:	1b40      	subs	r0, r0, r5
 80017dc:	2864      	cmp	r0, #100	; 0x64
 80017de:	d9f5      	bls.n	80017cc <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 80017e0:	2003      	movs	r0, #3
 80017e2:	e14e      	b.n	8001a82 <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017e4:	4b63      	ldr	r3, [pc, #396]	; (8001974 <HAL_RCC_OscConfig+0x2c0>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80017ec:	d1b6      	bne.n	800175c <HAL_RCC_OscConfig+0xa8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ee:	4b61      	ldr	r3, [pc, #388]	; (8001974 <HAL_RCC_OscConfig+0x2c0>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f013 0f02 	tst.w	r3, #2
 80017f6:	d004      	beq.n	8001802 <HAL_RCC_OscConfig+0x14e>
 80017f8:	6923      	ldr	r3, [r4, #16]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d001      	beq.n	8001802 <HAL_RCC_OscConfig+0x14e>
        return HAL_ERROR;
 80017fe:	2001      	movs	r0, #1
 8001800:	e13f      	b.n	8001a82 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001802:	4a5c      	ldr	r2, [pc, #368]	; (8001974 <HAL_RCC_OscConfig+0x2c0>)
 8001804:	6813      	ldr	r3, [r2, #0]
 8001806:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800180a:	6961      	ldr	r1, [r4, #20]
 800180c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001810:	6013      	str	r3, [r2, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001812:	6823      	ldr	r3, [r4, #0]
 8001814:	f013 0f08 	tst.w	r3, #8
 8001818:	d032      	beq.n	8001880 <HAL_RCC_OscConfig+0x1cc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800181a:	69a3      	ldr	r3, [r4, #24]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d06e      	beq.n	80018fe <HAL_RCC_OscConfig+0x24a>
      __HAL_RCC_LSI_ENABLE();
 8001820:	2201      	movs	r2, #1
 8001822:	4b56      	ldr	r3, [pc, #344]	; (800197c <HAL_RCC_OscConfig+0x2c8>)
 8001824:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001826:	f7fe fcd5 	bl	80001d4 <HAL_GetTick>
 800182a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800182c:	4b51      	ldr	r3, [pc, #324]	; (8001974 <HAL_RCC_OscConfig+0x2c0>)
 800182e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001830:	f013 0f02 	tst.w	r3, #2
 8001834:	d121      	bne.n	800187a <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001836:	f7fe fccd 	bl	80001d4 <HAL_GetTick>
 800183a:	1b40      	subs	r0, r0, r5
 800183c:	2802      	cmp	r0, #2
 800183e:	d9f5      	bls.n	800182c <HAL_RCC_OscConfig+0x178>
          return HAL_TIMEOUT;
 8001840:	2003      	movs	r0, #3
 8001842:	e11e      	b.n	8001a82 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001844:	4a4b      	ldr	r2, [pc, #300]	; (8001974 <HAL_RCC_OscConfig+0x2c0>)
 8001846:	6813      	ldr	r3, [r2, #0]
 8001848:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800184c:	6961      	ldr	r1, [r4, #20]
 800184e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	e7dd      	b.n	8001812 <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 8001856:	2200      	movs	r2, #0
 8001858:	4b47      	ldr	r3, [pc, #284]	; (8001978 <HAL_RCC_OscConfig+0x2c4>)
 800185a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800185c:	f7fe fcba 	bl	80001d4 <HAL_GetTick>
 8001860:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001862:	4b44      	ldr	r3, [pc, #272]	; (8001974 <HAL_RCC_OscConfig+0x2c0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f013 0f02 	tst.w	r3, #2
 800186a:	d0d2      	beq.n	8001812 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800186c:	f7fe fcb2 	bl	80001d4 <HAL_GetTick>
 8001870:	1b40      	subs	r0, r0, r5
 8001872:	2802      	cmp	r0, #2
 8001874:	d9f5      	bls.n	8001862 <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 8001876:	2003      	movs	r0, #3
 8001878:	e103      	b.n	8001a82 <HAL_RCC_OscConfig+0x3ce>
      RCC_Delay(1);
 800187a:	2001      	movs	r0, #1
 800187c:	f7ff ff04 	bl	8001688 <RCC_Delay>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001880:	6823      	ldr	r3, [r4, #0]
 8001882:	f013 0f04 	tst.w	r3, #4
 8001886:	f000 8099 	beq.w	80019bc <HAL_RCC_OscConfig+0x308>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800188a:	4b3a      	ldr	r3, [pc, #232]	; (8001974 <HAL_RCC_OscConfig+0x2c0>)
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001892:	d146      	bne.n	8001922 <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001894:	4b37      	ldr	r3, [pc, #220]	; (8001974 <HAL_RCC_OscConfig+0x2c0>)
 8001896:	69da      	ldr	r2, [r3, #28]
 8001898:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800189c:	61da      	str	r2, [r3, #28]
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a4:	9301      	str	r3, [sp, #4]
 80018a6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80018a8:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018aa:	4b35      	ldr	r3, [pc, #212]	; (8001980 <HAL_RCC_OscConfig+0x2cc>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f413 7f80 	tst.w	r3, #256	; 0x100
 80018b2:	d038      	beq.n	8001926 <HAL_RCC_OscConfig+0x272>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b4:	68e3      	ldr	r3, [r4, #12]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d049      	beq.n	800194e <HAL_RCC_OscConfig+0x29a>
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d14d      	bne.n	800195a <HAL_RCC_OscConfig+0x2a6>
 80018be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80018c2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80018c6:	6a1a      	ldr	r2, [r3, #32]
 80018c8:	f022 0201 	bic.w	r2, r2, #1
 80018cc:	621a      	str	r2, [r3, #32]
 80018ce:	6a1a      	ldr	r2, [r3, #32]
 80018d0:	f022 0204 	bic.w	r2, r2, #4
 80018d4:	621a      	str	r2, [r3, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018d6:	68e3      	ldr	r3, [r4, #12]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d05d      	beq.n	8001998 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 80018dc:	f7fe fc7a 	bl	80001d4 <HAL_GetTick>
 80018e0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e2:	4b24      	ldr	r3, [pc, #144]	; (8001974 <HAL_RCC_OscConfig+0x2c0>)
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	f013 0f02 	tst.w	r3, #2
 80018ea:	d166      	bne.n	80019ba <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ec:	f7fe fc72 	bl	80001d4 <HAL_GetTick>
 80018f0:	1b80      	subs	r0, r0, r6
 80018f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80018f6:	4298      	cmp	r0, r3
 80018f8:	d9f3      	bls.n	80018e2 <HAL_RCC_OscConfig+0x22e>
          return HAL_TIMEOUT;
 80018fa:	2003      	movs	r0, #3
 80018fc:	e0c1      	b.n	8001a82 <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_LSI_DISABLE();
 80018fe:	2200      	movs	r2, #0
 8001900:	4b1e      	ldr	r3, [pc, #120]	; (800197c <HAL_RCC_OscConfig+0x2c8>)
 8001902:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001904:	f7fe fc66 	bl	80001d4 <HAL_GetTick>
 8001908:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800190a:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <HAL_RCC_OscConfig+0x2c0>)
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190e:	f013 0f02 	tst.w	r3, #2
 8001912:	d0b5      	beq.n	8001880 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001914:	f7fe fc5e 	bl	80001d4 <HAL_GetTick>
 8001918:	1b40      	subs	r0, r0, r5
 800191a:	2802      	cmp	r0, #2
 800191c:	d9f5      	bls.n	800190a <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 800191e:	2003      	movs	r0, #3
 8001920:	e0af      	b.n	8001a82 <HAL_RCC_OscConfig+0x3ce>
    FlagStatus       pwrclkchanged = RESET;
 8001922:	2500      	movs	r5, #0
 8001924:	e7c1      	b.n	80018aa <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001926:	4a16      	ldr	r2, [pc, #88]	; (8001980 <HAL_RCC_OscConfig+0x2cc>)
 8001928:	6813      	ldr	r3, [r2, #0]
 800192a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800192e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001930:	f7fe fc50 	bl	80001d4 <HAL_GetTick>
 8001934:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001936:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_RCC_OscConfig+0x2cc>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800193e:	d1b9      	bne.n	80018b4 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001940:	f7fe fc48 	bl	80001d4 <HAL_GetTick>
 8001944:	1b80      	subs	r0, r0, r6
 8001946:	2864      	cmp	r0, #100	; 0x64
 8001948:	d9f5      	bls.n	8001936 <HAL_RCC_OscConfig+0x282>
          return HAL_TIMEOUT;
 800194a:	2003      	movs	r0, #3
 800194c:	e099      	b.n	8001a82 <HAL_RCC_OscConfig+0x3ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800194e:	4a09      	ldr	r2, [pc, #36]	; (8001974 <HAL_RCC_OscConfig+0x2c0>)
 8001950:	6a13      	ldr	r3, [r2, #32]
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	6213      	str	r3, [r2, #32]
 8001958:	e7bd      	b.n	80018d6 <HAL_RCC_OscConfig+0x222>
 800195a:	2b05      	cmp	r3, #5
 800195c:	d012      	beq.n	8001984 <HAL_RCC_OscConfig+0x2d0>
 800195e:	4b05      	ldr	r3, [pc, #20]	; (8001974 <HAL_RCC_OscConfig+0x2c0>)
 8001960:	6a1a      	ldr	r2, [r3, #32]
 8001962:	f022 0201 	bic.w	r2, r2, #1
 8001966:	621a      	str	r2, [r3, #32]
 8001968:	6a1a      	ldr	r2, [r3, #32]
 800196a:	f022 0204 	bic.w	r2, r2, #4
 800196e:	621a      	str	r2, [r3, #32]
 8001970:	e7b1      	b.n	80018d6 <HAL_RCC_OscConfig+0x222>
 8001972:	bf00      	nop
 8001974:	40021000 	.word	0x40021000
 8001978:	42420000 	.word	0x42420000
 800197c:	42420480 	.word	0x42420480
 8001980:	40007000 	.word	0x40007000
 8001984:	4b41      	ldr	r3, [pc, #260]	; (8001a8c <HAL_RCC_OscConfig+0x3d8>)
 8001986:	6a1a      	ldr	r2, [r3, #32]
 8001988:	f042 0204 	orr.w	r2, r2, #4
 800198c:	621a      	str	r2, [r3, #32]
 800198e:	6a1a      	ldr	r2, [r3, #32]
 8001990:	f042 0201 	orr.w	r2, r2, #1
 8001994:	621a      	str	r2, [r3, #32]
 8001996:	e79e      	b.n	80018d6 <HAL_RCC_OscConfig+0x222>
      tickstart = HAL_GetTick();
 8001998:	f7fe fc1c 	bl	80001d4 <HAL_GetTick>
 800199c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800199e:	4b3b      	ldr	r3, [pc, #236]	; (8001a8c <HAL_RCC_OscConfig+0x3d8>)
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	f013 0f02 	tst.w	r3, #2
 80019a6:	d008      	beq.n	80019ba <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a8:	f7fe fc14 	bl	80001d4 <HAL_GetTick>
 80019ac:	1b80      	subs	r0, r0, r6
 80019ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80019b2:	4298      	cmp	r0, r3
 80019b4:	d9f3      	bls.n	800199e <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 80019b6:	2003      	movs	r0, #3
 80019b8:	e063      	b.n	8001a82 <HAL_RCC_OscConfig+0x3ce>
    if(pwrclkchanged == SET)
 80019ba:	b9e5      	cbnz	r5, 80019f6 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019bc:	69e3      	ldr	r3, [r4, #28]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d05e      	beq.n	8001a80 <HAL_RCC_OscConfig+0x3cc>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019c2:	4a32      	ldr	r2, [pc, #200]	; (8001a8c <HAL_RCC_OscConfig+0x3d8>)
 80019c4:	6852      	ldr	r2, [r2, #4]
 80019c6:	f002 020c 	and.w	r2, r2, #12
 80019ca:	2a08      	cmp	r2, #8
 80019cc:	d05b      	beq.n	8001a86 <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d017      	beq.n	8001a02 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 80019d2:	2200      	movs	r2, #0
 80019d4:	4b2e      	ldr	r3, [pc, #184]	; (8001a90 <HAL_RCC_OscConfig+0x3dc>)
 80019d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019d8:	f7fe fbfc 	bl	80001d4 <HAL_GetTick>
 80019dc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019de:	4b2b      	ldr	r3, [pc, #172]	; (8001a8c <HAL_RCC_OscConfig+0x3d8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80019e6:	d047      	beq.n	8001a78 <HAL_RCC_OscConfig+0x3c4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e8:	f7fe fbf4 	bl	80001d4 <HAL_GetTick>
 80019ec:	1b00      	subs	r0, r0, r4
 80019ee:	2802      	cmp	r0, #2
 80019f0:	d9f5      	bls.n	80019de <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 80019f2:	2003      	movs	r0, #3
 80019f4:	e045      	b.n	8001a82 <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f6:	4a25      	ldr	r2, [pc, #148]	; (8001a8c <HAL_RCC_OscConfig+0x3d8>)
 80019f8:	69d3      	ldr	r3, [r2, #28]
 80019fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019fe:	61d3      	str	r3, [r2, #28]
 8001a00:	e7dc      	b.n	80019bc <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8001a02:	2200      	movs	r2, #0
 8001a04:	4b22      	ldr	r3, [pc, #136]	; (8001a90 <HAL_RCC_OscConfig+0x3dc>)
 8001a06:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a08:	f7fe fbe4 	bl	80001d4 <HAL_GetTick>
 8001a0c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a0e:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <HAL_RCC_OscConfig+0x3d8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001a16:	d006      	beq.n	8001a26 <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a18:	f7fe fbdc 	bl	80001d4 <HAL_GetTick>
 8001a1c:	1b40      	subs	r0, r0, r5
 8001a1e:	2802      	cmp	r0, #2
 8001a20:	d9f5      	bls.n	8001a0e <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8001a22:	2003      	movs	r0, #3
 8001a24:	e02d      	b.n	8001a82 <HAL_RCC_OscConfig+0x3ce>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a26:	6a23      	ldr	r3, [r4, #32]
 8001a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a2c:	d01a      	beq.n	8001a64 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a2e:	4917      	ldr	r1, [pc, #92]	; (8001a8c <HAL_RCC_OscConfig+0x3d8>)
 8001a30:	684b      	ldr	r3, [r1, #4]
 8001a32:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001a36:	6a22      	ldr	r2, [r4, #32]
 8001a38:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001a3a:	4302      	orrs	r2, r0
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001a40:	2201      	movs	r2, #1
 8001a42:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <HAL_RCC_OscConfig+0x3dc>)
 8001a44:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a46:	f7fe fbc5 	bl	80001d4 <HAL_GetTick>
 8001a4a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <HAL_RCC_OscConfig+0x3d8>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001a54:	d10e      	bne.n	8001a74 <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a56:	f7fe fbbd 	bl	80001d4 <HAL_GetTick>
 8001a5a:	1b00      	subs	r0, r0, r4
 8001a5c:	2802      	cmp	r0, #2
 8001a5e:	d9f5      	bls.n	8001a4c <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8001a60:	2003      	movs	r0, #3
 8001a62:	e00e      	b.n	8001a82 <HAL_RCC_OscConfig+0x3ce>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a64:	4a09      	ldr	r2, [pc, #36]	; (8001a8c <HAL_RCC_OscConfig+0x3d8>)
 8001a66:	6853      	ldr	r3, [r2, #4]
 8001a68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001a6c:	68a1      	ldr	r1, [r4, #8]
 8001a6e:	430b      	orrs	r3, r1
 8001a70:	6053      	str	r3, [r2, #4]
 8001a72:	e7dc      	b.n	8001a2e <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8001a74:	2000      	movs	r0, #0
 8001a76:	e004      	b.n	8001a82 <HAL_RCC_OscConfig+0x3ce>
 8001a78:	2000      	movs	r0, #0
 8001a7a:	e002      	b.n	8001a82 <HAL_RCC_OscConfig+0x3ce>
        return HAL_ERROR;
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	e000      	b.n	8001a82 <HAL_RCC_OscConfig+0x3ce>
  return HAL_OK;
 8001a80:	2000      	movs	r0, #0
}
 8001a82:	b002      	add	sp, #8
 8001a84:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001a86:	2001      	movs	r0, #1
 8001a88:	e7fb      	b.n	8001a82 <HAL_RCC_OscConfig+0x3ce>
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	42420060 	.word	0x42420060

08001a94 <HAL_RCC_GetSysClockFreq>:
{
 8001a94:	b510      	push	{r4, lr}
 8001a96:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a98:	4c15      	ldr	r4, [pc, #84]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001a9a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a9e:	f10d 0e18 	add.w	lr, sp, #24
 8001aa2:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001aa6:	8a23      	ldrh	r3, [r4, #16]
 8001aa8:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x60>)
 8001aae:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001ab0:	f003 020c 	and.w	r2, r3, #12
 8001ab4:	2a08      	cmp	r2, #8
 8001ab6:	d118      	bne.n	8001aea <HAL_RCC_GetSysClockFreq+0x56>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ab8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001abc:	4472      	add	r2, lr
 8001abe:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ac2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001ac6:	d103      	bne.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x3c>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ac8:	480b      	ldr	r0, [pc, #44]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x64>)
 8001aca:	fb00 f002 	mul.w	r0, r0, r2
 8001ace:	e00d      	b.n	8001aec <HAL_RCC_GetSysClockFreq+0x58>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ad0:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x60>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001ad8:	4473      	add	r3, lr
 8001ada:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ade:	4807      	ldr	r0, [pc, #28]	; (8001afc <HAL_RCC_GetSysClockFreq+0x68>)
 8001ae0:	fb00 f002 	mul.w	r0, r0, r2
 8001ae4:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ae8:	e000      	b.n	8001aec <HAL_RCC_GetSysClockFreq+0x58>
      sysclockfreq = HSE_VALUE;
 8001aea:	4804      	ldr	r0, [pc, #16]	; (8001afc <HAL_RCC_GetSysClockFreq+0x68>)
}
 8001aec:	b006      	add	sp, #24
 8001aee:	bd10      	pop	{r4, pc}
 8001af0:	08004dc8 	.word	0x08004dc8
 8001af4:	40021000 	.word	0x40021000
 8001af8:	003d0900 	.word	0x003d0900
 8001afc:	007a1200 	.word	0x007a1200

08001b00 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b00:	4b59      	ldr	r3, [pc, #356]	; (8001c68 <HAL_RCC_ClockConfig+0x168>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	428b      	cmp	r3, r1
 8001b0a:	d20c      	bcs.n	8001b26 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0c:	4a56      	ldr	r2, [pc, #344]	; (8001c68 <HAL_RCC_ClockConfig+0x168>)
 8001b0e:	6813      	ldr	r3, [r2, #0]
 8001b10:	f023 0307 	bic.w	r3, r3, #7
 8001b14:	430b      	orrs	r3, r1
 8001b16:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b18:	6813      	ldr	r3, [r2, #0]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	4299      	cmp	r1, r3
 8001b20:	d001      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8001b22:	2001      	movs	r0, #1
 8001b24:	4770      	bx	lr
{
 8001b26:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b28:	6803      	ldr	r3, [r0, #0]
 8001b2a:	f013 0f02 	tst.w	r3, #2
 8001b2e:	d006      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b30:	4a4e      	ldr	r2, [pc, #312]	; (8001c6c <HAL_RCC_ClockConfig+0x16c>)
 8001b32:	6853      	ldr	r3, [r2, #4]
 8001b34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b38:	6884      	ldr	r4, [r0, #8]
 8001b3a:	4323      	orrs	r3, r4
 8001b3c:	6053      	str	r3, [r2, #4]
 8001b3e:	460d      	mov	r5, r1
 8001b40:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b42:	6803      	ldr	r3, [r0, #0]
 8001b44:	f013 0f01 	tst.w	r3, #1
 8001b48:	d052      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b4a:	6843      	ldr	r3, [r0, #4]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d023      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x98>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d028      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b54:	4a45      	ldr	r2, [pc, #276]	; (8001c6c <HAL_RCC_ClockConfig+0x16c>)
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	f012 0f02 	tst.w	r2, #2
 8001b5c:	f000 8082 	beq.w	8001c64 <HAL_RCC_ClockConfig+0x164>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b60:	4942      	ldr	r1, [pc, #264]	; (8001c6c <HAL_RCC_ClockConfig+0x16c>)
 8001b62:	684a      	ldr	r2, [r1, #4]
 8001b64:	f022 0203 	bic.w	r2, r2, #3
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001b6c:	f7fe fb32 	bl	80001d4 <HAL_GetTick>
 8001b70:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b72:	6863      	ldr	r3, [r4, #4]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d01d      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0xb4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d02a      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b7c:	4b3b      	ldr	r3, [pc, #236]	; (8001c6c <HAL_RCC_ClockConfig+0x16c>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f013 0f0c 	tst.w	r3, #12
 8001b84:	d034      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b86:	f7fe fb25 	bl	80001d4 <HAL_GetTick>
 8001b8a:	1b80      	subs	r0, r0, r6
 8001b8c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b90:	4298      	cmp	r0, r3
 8001b92:	d9f3      	bls.n	8001b7c <HAL_RCC_ClockConfig+0x7c>
          return HAL_TIMEOUT;
 8001b94:	2003      	movs	r0, #3
 8001b96:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b98:	4a34      	ldr	r2, [pc, #208]	; (8001c6c <HAL_RCC_ClockConfig+0x16c>)
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001ba0:	d1de      	bne.n	8001b60 <HAL_RCC_ClockConfig+0x60>
        return HAL_ERROR;
 8001ba2:	2001      	movs	r0, #1
 8001ba4:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba6:	4a31      	ldr	r2, [pc, #196]	; (8001c6c <HAL_RCC_ClockConfig+0x16c>)
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001bae:	d1d7      	bne.n	8001b60 <HAL_RCC_ClockConfig+0x60>
        return HAL_ERROR;
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bb4:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <HAL_RCC_ClockConfig+0x16c>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 030c 	and.w	r3, r3, #12
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d017      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc0:	f7fe fb08 	bl	80001d4 <HAL_GetTick>
 8001bc4:	1b80      	subs	r0, r0, r6
 8001bc6:	f241 3388 	movw	r3, #5000	; 0x1388
 8001bca:	4298      	cmp	r0, r3
 8001bcc:	d9f2      	bls.n	8001bb4 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8001bce:	2003      	movs	r0, #3
 8001bd0:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bd2:	4b26      	ldr	r3, [pc, #152]	; (8001c6c <HAL_RCC_ClockConfig+0x16c>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d008      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bde:	f7fe faf9 	bl	80001d4 <HAL_GetTick>
 8001be2:	1b80      	subs	r0, r0, r6
 8001be4:	f241 3388 	movw	r3, #5000	; 0x1388
 8001be8:	4298      	cmp	r0, r3
 8001bea:	d9f2      	bls.n	8001bd2 <HAL_RCC_ClockConfig+0xd2>
          return HAL_TIMEOUT;
 8001bec:	2003      	movs	r0, #3
 8001bee:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <HAL_RCC_ClockConfig+0x168>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	429d      	cmp	r5, r3
 8001bfa:	d20c      	bcs.n	8001c16 <HAL_RCC_ClockConfig+0x116>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfc:	4a1a      	ldr	r2, [pc, #104]	; (8001c68 <HAL_RCC_ClockConfig+0x168>)
 8001bfe:	6813      	ldr	r3, [r2, #0]
 8001c00:	f023 0307 	bic.w	r3, r3, #7
 8001c04:	432b      	orrs	r3, r5
 8001c06:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c08:	6813      	ldr	r3, [r2, #0]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	429d      	cmp	r5, r3
 8001c10:	d001      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x116>
      return HAL_ERROR;
 8001c12:	2001      	movs	r0, #1
}
 8001c14:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c16:	6823      	ldr	r3, [r4, #0]
 8001c18:	f013 0f04 	tst.w	r3, #4
 8001c1c:	d006      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x12c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c1e:	4a13      	ldr	r2, [pc, #76]	; (8001c6c <HAL_RCC_ClockConfig+0x16c>)
 8001c20:	6853      	ldr	r3, [r2, #4]
 8001c22:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c26:	68e1      	ldr	r1, [r4, #12]
 8001c28:	430b      	orrs	r3, r1
 8001c2a:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2c:	6823      	ldr	r3, [r4, #0]
 8001c2e:	f013 0f08 	tst.w	r3, #8
 8001c32:	d007      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x144>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c34:	4a0d      	ldr	r2, [pc, #52]	; (8001c6c <HAL_RCC_ClockConfig+0x16c>)
 8001c36:	6853      	ldr	r3, [r2, #4]
 8001c38:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001c3c:	6921      	ldr	r1, [r4, #16]
 8001c3e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001c42:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c44:	f7ff ff26 	bl	8001a94 <HAL_RCC_GetSysClockFreq>
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <HAL_RCC_ClockConfig+0x16c>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001c50:	4a07      	ldr	r2, [pc, #28]	; (8001c70 <HAL_RCC_ClockConfig+0x170>)
 8001c52:	5cd3      	ldrb	r3, [r2, r3]
 8001c54:	40d8      	lsrs	r0, r3
 8001c56:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <HAL_RCC_ClockConfig+0x174>)
 8001c58:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	f7fe fa76 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8001c60:	2000      	movs	r0, #0
 8001c62:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001c64:	2001      	movs	r0, #1
 8001c66:	bd70      	pop	{r4, r5, r6, pc}
 8001c68:	40022000 	.word	0x40022000
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	08004dfc 	.word	0x08004dfc
 8001c74:	20000088 	.word	0x20000088

08001c78 <HAL_RCC_GetHCLKFreq>:
}
 8001c78:	4b01      	ldr	r3, [pc, #4]	; (8001c80 <HAL_RCC_GetHCLKFreq+0x8>)
 8001c7a:	6818      	ldr	r0, [r3, #0]
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20000088 	.word	0x20000088

08001c84 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c84:	b570      	push	{r4, r5, r6, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c8a:	6803      	ldr	r3, [r0, #0]
 8001c8c:	f013 0f01 	tst.w	r3, #1
 8001c90:	d034      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c92:	4b3e      	ldr	r3, [pc, #248]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001c9a:	d148      	bne.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c9c:	4b3b      	ldr	r3, [pc, #236]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001c9e:	69da      	ldr	r2, [r3, #28]
 8001ca0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ca4:	61da      	str	r2, [r3, #28]
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cac:	9301      	str	r3, [sp, #4]
 8001cae:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001cb0:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb2:	4b37      	ldr	r3, [pc, #220]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001cba:	d03a      	beq.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001cbc:	4b33      	ldr	r3, [pc, #204]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cc0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001cc4:	d011      	beq.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x66>
 8001cc6:	6862      	ldr	r2, [r4, #4]
 8001cc8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d00c      	beq.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cd0:	4a2e      	ldr	r2, [pc, #184]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001cd2:	6a13      	ldr	r3, [r2, #32]
 8001cd4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cd8:	492e      	ldr	r1, [pc, #184]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001cda:	2601      	movs	r6, #1
 8001cdc:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cde:	2600      	movs	r6, #0
 8001ce0:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ce2:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ce4:	f013 0f01 	tst.w	r3, #1
 8001ce8:	d137      	bne.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001cea:	4a28      	ldr	r2, [pc, #160]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001cec:	6a13      	ldr	r3, [r2, #32]
 8001cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cf2:	6861      	ldr	r1, [r4, #4]
 8001cf4:	430b      	orrs	r3, r1
 8001cf6:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cf8:	2d00      	cmp	r5, #0
 8001cfa:	d13f      	bne.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001cfc:	6823      	ldr	r3, [r4, #0]
 8001cfe:	f013 0f02 	tst.w	r3, #2
 8001d02:	d006      	beq.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d04:	4a21      	ldr	r2, [pc, #132]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001d06:	6853      	ldr	r3, [r2, #4]
 8001d08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d0c:	68a1      	ldr	r1, [r4, #8]
 8001d0e:	430b      	orrs	r3, r1
 8001d10:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d12:	6823      	ldr	r3, [r4, #0]
 8001d14:	f013 0f10 	tst.w	r3, #16
 8001d18:	d035      	beq.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d1a:	4a1c      	ldr	r2, [pc, #112]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001d1c:	6853      	ldr	r3, [r2, #4]
 8001d1e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001d22:	68e1      	ldr	r1, [r4, #12]
 8001d24:	430b      	orrs	r3, r1
 8001d26:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001d28:	2000      	movs	r0, #0
}
 8001d2a:	b002      	add	sp, #8
 8001d2c:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 8001d2e:	2500      	movs	r5, #0
 8001d30:	e7bf      	b.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d32:	4a17      	ldr	r2, [pc, #92]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001d34:	6813      	ldr	r3, [r2, #0]
 8001d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001d3c:	f7fe fa4a 	bl	80001d4 <HAL_GetTick>
 8001d40:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d42:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001d4a:	d1b7      	bne.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x38>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d4c:	f7fe fa42 	bl	80001d4 <HAL_GetTick>
 8001d50:	1b80      	subs	r0, r0, r6
 8001d52:	2864      	cmp	r0, #100	; 0x64
 8001d54:	d9f5      	bls.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 8001d56:	2003      	movs	r0, #3
 8001d58:	e7e7      	b.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0xa6>
        tickstart = HAL_GetTick();
 8001d5a:	f7fe fa3b 	bl	80001d4 <HAL_GetTick>
 8001d5e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d60:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	f013 0f02 	tst.w	r3, #2
 8001d68:	d1bf      	bne.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x66>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6a:	f7fe fa33 	bl	80001d4 <HAL_GetTick>
 8001d6e:	1b80      	subs	r0, r0, r6
 8001d70:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d74:	4298      	cmp	r0, r3
 8001d76:	d9f3      	bls.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0xdc>
            return HAL_TIMEOUT;
 8001d78:	2003      	movs	r0, #3
 8001d7a:	e7d6      	b.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d7c:	69d3      	ldr	r3, [r2, #28]
 8001d7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d82:	61d3      	str	r3, [r2, #28]
 8001d84:	e7ba      	b.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 8001d86:	2000      	movs	r0, #0
 8001d88:	e7cf      	b.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8001d8a:	bf00      	nop
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	40007000 	.word	0x40007000
 8001d94:	42420440 	.word	0x42420440

08001d98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d98:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d9a:	6a03      	ldr	r3, [r0, #32]
 8001d9c:	f023 0301 	bic.w	r3, r3, #1
 8001da0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001da2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001da4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001da6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001da8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001dac:	680d      	ldr	r5, [r1, #0]
 8001dae:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001db0:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001db4:	688d      	ldr	r5, [r1, #8]
 8001db6:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001db8:	4d0d      	ldr	r5, [pc, #52]	; (8001df0 <TIM_OC1_SetConfig+0x58>)
 8001dba:	42a8      	cmp	r0, r5
 8001dbc:	d009      	beq.n	8001dd2 <TIM_OC1_SetConfig+0x3a>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001dbe:	4d0c      	ldr	r5, [pc, #48]	; (8001df0 <TIM_OC1_SetConfig+0x58>)
 8001dc0:	42a8      	cmp	r0, r5
 8001dc2:	d00d      	beq.n	8001de0 <TIM_OC1_SetConfig+0x48>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001dc4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001dc6:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001dc8:	684a      	ldr	r2, [r1, #4]
 8001dca:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001dcc:	6203      	str	r3, [r0, #32]
}
 8001dce:	bc30      	pop	{r4, r5}
 8001dd0:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8001dd2:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001dd6:	68cd      	ldr	r5, [r1, #12]
 8001dd8:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8001dda:	f023 0304 	bic.w	r3, r3, #4
 8001dde:	e7ee      	b.n	8001dbe <TIM_OC1_SetConfig+0x26>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001de0:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8001de4:	694d      	ldr	r5, [r1, #20]
 8001de6:	432c      	orrs	r4, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8001de8:	698d      	ldr	r5, [r1, #24]
 8001dea:	432c      	orrs	r4, r5
 8001dec:	e7ea      	b.n	8001dc4 <TIM_OC1_SetConfig+0x2c>
 8001dee:	bf00      	nop
 8001df0:	40012c00 	.word	0x40012c00

08001df4 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001df4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001df6:	6a03      	ldr	r3, [r0, #32]
 8001df8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dfc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001dfe:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e00:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e02:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001e04:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e08:	680d      	ldr	r5, [r1, #0]
 8001e0a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001e0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e10:	688d      	ldr	r5, [r1, #8]
 8001e12:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001e16:	4d0f      	ldr	r5, [pc, #60]	; (8001e54 <TIM_OC3_SetConfig+0x60>)
 8001e18:	42a8      	cmp	r0, r5
 8001e1a:	d009      	beq.n	8001e30 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001e1c:	4d0d      	ldr	r5, [pc, #52]	; (8001e54 <TIM_OC3_SetConfig+0x60>)
 8001e1e:	42a8      	cmp	r0, r5
 8001e20:	d00e      	beq.n	8001e40 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e22:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001e24:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001e26:	684a      	ldr	r2, [r1, #4]
 8001e28:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e2a:	6203      	str	r3, [r0, #32]
}
 8001e2c:	bc30      	pop	{r4, r5}
 8001e2e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8001e30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e34:	68cd      	ldr	r5, [r1, #12]
 8001e36:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8001e3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e3e:	e7ed      	b.n	8001e1c <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001e40:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001e44:	694d      	ldr	r5, [r1, #20]
 8001e46:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e4a:	698d      	ldr	r5, [r1, #24]
 8001e4c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8001e50:	e7e7      	b.n	8001e22 <TIM_OC3_SetConfig+0x2e>
 8001e52:	bf00      	nop
 8001e54:	40012c00 	.word	0x40012c00

08001e58 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e58:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e5a:	6a03      	ldr	r3, [r0, #32]
 8001e5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e60:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e62:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e64:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e66:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001e68:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e6c:	680d      	ldr	r5, [r1, #0]
 8001e6e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001e72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001e76:	688d      	ldr	r5, [r1, #8]
 8001e78:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001e7c:	4d07      	ldr	r5, [pc, #28]	; (8001e9c <TIM_OC4_SetConfig+0x44>)
 8001e7e:	42a8      	cmp	r0, r5
 8001e80:	d006      	beq.n	8001e90 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e82:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001e84:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001e86:	684a      	ldr	r2, [r1, #4]
 8001e88:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e8a:	6203      	str	r3, [r0, #32]
}
 8001e8c:	bc30      	pop	{r4, r5}
 8001e8e:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001e90:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001e94:	694d      	ldr	r5, [r1, #20]
 8001e96:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8001e9a:	e7f2      	b.n	8001e82 <TIM_OC4_SetConfig+0x2a>
 8001e9c:	40012c00 	.word	0x40012c00

08001ea0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ea0:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ea2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ea4:	6a04      	ldr	r4, [r0, #32]
 8001ea6:	f024 0401 	bic.w	r4, r4, #1
 8001eaa:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001eac:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001eae:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001eb2:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001eb6:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8001eba:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001ebc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001ebe:	6203      	str	r3, [r0, #32]
}
 8001ec0:	bc10      	pop	{r4}
 8001ec2:	4770      	bx	lr

08001ec4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ec4:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ec6:	6a03      	ldr	r3, [r0, #32]
 8001ec8:	f023 0310 	bic.w	r3, r3, #16
 8001ecc:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ece:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001ed0:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ed2:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ed6:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001eda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ede:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001ee2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001ee4:	6203      	str	r3, [r0, #32]
}
 8001ee6:	bc10      	pop	{r4}
 8001ee8:	4770      	bx	lr

08001eea <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001eea:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001ef0:	f041 0107 	orr.w	r1, r1, #7
 8001ef4:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001ef6:	6083      	str	r3, [r0, #8]
 8001ef8:	4770      	bx	lr

08001efa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001efa:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8001efc:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001efe:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f02:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001f06:	4319      	orrs	r1, r3
 8001f08:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f0a:	6084      	str	r4, [r0, #8]
}
 8001f0c:	bc10      	pop	{r4}
 8001f0e:	4770      	bx	lr

08001f10 <HAL_TIM_Base_Start>:
  htim->State= HAL_TIM_STATE_BUSY;
 8001f10:	2302      	movs	r3, #2
 8001f12:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 8001f16:	6802      	ldr	r2, [r0, #0]
 8001f18:	6813      	ldr	r3, [r2, #0]
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6013      	str	r3, [r2, #0]
  htim->State= HAL_TIM_STATE_READY;
 8001f20:	2301      	movs	r3, #1
 8001f22:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8001f26:	2000      	movs	r0, #0
 8001f28:	4770      	bx	lr

08001f2a <HAL_TIM_Base_Stop>:
  htim->State= HAL_TIM_STATE_BUSY;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 8001f30:	6803      	ldr	r3, [r0, #0]
 8001f32:	6a19      	ldr	r1, [r3, #32]
 8001f34:	f241 1211 	movw	r2, #4369	; 0x1111
 8001f38:	4211      	tst	r1, r2
 8001f3a:	d108      	bne.n	8001f4e <HAL_TIM_Base_Stop+0x24>
 8001f3c:	6a19      	ldr	r1, [r3, #32]
 8001f3e:	f240 4244 	movw	r2, #1092	; 0x444
 8001f42:	4211      	tst	r1, r2
 8001f44:	d103      	bne.n	8001f4e <HAL_TIM_Base_Stop+0x24>
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	f022 0201 	bic.w	r2, r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]
  htim->State= HAL_TIM_STATE_READY;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8001f54:	2000      	movs	r0, #0
 8001f56:	4770      	bx	lr

08001f58 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001f58:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d07d      	beq.n	800205c <HAL_TIM_ConfigClockSource+0x104>
{
 8001f60:	b510      	push	{r4, lr}
 8001f62:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001f64:	2301      	movs	r3, #1
 8001f66:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001f70:	6802      	ldr	r2, [r0, #0]
 8001f72:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f78:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001f7c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001f7e:	680b      	ldr	r3, [r1, #0]
 8001f80:	2b40      	cmp	r3, #64	; 0x40
 8001f82:	d057      	beq.n	8002034 <HAL_TIM_ConfigClockSource+0xdc>
 8001f84:	d910      	bls.n	8001fa8 <HAL_TIM_ConfigClockSource+0x50>
 8001f86:	2b70      	cmp	r3, #112	; 0x70
 8001f88:	d03e      	beq.n	8002008 <HAL_TIM_ConfigClockSource+0xb0>
 8001f8a:	d81f      	bhi.n	8001fcc <HAL_TIM_ConfigClockSource+0x74>
 8001f8c:	2b50      	cmp	r3, #80	; 0x50
 8001f8e:	d047      	beq.n	8002020 <HAL_TIM_ConfigClockSource+0xc8>
 8001f90:	2b60      	cmp	r3, #96	; 0x60
 8001f92:	d132      	bne.n	8001ffa <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f94:	68ca      	ldr	r2, [r1, #12]
 8001f96:	6849      	ldr	r1, [r1, #4]
 8001f98:	6800      	ldr	r0, [r0, #0]
 8001f9a:	f7ff ff93 	bl	8001ec4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f9e:	2160      	movs	r1, #96	; 0x60
 8001fa0:	6820      	ldr	r0, [r4, #0]
 8001fa2:	f7ff ffa2 	bl	8001eea <TIM_ITRx_SetConfig>
    break;
 8001fa6:	e028      	b.n	8001ffa <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8001fa8:	2b10      	cmp	r3, #16
 8001faa:	d04d      	beq.n	8002048 <HAL_TIM_ConfigClockSource+0xf0>
 8001fac:	d908      	bls.n	8001fc0 <HAL_TIM_ConfigClockSource+0x68>
 8001fae:	2b20      	cmp	r3, #32
 8001fb0:	d04f      	beq.n	8002052 <HAL_TIM_ConfigClockSource+0xfa>
 8001fb2:	2b30      	cmp	r3, #48	; 0x30
 8001fb4:	d121      	bne.n	8001ffa <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001fb6:	2130      	movs	r1, #48	; 0x30
 8001fb8:	6800      	ldr	r0, [r0, #0]
 8001fba:	f7ff ff96 	bl	8001eea <TIM_ITRx_SetConfig>
    break;
 8001fbe:	e01c      	b.n	8001ffa <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8001fc0:	b9db      	cbnz	r3, 8001ffa <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	6800      	ldr	r0, [r0, #0]
 8001fc6:	f7ff ff90 	bl	8001eea <TIM_ITRx_SetConfig>
    break;
 8001fca:	e016      	b.n	8001ffa <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8001fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fd0:	d00e      	beq.n	8001ff0 <HAL_TIM_ConfigClockSource+0x98>
 8001fd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fd6:	d110      	bne.n	8001ffa <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ETR_SetConfig(htim->Instance,
 8001fd8:	68cb      	ldr	r3, [r1, #12]
 8001fda:	684a      	ldr	r2, [r1, #4]
 8001fdc:	6889      	ldr	r1, [r1, #8]
 8001fde:	6800      	ldr	r0, [r0, #0]
 8001fe0:	f7ff ff8b 	bl	8001efa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fe4:	6822      	ldr	r2, [r4, #0]
 8001fe6:	6893      	ldr	r3, [r2, #8]
 8001fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fec:	6093      	str	r3, [r2, #8]
    break;
 8001fee:	e004      	b.n	8001ffa <HAL_TIM_ConfigClockSource+0xa2>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001ff0:	6802      	ldr	r2, [r0, #0]
 8001ff2:	6893      	ldr	r3, [r2, #8]
 8001ff4:	f023 0307 	bic.w	r3, r3, #7
 8001ff8:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002000:	2000      	movs	r0, #0
 8002002:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8002006:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8002008:	68cb      	ldr	r3, [r1, #12]
 800200a:	684a      	ldr	r2, [r1, #4]
 800200c:	6889      	ldr	r1, [r1, #8]
 800200e:	6800      	ldr	r0, [r0, #0]
 8002010:	f7ff ff73 	bl	8001efa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002014:	6822      	ldr	r2, [r4, #0]
 8002016:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002018:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800201c:	6093      	str	r3, [r2, #8]
    break;
 800201e:	e7ec      	b.n	8001ffa <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002020:	68ca      	ldr	r2, [r1, #12]
 8002022:	6849      	ldr	r1, [r1, #4]
 8002024:	6800      	ldr	r0, [r0, #0]
 8002026:	f7ff ff3b 	bl	8001ea0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800202a:	2150      	movs	r1, #80	; 0x50
 800202c:	6820      	ldr	r0, [r4, #0]
 800202e:	f7ff ff5c 	bl	8001eea <TIM_ITRx_SetConfig>
    break;
 8002032:	e7e2      	b.n	8001ffa <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002034:	68ca      	ldr	r2, [r1, #12]
 8002036:	6849      	ldr	r1, [r1, #4]
 8002038:	6800      	ldr	r0, [r0, #0]
 800203a:	f7ff ff31 	bl	8001ea0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800203e:	2140      	movs	r1, #64	; 0x40
 8002040:	6820      	ldr	r0, [r4, #0]
 8002042:	f7ff ff52 	bl	8001eea <TIM_ITRx_SetConfig>
    break;
 8002046:	e7d8      	b.n	8001ffa <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8002048:	2110      	movs	r1, #16
 800204a:	6800      	ldr	r0, [r0, #0]
 800204c:	f7ff ff4d 	bl	8001eea <TIM_ITRx_SetConfig>
    break;
 8002050:	e7d3      	b.n	8001ffa <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8002052:	2120      	movs	r1, #32
 8002054:	6800      	ldr	r0, [r0, #0]
 8002056:	f7ff ff48 	bl	8001eea <TIM_ITRx_SetConfig>
    break;
 800205a:	e7ce      	b.n	8001ffa <HAL_TIM_ConfigClockSource+0xa2>
  __HAL_LOCK(htim);
 800205c:	2002      	movs	r0, #2
 800205e:	4770      	bx	lr

08002060 <HAL_TIM_IC_CaptureCallback>:
{
 8002060:	4770      	bx	lr

08002062 <HAL_TIM_PWM_PulseFinishedCallback>:
{
 8002062:	4770      	bx	lr

08002064 <HAL_TIM_TriggerCallback>:
{
 8002064:	4770      	bx	lr

08002066 <HAL_TIM_IRQHandler>:
{
 8002066:	b510      	push	{r4, lr}
 8002068:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800206a:	6803      	ldr	r3, [r0, #0]
 800206c:	691a      	ldr	r2, [r3, #16]
 800206e:	f012 0f02 	tst.w	r2, #2
 8002072:	d011      	beq.n	8002098 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	f012 0f02 	tst.w	r2, #2
 800207a:	d00d      	beq.n	8002098 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800207c:	f06f 0202 	mvn.w	r2, #2
 8002080:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002082:	2301      	movs	r3, #1
 8002084:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002086:	6803      	ldr	r3, [r0, #0]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	f013 0f03 	tst.w	r3, #3
 800208e:	d070      	beq.n	8002172 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8002090:	f7ff ffe6 	bl	8002060 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002094:	2300      	movs	r3, #0
 8002096:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002098:	6823      	ldr	r3, [r4, #0]
 800209a:	691a      	ldr	r2, [r3, #16]
 800209c:	f012 0f04 	tst.w	r2, #4
 80020a0:	d012      	beq.n	80020c8 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	f012 0f04 	tst.w	r2, #4
 80020a8:	d00e      	beq.n	80020c8 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020aa:	f06f 0204 	mvn.w	r2, #4
 80020ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020b0:	2302      	movs	r3, #2
 80020b2:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020b4:	6823      	ldr	r3, [r4, #0]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f413 7f40 	tst.w	r3, #768	; 0x300
 80020bc:	d05f      	beq.n	800217e <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80020be:	4620      	mov	r0, r4
 80020c0:	f7ff ffce 	bl	8002060 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c4:	2300      	movs	r3, #0
 80020c6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020c8:	6823      	ldr	r3, [r4, #0]
 80020ca:	691a      	ldr	r2, [r3, #16]
 80020cc:	f012 0f08 	tst.w	r2, #8
 80020d0:	d012      	beq.n	80020f8 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	f012 0f08 	tst.w	r2, #8
 80020d8:	d00e      	beq.n	80020f8 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020da:	f06f 0208 	mvn.w	r2, #8
 80020de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020e0:	2304      	movs	r3, #4
 80020e2:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020e4:	6823      	ldr	r3, [r4, #0]
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	f013 0f03 	tst.w	r3, #3
 80020ec:	d04e      	beq.n	800218c <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80020ee:	4620      	mov	r0, r4
 80020f0:	f7ff ffb6 	bl	8002060 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f4:	2300      	movs	r3, #0
 80020f6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020f8:	6823      	ldr	r3, [r4, #0]
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	f012 0f10 	tst.w	r2, #16
 8002100:	d012      	beq.n	8002128 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	f012 0f10 	tst.w	r2, #16
 8002108:	d00e      	beq.n	8002128 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800210a:	f06f 0210 	mvn.w	r2, #16
 800210e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002110:	2308      	movs	r3, #8
 8002112:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002114:	6823      	ldr	r3, [r4, #0]
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	f413 7f40 	tst.w	r3, #768	; 0x300
 800211c:	d03d      	beq.n	800219a <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 800211e:	4620      	mov	r0, r4
 8002120:	f7ff ff9e 	bl	8002060 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002124:	2300      	movs	r3, #0
 8002126:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002128:	6823      	ldr	r3, [r4, #0]
 800212a:	691a      	ldr	r2, [r3, #16]
 800212c:	f012 0f01 	tst.w	r2, #1
 8002130:	d003      	beq.n	800213a <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	f012 0f01 	tst.w	r2, #1
 8002138:	d136      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x142>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800213a:	6823      	ldr	r3, [r4, #0]
 800213c:	691a      	ldr	r2, [r3, #16]
 800213e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002142:	d003      	beq.n	800214c <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	f012 0f80 	tst.w	r2, #128	; 0x80
 800214a:	d134      	bne.n	80021b6 <HAL_TIM_IRQHandler+0x150>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800214c:	6823      	ldr	r3, [r4, #0]
 800214e:	691a      	ldr	r2, [r3, #16]
 8002150:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002154:	d003      	beq.n	800215e <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	f012 0f40 	tst.w	r2, #64	; 0x40
 800215c:	d132      	bne.n	80021c4 <HAL_TIM_IRQHandler+0x15e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800215e:	6823      	ldr	r3, [r4, #0]
 8002160:	691a      	ldr	r2, [r3, #16]
 8002162:	f012 0f20 	tst.w	r2, #32
 8002166:	d003      	beq.n	8002170 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	f012 0f20 	tst.w	r2, #32
 800216e:	d130      	bne.n	80021d2 <HAL_TIM_IRQHandler+0x16c>
 8002170:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002172:	f001 ffa7 	bl	80040c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002176:	4620      	mov	r0, r4
 8002178:	f7ff ff73 	bl	8002062 <HAL_TIM_PWM_PulseFinishedCallback>
 800217c:	e78a      	b.n	8002094 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800217e:	4620      	mov	r0, r4
 8002180:	f001 ffa0 	bl	80040c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002184:	4620      	mov	r0, r4
 8002186:	f7ff ff6c 	bl	8002062 <HAL_TIM_PWM_PulseFinishedCallback>
 800218a:	e79b      	b.n	80020c4 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800218c:	4620      	mov	r0, r4
 800218e:	f001 ff99 	bl	80040c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002192:	4620      	mov	r0, r4
 8002194:	f7ff ff65 	bl	8002062 <HAL_TIM_PWM_PulseFinishedCallback>
 8002198:	e7ac      	b.n	80020f4 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800219a:	4620      	mov	r0, r4
 800219c:	f001 ff92 	bl	80040c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a0:	4620      	mov	r0, r4
 80021a2:	f7ff ff5e 	bl	8002062 <HAL_TIM_PWM_PulseFinishedCallback>
 80021a6:	e7bd      	b.n	8002124 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021a8:	f06f 0201 	mvn.w	r2, #1
 80021ac:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80021ae:	4620      	mov	r0, r4
 80021b0:	f001 ff98 	bl	80040e4 <HAL_TIM_PeriodElapsedCallback>
 80021b4:	e7c1      	b.n	800213a <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021b6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021ba:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80021bc:	4620      	mov	r0, r4
 80021be:	f000 f951 	bl	8002464 <HAL_TIMEx_BreakCallback>
 80021c2:	e7c3      	b.n	800214c <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021c8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80021ca:	4620      	mov	r0, r4
 80021cc:	f7ff ff4a 	bl	8002064 <HAL_TIM_TriggerCallback>
 80021d0:	e7c5      	b.n	800215e <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021d2:	f06f 0220 	mvn.w	r2, #32
 80021d6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80021d8:	4620      	mov	r0, r4
 80021da:	f000 f942 	bl	8002462 <HAL_TIMEx_CommutationCallback>
}
 80021de:	e7c7      	b.n	8002170 <HAL_TIM_IRQHandler+0x10a>

080021e0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80021e0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021e2:	4a1c      	ldr	r2, [pc, #112]	; (8002254 <TIM_Base_SetConfig+0x74>)
 80021e4:	4290      	cmp	r0, r2
 80021e6:	d027      	beq.n	8002238 <TIM_Base_SetConfig+0x58>
 80021e8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80021ec:	d024      	beq.n	8002238 <TIM_Base_SetConfig+0x58>
 80021ee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80021f2:	4290      	cmp	r0, r2
 80021f4:	d020      	beq.n	8002238 <TIM_Base_SetConfig+0x58>
 80021f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021fa:	4290      	cmp	r0, r2
 80021fc:	d01c      	beq.n	8002238 <TIM_Base_SetConfig+0x58>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021fe:	4a15      	ldr	r2, [pc, #84]	; (8002254 <TIM_Base_SetConfig+0x74>)
 8002200:	4290      	cmp	r0, r2
 8002202:	d01e      	beq.n	8002242 <TIM_Base_SetConfig+0x62>
 8002204:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002208:	d01b      	beq.n	8002242 <TIM_Base_SetConfig+0x62>
 800220a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800220e:	4290      	cmp	r0, r2
 8002210:	d017      	beq.n	8002242 <TIM_Base_SetConfig+0x62>
 8002212:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002216:	4290      	cmp	r0, r2
 8002218:	d013      	beq.n	8002242 <TIM_Base_SetConfig+0x62>
  tmpcr1 &= ~TIM_CR1_ARPE;
 800221a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800221e:	694a      	ldr	r2, [r1, #20]
 8002220:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002222:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002224:	688b      	ldr	r3, [r1, #8]
 8002226:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002228:	680b      	ldr	r3, [r1, #0]
 800222a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800222c:	4b09      	ldr	r3, [pc, #36]	; (8002254 <TIM_Base_SetConfig+0x74>)
 800222e:	4298      	cmp	r0, r3
 8002230:	d00c      	beq.n	800224c <TIM_Base_SetConfig+0x6c>
  TIMx->EGR = TIM_EGR_UG;
 8002232:	2301      	movs	r3, #1
 8002234:	6143      	str	r3, [r0, #20]
 8002236:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800223c:	684a      	ldr	r2, [r1, #4]
 800223e:	4313      	orrs	r3, r2
 8002240:	e7dd      	b.n	80021fe <TIM_Base_SetConfig+0x1e>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002246:	68ca      	ldr	r2, [r1, #12]
 8002248:	4313      	orrs	r3, r2
 800224a:	e7e6      	b.n	800221a <TIM_Base_SetConfig+0x3a>
    TIMx->RCR = Structure->RepetitionCounter;
 800224c:	690b      	ldr	r3, [r1, #16]
 800224e:	6303      	str	r3, [r0, #48]	; 0x30
 8002250:	e7ef      	b.n	8002232 <TIM_Base_SetConfig+0x52>
 8002252:	bf00      	nop
 8002254:	40012c00 	.word	0x40012c00

08002258 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8002258:	b1a8      	cbz	r0, 8002286 <HAL_TIM_Base_Init+0x2e>
{
 800225a:	b510      	push	{r4, lr}
 800225c:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 800225e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002262:	b15b      	cbz	r3, 800227c <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8002264:	2302      	movs	r3, #2
 8002266:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800226a:	1d21      	adds	r1, r4, #4
 800226c:	6820      	ldr	r0, [r4, #0]
 800226e:	f7ff ffb7 	bl	80021e0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002272:	2301      	movs	r3, #1
 8002274:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002278:	2000      	movs	r0, #0
 800227a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800227c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002280:	f002 fb62 	bl	8004948 <HAL_TIM_Base_MspInit>
 8002284:	e7ee      	b.n	8002264 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002286:	2001      	movs	r0, #1
 8002288:	4770      	bx	lr

0800228a <HAL_TIM_OC_Init>:
  if(htim == NULL)
 800228a:	b1a8      	cbz	r0, 80022b8 <HAL_TIM_OC_Init+0x2e>
{
 800228c:	b510      	push	{r4, lr}
 800228e:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8002290:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002294:	b15b      	cbz	r3, 80022ae <HAL_TIM_OC_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8002296:	2302      	movs	r3, #2
 8002298:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800229c:	1d21      	adds	r1, r4, #4
 800229e:	6820      	ldr	r0, [r4, #0]
 80022a0:	f7ff ff9e 	bl	80021e0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80022a4:	2301      	movs	r3, #1
 80022a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80022aa:	2000      	movs	r0, #0
 80022ac:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80022ae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 80022b2:	f002 fb5f 	bl	8004974 <HAL_TIM_OC_MspInit>
 80022b6:	e7ee      	b.n	8002296 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 80022b8:	2001      	movs	r0, #1
 80022ba:	4770      	bx	lr

080022bc <TIM_OC2_SetConfig>:
{
 80022bc:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022be:	6a03      	ldr	r3, [r0, #32]
 80022c0:	f023 0310 	bic.w	r3, r3, #16
 80022c4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80022c6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80022c8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80022ca:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80022cc:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022d0:	680d      	ldr	r5, [r1, #0]
 80022d2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80022d6:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80022da:	688d      	ldr	r5, [r1, #8]
 80022dc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022e0:	4d0e      	ldr	r5, [pc, #56]	; (800231c <TIM_OC2_SetConfig+0x60>)
 80022e2:	42a8      	cmp	r0, r5
 80022e4:	d009      	beq.n	80022fa <TIM_OC2_SetConfig+0x3e>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80022e6:	4d0d      	ldr	r5, [pc, #52]	; (800231c <TIM_OC2_SetConfig+0x60>)
 80022e8:	42a8      	cmp	r0, r5
 80022ea:	d00e      	beq.n	800230a <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 80022ec:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80022ee:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80022f0:	684a      	ldr	r2, [r1, #4]
 80022f2:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80022f4:	6203      	str	r3, [r0, #32]
}
 80022f6:	bc30      	pop	{r4, r5}
 80022f8:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80022fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022fe:	68cd      	ldr	r5, [r1, #12]
 8002300:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002308:	e7ed      	b.n	80022e6 <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800230a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800230e:	694d      	ldr	r5, [r1, #20]
 8002310:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002314:	698d      	ldr	r5, [r1, #24]
 8002316:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800231a:	e7e7      	b.n	80022ec <TIM_OC2_SetConfig+0x30>
 800231c:	40012c00 	.word	0x40012c00

08002320 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8002320:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002324:	2b01      	cmp	r3, #1
 8002326:	d028      	beq.n	800237a <HAL_TIM_OC_ConfigChannel+0x5a>
{
 8002328:	b510      	push	{r4, lr}
 800232a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800232c:	2301      	movs	r3, #1
 800232e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002332:	2302      	movs	r3, #2
 8002334:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8002338:	2a0c      	cmp	r2, #12
 800233a:	d80b      	bhi.n	8002354 <HAL_TIM_OC_ConfigChannel+0x34>
 800233c:	e8df f002 	tbb	[pc, r2]
 8002340:	0a0a0a07 	.word	0x0a0a0a07
 8002344:	0a0a0a11 	.word	0x0a0a0a11
 8002348:	0a0a0a15 	.word	0x0a0a0a15
 800234c:	19          	.byte	0x19
 800234d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800234e:	6800      	ldr	r0, [r0, #0]
 8002350:	f7ff fd22 	bl	8001d98 <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002354:	2301      	movs	r3, #1
 8002356:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800235a:	2000      	movs	r0, #0
 800235c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8002360:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002362:	6800      	ldr	r0, [r0, #0]
 8002364:	f7ff ffaa 	bl	80022bc <TIM_OC2_SetConfig>
    break;
 8002368:	e7f4      	b.n	8002354 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800236a:	6800      	ldr	r0, [r0, #0]
 800236c:	f7ff fd42 	bl	8001df4 <TIM_OC3_SetConfig>
    break;
 8002370:	e7f0      	b.n	8002354 <HAL_TIM_OC_ConfigChannel+0x34>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002372:	6800      	ldr	r0, [r0, #0]
 8002374:	f7ff fd70 	bl	8001e58 <TIM_OC4_SetConfig>
    break;
 8002378:	e7ec      	b.n	8002354 <HAL_TIM_OC_ConfigChannel+0x34>
  __HAL_LOCK(htim);
 800237a:	2002      	movs	r0, #2
 800237c:	4770      	bx	lr

0800237e <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800237e:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002380:	2301      	movs	r3, #1
 8002382:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002386:	6a03      	ldr	r3, [r0, #32]
 8002388:	ea23 0304 	bic.w	r3, r3, r4
 800238c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800238e:	6a03      	ldr	r3, [r0, #32]
 8002390:	408a      	lsls	r2, r1
 8002392:	4313      	orrs	r3, r2
 8002394:	6203      	str	r3, [r0, #32]
}
 8002396:	bc10      	pop	{r4}
 8002398:	4770      	bx	lr
	...

0800239c <HAL_TIM_OC_Start_IT>:
{
 800239c:	b510      	push	{r4, lr}
 800239e:	4604      	mov	r4, r0
  switch (Channel)
 80023a0:	290c      	cmp	r1, #12
 80023a2:	d80d      	bhi.n	80023c0 <HAL_TIM_OC_Start_IT+0x24>
 80023a4:	e8df f001 	tbb	[pc, r1]
 80023a8:	0c0c0c07 	.word	0x0c0c0c07
 80023ac:	0c0c0c1b 	.word	0x0c0c0c1b
 80023b0:	0c0c0c21 	.word	0x0c0c0c21
 80023b4:	27          	.byte	0x27
 80023b5:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80023b6:	6802      	ldr	r2, [r0, #0]
 80023b8:	68d3      	ldr	r3, [r2, #12]
 80023ba:	f043 0302 	orr.w	r3, r3, #2
 80023be:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023c0:	2201      	movs	r2, #1
 80023c2:	6820      	ldr	r0, [r4, #0]
 80023c4:	f7ff ffdb 	bl	800237e <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023c8:	6823      	ldr	r3, [r4, #0]
 80023ca:	4a10      	ldr	r2, [pc, #64]	; (800240c <HAL_TIM_OC_Start_IT+0x70>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d018      	beq.n	8002402 <HAL_TIM_OC_Start_IT+0x66>
  __HAL_TIM_ENABLE(htim);
 80023d0:	6822      	ldr	r2, [r4, #0]
 80023d2:	6813      	ldr	r3, [r2, #0]
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	6013      	str	r3, [r2, #0]
}
 80023da:	2000      	movs	r0, #0
 80023dc:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80023de:	6802      	ldr	r2, [r0, #0]
 80023e0:	68d3      	ldr	r3, [r2, #12]
 80023e2:	f043 0304 	orr.w	r3, r3, #4
 80023e6:	60d3      	str	r3, [r2, #12]
    break;
 80023e8:	e7ea      	b.n	80023c0 <HAL_TIM_OC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80023ea:	6802      	ldr	r2, [r0, #0]
 80023ec:	68d3      	ldr	r3, [r2, #12]
 80023ee:	f043 0308 	orr.w	r3, r3, #8
 80023f2:	60d3      	str	r3, [r2, #12]
    break;
 80023f4:	e7e4      	b.n	80023c0 <HAL_TIM_OC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80023f6:	6802      	ldr	r2, [r0, #0]
 80023f8:	68d3      	ldr	r3, [r2, #12]
 80023fa:	f043 0310 	orr.w	r3, r3, #16
 80023fe:	60d3      	str	r3, [r2, #12]
    break;
 8002400:	e7de      	b.n	80023c0 <HAL_TIM_OC_Start_IT+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8002402:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002404:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002408:	645a      	str	r2, [r3, #68]	; 0x44
 800240a:	e7e1      	b.n	80023d0 <HAL_TIM_OC_Start_IT+0x34>
 800240c:	40012c00 	.word	0x40012c00

08002410 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002410:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002414:	2b01      	cmp	r3, #1
 8002416:	d022      	beq.n	800245e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
{
 8002418:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800241a:	2201      	movs	r2, #1
 800241c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002420:	2302      	movs	r3, #2
 8002422:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002426:	6804      	ldr	r4, [r0, #0]
 8002428:	6863      	ldr	r3, [r4, #4]
 800242a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800242e:	6063      	str	r3, [r4, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002430:	6804      	ldr	r4, [r0, #0]
 8002432:	6863      	ldr	r3, [r4, #4]
 8002434:	680d      	ldr	r5, [r1, #0]
 8002436:	432b      	orrs	r3, r5
 8002438:	6063      	str	r3, [r4, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800243a:	6804      	ldr	r4, [r0, #0]
 800243c:	68a3      	ldr	r3, [r4, #8]
 800243e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002442:	60a3      	str	r3, [r4, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002444:	6804      	ldr	r4, [r0, #0]
 8002446:	68a3      	ldr	r3, [r4, #8]
 8002448:	6849      	ldr	r1, [r1, #4]
 800244a:	430b      	orrs	r3, r1
 800244c:	60a3      	str	r3, [r4, #8]

  htim->State = HAL_TIM_STATE_READY;
 800244e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002452:	2300      	movs	r3, #0
 8002454:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002458:	4618      	mov	r0, r3
}
 800245a:	bc30      	pop	{r4, r5}
 800245c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800245e:	2002      	movs	r0, #2
 8002460:	4770      	bx	lr

08002462 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002462:	4770      	bx	lr

08002464 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002464:	4770      	bx	lr

08002466 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002466:	b084      	sub	sp, #16
 8002468:	a801      	add	r0, sp, #4
 800246a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800246e:	2000      	movs	r0, #0
 8002470:	b004      	add	sp, #16
 8002472:	4770      	bx	lr

08002474 <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002474:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002478:	b29b      	uxth	r3, r3
 800247a:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 800247e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8002482:	2000      	movs	r0, #0
 8002484:	4770      	bx	lr

08002486 <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002486:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800248a:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 800248e:	045b      	lsls	r3, r3, #17
 8002490:	0c5b      	lsrs	r3, r3, #17
 8002492:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8002496:	2000      	movs	r0, #0
 8002498:	4770      	bx	lr

0800249a <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800249a:	2000      	movs	r0, #0
 800249c:	4770      	bx	lr

0800249e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800249e:	b084      	sub	sp, #16
 80024a0:	b538      	push	{r3, r4, r5, lr}
 80024a2:	ac05      	add	r4, sp, #20
 80024a4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80024a8:	2301      	movs	r3, #1
 80024aa:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80024ae:	2400      	movs	r4, #0
 80024b0:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80024b4:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80024b8:	f8a0 4050 	strh.w	r4, [r0, #80]	; 0x50
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
 80024bc:	f7ff ffda 	bl	8002474 <USB_EnableGlobalInt>
    
  return HAL_OK;
}
 80024c0:	4620      	mov	r0, r4
 80024c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024c6:	b004      	add	sp, #16
 80024c8:	4770      	bx	lr

080024ca <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80024ca:	b410      	push	{r4}
  /* initialize Endpoint */
  switch (ep->type)
 80024cc:	78cb      	ldrb	r3, [r1, #3]
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	d80f      	bhi.n	80024f2 <USB_ActivateEndpoint+0x28>
 80024d2:	e8df f003 	tbb	[pc, r3]
 80024d6:	6e02      	.short	0x6e02
 80024d8:	6155      	.short	0x6155
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 80024da:	780a      	ldrb	r2, [r1, #0]
 80024dc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80024e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024ee:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80024f2:	780a      	ldrb	r2, [r1, #0]
 80024f4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024fc:	051b      	lsls	r3, r3, #20
 80024fe:	0d1b      	lsrs	r3, r3, #20
 8002500:	4313      	orrs	r3, r2
 8002502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800250a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  
  if (ep->doublebuffer == 0) 
 800250e:	7a8b      	ldrb	r3, [r1, #10]
 8002510:	2b00      	cmp	r3, #0
 8002512:	f040 80b2 	bne.w	800267a <USB_ActivateEndpoint+0x1b0>
  {
    if (ep->is_in)
 8002516:	784b      	ldrb	r3, [r1, #1]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d057      	beq.n	80025cc <USB_ActivateEndpoint+0x102>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800251c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002520:	b29b      	uxth	r3, r3
 8002522:	780a      	ldrb	r2, [r1, #0]
 8002524:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002528:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800252c:	888a      	ldrh	r2, [r1, #4]
 800252e:	0852      	lsrs	r2, r2, #1
 8002530:	0052      	lsls	r2, r2, #1
 8002532:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002536:	780a      	ldrb	r2, [r1, #0]
 8002538:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800253c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002540:	d00b      	beq.n	800255a <USB_ActivateEndpoint+0x90>
 8002542:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002546:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800254a:	051b      	lsls	r3, r3, #20
 800254c:	0d1b      	lsrs	r3, r3, #20
 800254e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002552:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002556:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 800255a:	780a      	ldrb	r2, [r1, #0]
 800255c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002560:	b29b      	uxth	r3, r3
 8002562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800256a:	f083 0320 	eor.w	r3, r3, #32
 800256e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002576:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 800257a:	2000      	movs	r0, #0
 800257c:	bc10      	pop	{r4}
 800257e:	4770      	bx	lr
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8002580:	780a      	ldrb	r2, [r1, #0]
 8002582:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002586:	b29b      	uxth	r3, r3
 8002588:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800258c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002590:	b29b      	uxth	r3, r3
 8002592:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 8002596:	e7ac      	b.n	80024f2 <USB_ActivateEndpoint+0x28>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8002598:	780a      	ldrb	r2, [r1, #0]
 800259a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80025a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a8:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80025ac:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 80025b0:	e79f      	b.n	80024f2 <USB_ActivateEndpoint+0x28>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 80025b2:	780a      	ldrb	r2, [r1, #0]
 80025b4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80025be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025c6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 80025ca:	e792      	b.n	80024f2 <USB_ActivateEndpoint+0x28>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80025cc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	780a      	ldrb	r2, [r1, #0]
 80025d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80025d8:	3304      	adds	r3, #4
 80025da:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80025de:	888a      	ldrh	r2, [r1, #4]
 80025e0:	0852      	lsrs	r2, r2, #1
 80025e2:	0052      	lsls	r2, r2, #1
 80025e4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80025e8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	780a      	ldrb	r2, [r1, #0]
 80025f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80025f4:	3306      	adds	r3, #6
 80025f6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80025fa:	690c      	ldr	r4, [r1, #16]
 80025fc:	2c3e      	cmp	r4, #62	; 0x3e
 80025fe:	d930      	bls.n	8002662 <USB_ActivateEndpoint+0x198>
 8002600:	f3c4 124f 	ubfx	r2, r4, #5, #16
 8002604:	f014 0f1f 	tst.w	r4, #31
 8002608:	d101      	bne.n	800260e <USB_ActivateEndpoint+0x144>
 800260a:	3a01      	subs	r2, #1
 800260c:	b292      	uxth	r2, r2
 800260e:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002612:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002616:	b292      	uxth	r2, r2
 8002618:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800261c:	780a      	ldrb	r2, [r1, #0]
 800261e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002622:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002626:	d00b      	beq.n	8002640 <USB_ActivateEndpoint+0x176>
 8002628:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800262c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002630:	051b      	lsls	r3, r3, #20
 8002632:	0d1b      	lsrs	r3, r3, #20
 8002634:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800263c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002640:	780a      	ldrb	r2, [r1, #0]
 8002642:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002646:	b29b      	uxth	r3, r3
 8002648:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800264c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002650:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002654:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800265c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002660:	e78b      	b.n	800257a <USB_ActivateEndpoint+0xb0>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002662:	f3c4 024f 	ubfx	r2, r4, #1, #16
 8002666:	f014 0f01 	tst.w	r4, #1
 800266a:	d001      	beq.n	8002670 <USB_ActivateEndpoint+0x1a6>
 800266c:	3201      	adds	r2, #1
 800266e:	b292      	uxth	r2, r2
 8002670:	0292      	lsls	r2, r2, #10
 8002672:	b292      	uxth	r2, r2
 8002674:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8002678:	e7d0      	b.n	800261c <USB_ActivateEndpoint+0x152>
    PCD_SET_EP_DBUF(USBx, ep->num);
 800267a:	780a      	ldrb	r2, [r1, #0]
 800267c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002680:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002684:	051b      	lsls	r3, r3, #20
 8002686:	0d1b      	lsrs	r3, r3, #20
 8002688:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800268c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002690:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8002694:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002698:	b29b      	uxth	r3, r3
 800269a:	780a      	ldrb	r2, [r1, #0]
 800269c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80026a0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80026a4:	88ca      	ldrh	r2, [r1, #6]
 80026a6:	0852      	lsrs	r2, r2, #1
 80026a8:	0052      	lsls	r2, r2, #1
 80026aa:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 80026ae:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	780a      	ldrb	r2, [r1, #0]
 80026b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80026ba:	3304      	adds	r3, #4
 80026bc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80026c0:	890a      	ldrh	r2, [r1, #8]
 80026c2:	0852      	lsrs	r2, r2, #1
 80026c4:	0052      	lsls	r2, r2, #1
 80026c6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    if (ep->is_in==0)
 80026ca:	784b      	ldrb	r3, [r1, #1]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d14b      	bne.n	8002768 <USB_ActivateEndpoint+0x29e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80026d0:	780a      	ldrb	r2, [r1, #0]
 80026d2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80026d6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80026da:	d00b      	beq.n	80026f4 <USB_ActivateEndpoint+0x22a>
 80026dc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80026e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026e4:	051b      	lsls	r3, r3, #20
 80026e6:	0d1b      	lsrs	r3, r3, #20
 80026e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026f0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80026f4:	780a      	ldrb	r2, [r1, #0]
 80026f6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80026fa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80026fe:	d00b      	beq.n	8002718 <USB_ActivateEndpoint+0x24e>
 8002700:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002704:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002708:	051b      	lsls	r3, r3, #20
 800270a:	0d1b      	lsrs	r3, r3, #20
 800270c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002710:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002714:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8002718:	780a      	ldrb	r2, [r1, #0]
 800271a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800271e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002722:	051b      	lsls	r3, r3, #20
 8002724:	0d1b      	lsrs	r3, r3, #20
 8002726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800272a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800272e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002732:	780a      	ldrb	r2, [r1, #0]
 8002734:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002738:	b29b      	uxth	r3, r3
 800273a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800273e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002742:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002746:	f248 0480 	movw	r4, #32896	; 0x8080
 800274a:	4323      	orrs	r3, r4
 800274c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002750:	780a      	ldrb	r2, [r1, #0]
 8002752:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002756:	b29b      	uxth	r3, r3
 8002758:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800275c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002760:	4323      	orrs	r3, r4
 8002762:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002766:	e708      	b.n	800257a <USB_ActivateEndpoint+0xb0>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002768:	780a      	ldrb	r2, [r1, #0]
 800276a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800276e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002772:	d00b      	beq.n	800278c <USB_ActivateEndpoint+0x2c2>
 8002774:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002778:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800277c:	051b      	lsls	r3, r3, #20
 800277e:	0d1b      	lsrs	r3, r3, #20
 8002780:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002788:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800278c:	780a      	ldrb	r2, [r1, #0]
 800278e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002792:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002796:	d00b      	beq.n	80027b0 <USB_ActivateEndpoint+0x2e6>
 8002798:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800279c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027a0:	051b      	lsls	r3, r3, #20
 80027a2:	0d1b      	lsrs	r3, r3, #20
 80027a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027ac:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80027b0:	780a      	ldrb	r2, [r1, #0]
 80027b2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80027b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027ba:	051b      	lsls	r3, r3, #20
 80027bc:	0d1b      	lsrs	r3, r3, #20
 80027be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027c6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80027ca:	780b      	ldrb	r3, [r1, #0]
 80027cc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80027d0:	b292      	uxth	r2, r2
 80027d2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80027d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027da:	f248 0480 	movw	r4, #32896	; 0x8080
 80027de:	4322      	orrs	r2, r4
 80027e0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80027e4:	780a      	ldrb	r2, [r1, #0]
 80027e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f4:	4323      	orrs	r3, r4
 80027f6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80027fa:	e6be      	b.n	800257a <USB_ActivateEndpoint+0xb0>

080027fc <USB_DeactivateEndpoint>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0) 
 80027fc:	7a8b      	ldrb	r3, [r1, #10]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d144      	bne.n	800288c <USB_DeactivateEndpoint+0x90>
  {
    if (ep->is_in)
 8002802:	784b      	ldrb	r3, [r1, #1]
 8002804:	b30b      	cbz	r3, 800284a <USB_DeactivateEndpoint+0x4e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002806:	780a      	ldrb	r2, [r1, #0]
 8002808:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800280c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002810:	d00b      	beq.n	800282a <USB_DeactivateEndpoint+0x2e>
 8002812:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002816:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800281a:	051b      	lsls	r3, r3, #20
 800281c:	0d1b      	lsrs	r3, r3, #20
 800281e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002822:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002826:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 800282a:	780a      	ldrb	r2, [r1, #0]
 800282c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002830:	b29b      	uxth	r3, r3
 8002832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800283a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800283e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002842:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8002846:	2000      	movs	r0, #0
 8002848:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800284a:	780a      	ldrb	r2, [r1, #0]
 800284c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002850:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002854:	d00b      	beq.n	800286e <USB_DeactivateEndpoint+0x72>
 8002856:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800285a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800285e:	051b      	lsls	r3, r3, #20
 8002860:	0d1b      	lsrs	r3, r3, #20
 8002862:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800286a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800286e:	780a      	ldrb	r2, [r1, #0]
 8002870:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002874:	b29b      	uxth	r3, r3
 8002876:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800287a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800287e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002886:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800288a:	e7dc      	b.n	8002846 <USB_DeactivateEndpoint+0x4a>
{
 800288c:	b410      	push	{r4}
    if (ep->is_in==0)
 800288e:	784b      	ldrb	r3, [r1, #1]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d14b      	bne.n	800292c <USB_DeactivateEndpoint+0x130>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002894:	780a      	ldrb	r2, [r1, #0]
 8002896:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800289a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800289e:	d00b      	beq.n	80028b8 <USB_DeactivateEndpoint+0xbc>
 80028a0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80028a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028a8:	051b      	lsls	r3, r3, #20
 80028aa:	0d1b      	lsrs	r3, r3, #20
 80028ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028b4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80028b8:	780a      	ldrb	r2, [r1, #0]
 80028ba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80028be:	f013 0f40 	tst.w	r3, #64	; 0x40
 80028c2:	d00b      	beq.n	80028dc <USB_DeactivateEndpoint+0xe0>
 80028c4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80028c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028cc:	051b      	lsls	r3, r3, #20
 80028ce:	0d1b      	lsrs	r3, r3, #20
 80028d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028d8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80028dc:	780a      	ldrb	r2, [r1, #0]
 80028de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80028e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028e6:	051b      	lsls	r3, r3, #20
 80028e8:	0d1b      	lsrs	r3, r3, #20
 80028ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028f2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80028f6:	780b      	ldrb	r3, [r1, #0]
 80028f8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80028fc:	b292      	uxth	r2, r2
 80028fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002902:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002906:	f248 0480 	movw	r4, #32896	; 0x8080
 800290a:	4322      	orrs	r2, r4
 800290c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002910:	780a      	ldrb	r2, [r1, #0]
 8002912:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002916:	b29b      	uxth	r3, r3
 8002918:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800291c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002920:	4323      	orrs	r3, r4
 8002922:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8002926:	2000      	movs	r0, #0
 8002928:	bc10      	pop	{r4}
 800292a:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800292c:	780a      	ldrb	r2, [r1, #0]
 800292e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002932:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002936:	d00b      	beq.n	8002950 <USB_DeactivateEndpoint+0x154>
 8002938:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800293c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002940:	051b      	lsls	r3, r3, #20
 8002942:	0d1b      	lsrs	r3, r3, #20
 8002944:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800294c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002950:	780a      	ldrb	r2, [r1, #0]
 8002952:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002956:	f013 0f40 	tst.w	r3, #64	; 0x40
 800295a:	d00b      	beq.n	8002974 <USB_DeactivateEndpoint+0x178>
 800295c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002960:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002964:	051b      	lsls	r3, r3, #20
 8002966:	0d1b      	lsrs	r3, r3, #20
 8002968:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800296c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002970:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8002974:	780a      	ldrb	r2, [r1, #0]
 8002976:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800297a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800297e:	051b      	lsls	r3, r3, #20
 8002980:	0d1b      	lsrs	r3, r3, #20
 8002982:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800298a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800298e:	780b      	ldrb	r3, [r1, #0]
 8002990:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002994:	b292      	uxth	r2, r2
 8002996:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800299a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800299e:	f248 0480 	movw	r4, #32896	; 0x8080
 80029a2:	4322      	orrs	r2, r4
 80029a4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80029a8:	780a      	ldrb	r2, [r1, #0]
 80029aa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b8:	4323      	orrs	r3, r4
 80029ba:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80029be:	e7b2      	b.n	8002926 <USB_DeactivateEndpoint+0x12a>

080029c0 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 80029c0:	780a      	ldrb	r2, [r1, #0]
 80029c2:	b18a      	cbz	r2, 80029e8 <USB_EPSetStall+0x28>
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
  }
  else
  {
    if (ep->is_in)
 80029c4:	784b      	ldrb	r3, [r1, #1]
 80029c6:	bb13      	cbnz	r3, 8002a0e <USB_EPSetStall+0x4e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 80029c8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80029da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80029e6:	e010      	b.n	8002a0a <USB_EPSetStall+0x4a>
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 80029e8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029f6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80029fa:	f083 0310 	eor.w	r3, r3, #16
 80029fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a06:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
  return HAL_OK;
}
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	4770      	bx	lr
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8002a0e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a1c:	f083 0310 	eor.w	r3, r3, #16
 8002a20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a28:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002a2c:	e7ed      	b.n	8002a0a <USB_EPSetStall+0x4a>

08002a2e <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8002a2e:	784b      	ldrb	r3, [r1, #1]
 8002a30:	b31b      	cbz	r3, 8002a7a <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002a32:	780a      	ldrb	r2, [r1, #0]
 8002a34:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a38:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002a3c:	d00b      	beq.n	8002a56 <USB_EPClearStall+0x28>
 8002a3e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a46:	051b      	lsls	r3, r3, #20
 8002a48:	0d1b      	lsrs	r3, r3, #20
 8002a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a52:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002a56:	780a      	ldrb	r2, [r1, #0]
 8002a58:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a66:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a72:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
  }
  return HAL_OK;
}
 8002a76:	2000      	movs	r0, #0
 8002a78:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002a7a:	780a      	ldrb	r2, [r1, #0]
 8002a7c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a80:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002a84:	d00b      	beq.n	8002a9e <USB_EPClearStall+0x70>
 8002a86:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a8e:	051b      	lsls	r3, r3, #20
 8002a90:	0d1b      	lsrs	r3, r3, #20
 8002a92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a9a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002a9e:	780a      	ldrb	r2, [r1, #0]
 8002aa0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aae:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aba:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002abe:	e7da      	b.n	8002a76 <USB_EPClearStall+0x48>

08002ac0 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8002ac0:	b911      	cbnz	r1, 8002ac8 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8002ac2:	2380      	movs	r3, #128	; 0x80
 8002ac4:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8002ac8:	2000      	movs	r0, #0
 8002aca:	4770      	bx	lr

08002acc <USB_DevConnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002acc:	2000      	movs	r0, #0
 8002ace:	4770      	bx	lr

08002ad0 <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	4770      	bx	lr

08002ad4 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 8002ad4:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8002ad8:	b280      	uxth	r0, r0
 8002ada:	4770      	bx	lr

08002adc <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002adc:	2000      	movs	r0, #0
 8002ade:	4770      	bx	lr

08002ae0 <USB_WritePMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	105b      	asrs	r3, r3, #1
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002ae4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8002ae8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (index = nbytes; index != 0; index--)
 8002aec:	b163      	cbz	r3, 8002b08 <USB_WritePMA+0x28>
{
 8002aee:	b410      	push	{r4}
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8002af0:	780c      	ldrb	r4, [r1, #0]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8002af2:	7848      	ldrb	r0, [r1, #1]
 8002af4:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    *pdwVal++ = temp2;
 8002af8:	f822 4b04 	strh.w	r4, [r2], #4
    pdwVal++;
    pbUsrBuf++;
 8002afc:	3102      	adds	r1, #2
  for (index = nbytes; index != 0; index--)
 8002afe:	3b01      	subs	r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1f5      	bne.n	8002af0 <USB_WritePMA+0x10>
  }
}
 8002b04:	bc10      	pop	{r4}
 8002b06:	4770      	bx	lr
 8002b08:	4770      	bx	lr

08002b0a <USB_EPStartXfer>:
{
 8002b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t len = ep->xfer_len;
 8002b0c:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 8002b0e:	784c      	ldrb	r4, [r1, #1]
 8002b10:	2c01      	cmp	r4, #1
 8002b12:	d035      	beq.n	8002b80 <USB_EPStartXfer+0x76>
    if (ep->xfer_len > ep->maxpacket)
 8002b14:	690b      	ldr	r3, [r1, #16]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	f240 80f0 	bls.w	8002cfc <USB_EPStartXfer+0x1f2>
      ep->xfer_len-=len; 
 8002b1c:	1ad2      	subs	r2, r2, r3
 8002b1e:	618a      	str	r2, [r1, #24]
    if (ep->doublebuffer == 0) 
 8002b20:	7a8a      	ldrb	r2, [r1, #10]
 8002b22:	2a00      	cmp	r2, #0
 8002b24:	f040 80fa 	bne.w	8002d1c <USB_EPStartXfer+0x212>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002b28:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002b2c:	b292      	uxth	r2, r2
 8002b2e:	780c      	ldrb	r4, [r1, #0]
 8002b30:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8002b34:	3206      	adds	r2, #6
 8002b36:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8002b3a:	2b3e      	cmp	r3, #62	; 0x3e
 8002b3c:	f240 80e2 	bls.w	8002d04 <USB_EPStartXfer+0x1fa>
 8002b40:	f3c3 144f 	ubfx	r4, r3, #5, #16
 8002b44:	f013 0f1f 	tst.w	r3, #31
 8002b48:	d101      	bne.n	8002b4e <USB_EPStartXfer+0x44>
 8002b4a:	3c01      	subs	r4, #1
 8002b4c:	b2a4      	uxth	r4, r4
 8002b4e:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8002b52:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8002b56:	b2a4      	uxth	r4, r4
 8002b58:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002b5c:	780a      	ldrb	r2, [r1, #0]
 8002b5e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002b70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b78:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 8002b80:	690f      	ldr	r7, [r1, #16]
 8002b82:	42ba      	cmp	r2, r7
 8002b84:	d926      	bls.n	8002bd4 <USB_EPStartXfer+0xca>
      ep->xfer_len-=len; 
 8002b86:	1bd2      	subs	r2, r2, r7
 8002b88:	618a      	str	r2, [r1, #24]
 8002b8a:	460e      	mov	r6, r1
 8002b8c:	4605      	mov	r5, r0
    if (ep->doublebuffer == 0) 
 8002b8e:	7a8b      	ldrb	r3, [r1, #10]
 8002b90:	b323      	cbz	r3, 8002bdc <USB_EPStartXfer+0xd2>
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8002b92:	780b      	ldrb	r3, [r1, #0]
 8002b94:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002b98:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002b9c:	d06c      	beq.n	8002c78 <USB_EPStartXfer+0x16e>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002b9e:	2c00      	cmp	r4, #0
 8002ba0:	d139      	bne.n	8002c16 <USB_EPStartXfer+0x10c>
 8002ba2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002ba6:	b292      	uxth	r2, r2
 8002ba8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002bac:	3306      	adds	r3, #6
 8002bae:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002bb2:	2f3e      	cmp	r7, #62	; 0x3e
 8002bb4:	d923      	bls.n	8002bfe <USB_EPStartXfer+0xf4>
 8002bb6:	f3c7 124f 	ubfx	r2, r7, #5, #16
 8002bba:	f017 0f1f 	tst.w	r7, #31
 8002bbe:	d101      	bne.n	8002bc4 <USB_EPStartXfer+0xba>
 8002bc0:	3a01      	subs	r2, #1
 8002bc2:	b292      	uxth	r2, r2
 8002bc4:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002bc8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002bcc:	b292      	uxth	r2, r2
 8002bce:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8002bd2:	e02a      	b.n	8002c2a <USB_EPStartXfer+0x120>
      ep->xfer_len =0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	618b      	str	r3, [r1, #24]
      len=ep->xfer_len;
 8002bd8:	4617      	mov	r7, r2
 8002bda:	e7d6      	b.n	8002b8a <USB_EPStartXfer+0x80>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8002bdc:	b2bb      	uxth	r3, r7
 8002bde:	888a      	ldrh	r2, [r1, #4]
 8002be0:	6949      	ldr	r1, [r1, #20]
 8002be2:	f7ff ff7d 	bl	8002ae0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002be6:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	7832      	ldrb	r2, [r6, #0]
 8002bee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002bf2:	3302      	adds	r3, #2
 8002bf4:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8002bf8:	f8c3 7400 	str.w	r7, [r3, #1024]	; 0x400
 8002bfc:	e02b      	b.n	8002c56 <USB_EPStartXfer+0x14c>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002bfe:	f3c7 024f 	ubfx	r2, r7, #1, #16
 8002c02:	f017 0f01 	tst.w	r7, #1
 8002c06:	d001      	beq.n	8002c0c <USB_EPStartXfer+0x102>
 8002c08:	3201      	adds	r2, #1
 8002c0a:	b292      	uxth	r2, r2
 8002c0c:	0292      	lsls	r2, r2, #10
 8002c0e:	b292      	uxth	r2, r2
 8002c10:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8002c14:	e009      	b.n	8002c2a <USB_EPStartXfer+0x120>
 8002c16:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002c1a:	b292      	uxth	r2, r2
 8002c1c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002c20:	3302      	adds	r3, #2
 8002c22:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002c26:	f8c3 7400 	str.w	r7, [r3, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 8002c2a:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8002c2c:	b2bb      	uxth	r3, r7
 8002c2e:	6971      	ldr	r1, [r6, #20]
 8002c30:	4628      	mov	r0, r5
 8002c32:	f7ff ff55 	bl	8002ae0 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002c36:	7873      	ldrb	r3, [r6, #1]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d14f      	bne.n	8002cdc <USB_EPStartXfer+0x1d2>
 8002c3c:	7832      	ldrb	r2, [r6, #0]
 8002c3e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002c42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c46:	051b      	lsls	r3, r3, #20
 8002c48:	0d1b      	lsrs	r3, r3, #20
 8002c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c52:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002c56:	7832      	ldrb	r2, [r6, #0]
 8002c58:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c66:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c72:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8002c76:	e781      	b.n	8002b7c <USB_EPStartXfer+0x72>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002c78:	bb24      	cbnz	r4, 8002cc4 <USB_EPStartXfer+0x1ba>
 8002c7a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002c7e:	b292      	uxth	r2, r2
 8002c80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002c84:	3302      	adds	r3, #2
 8002c86:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002c8a:	2f3e      	cmp	r7, #62	; 0x3e
 8002c8c:	d90e      	bls.n	8002cac <USB_EPStartXfer+0x1a2>
 8002c8e:	f3c7 124f 	ubfx	r2, r7, #5, #16
 8002c92:	f017 0f1f 	tst.w	r7, #31
 8002c96:	d101      	bne.n	8002c9c <USB_EPStartXfer+0x192>
 8002c98:	3a01      	subs	r2, #1
 8002c9a:	b292      	uxth	r2, r2
 8002c9c:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002ca0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002ca4:	b292      	uxth	r2, r2
 8002ca6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8002caa:	e015      	b.n	8002cd8 <USB_EPStartXfer+0x1ce>
 8002cac:	f3c7 024f 	ubfx	r2, r7, #1, #16
 8002cb0:	f017 0f01 	tst.w	r7, #1
 8002cb4:	d001      	beq.n	8002cba <USB_EPStartXfer+0x1b0>
 8002cb6:	3201      	adds	r2, #1
 8002cb8:	b292      	uxth	r2, r2
 8002cba:	0292      	lsls	r2, r2, #10
 8002cbc:	b292      	uxth	r2, r2
 8002cbe:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8002cc2:	e009      	b.n	8002cd8 <USB_EPStartXfer+0x1ce>
 8002cc4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002cc8:	b292      	uxth	r2, r2
 8002cca:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002cce:	3302      	adds	r3, #2
 8002cd0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002cd4:	f8c3 7400 	str.w	r7, [r3, #1024]	; 0x400
        pmabuffer = ep->pmaaddr0;
 8002cd8:	88f2      	ldrh	r2, [r6, #6]
 8002cda:	e7a7      	b.n	8002c2c <USB_EPStartXfer+0x122>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d1ba      	bne.n	8002c56 <USB_EPStartXfer+0x14c>
 8002ce0:	7832      	ldrb	r2, [r6, #0]
 8002ce2:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002ce6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cea:	051b      	lsls	r3, r3, #20
 8002cec:	0d1b      	lsrs	r3, r3, #20
 8002cee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cf6:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8002cfa:	e7ac      	b.n	8002c56 <USB_EPStartXfer+0x14c>
      ep->xfer_len =0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	618b      	str	r3, [r1, #24]
      len=ep->xfer_len;
 8002d00:	4613      	mov	r3, r2
 8002d02:	e70d      	b.n	8002b20 <USB_EPStartXfer+0x16>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002d04:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8002d08:	f013 0f01 	tst.w	r3, #1
 8002d0c:	d001      	beq.n	8002d12 <USB_EPStartXfer+0x208>
 8002d0e:	3401      	adds	r4, #1
 8002d10:	b2a4      	uxth	r4, r4
 8002d12:	02a4      	lsls	r4, r4, #10
 8002d14:	b2a4      	uxth	r4, r4
 8002d16:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8002d1a:	e71f      	b.n	8002b5c <USB_EPStartXfer+0x52>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002d1c:	b9c4      	cbnz	r4, 8002d50 <USB_EPStartXfer+0x246>
 8002d1e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002d22:	b292      	uxth	r2, r2
 8002d24:	780c      	ldrb	r4, [r1, #0]
 8002d26:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8002d2a:	3202      	adds	r2, #2
 8002d2c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8002d30:	2b3e      	cmp	r3, #62	; 0x3e
 8002d32:	d929      	bls.n	8002d88 <USB_EPStartXfer+0x27e>
 8002d34:	f3c3 144f 	ubfx	r4, r3, #5, #16
 8002d38:	f013 0f1f 	tst.w	r3, #31
 8002d3c:	d101      	bne.n	8002d42 <USB_EPStartXfer+0x238>
 8002d3e:	3c01      	subs	r4, #1
 8002d40:	b2a4      	uxth	r4, r4
 8002d42:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8002d46:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8002d4a:	b2a4      	uxth	r4, r4
 8002d4c:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8002d50:	784a      	ldrb	r2, [r1, #1]
 8002d52:	bb8a      	cbnz	r2, 8002db8 <USB_EPStartXfer+0x2ae>
 8002d54:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002d58:	b292      	uxth	r2, r2
 8002d5a:	780c      	ldrb	r4, [r1, #0]
 8002d5c:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8002d60:	3206      	adds	r2, #6
 8002d62:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8002d66:	2b3e      	cmp	r3, #62	; 0x3e
 8002d68:	d91a      	bls.n	8002da0 <USB_EPStartXfer+0x296>
 8002d6a:	f3c3 144f 	ubfx	r4, r3, #5, #16
 8002d6e:	f013 0f1f 	tst.w	r3, #31
 8002d72:	d101      	bne.n	8002d78 <USB_EPStartXfer+0x26e>
 8002d74:	3c01      	subs	r4, #1
 8002d76:	b2a4      	uxth	r4, r4
 8002d78:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8002d7c:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8002d80:	b2a4      	uxth	r4, r4
 8002d82:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8002d86:	e6e9      	b.n	8002b5c <USB_EPStartXfer+0x52>
 8002d88:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8002d8c:	f013 0f01 	tst.w	r3, #1
 8002d90:	d001      	beq.n	8002d96 <USB_EPStartXfer+0x28c>
 8002d92:	3401      	adds	r4, #1
 8002d94:	b2a4      	uxth	r4, r4
 8002d96:	02a4      	lsls	r4, r4, #10
 8002d98:	b2a4      	uxth	r4, r4
 8002d9a:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8002d9e:	e7d7      	b.n	8002d50 <USB_EPStartXfer+0x246>
 8002da0:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8002da4:	f013 0f01 	tst.w	r3, #1
 8002da8:	d001      	beq.n	8002dae <USB_EPStartXfer+0x2a4>
 8002daa:	3401      	adds	r4, #1
 8002dac:	b2a4      	uxth	r4, r4
 8002dae:	02a4      	lsls	r4, r4, #10
 8002db0:	b2a4      	uxth	r4, r4
 8002db2:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8002db6:	e6d1      	b.n	8002b5c <USB_EPStartXfer+0x52>
 8002db8:	2a01      	cmp	r2, #1
 8002dba:	f47f aecf 	bne.w	8002b5c <USB_EPStartXfer+0x52>
 8002dbe:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002dc2:	b292      	uxth	r2, r2
 8002dc4:	780c      	ldrb	r4, [r1, #0]
 8002dc6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8002dca:	3202      	adds	r2, #2
 8002dcc:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8002dd0:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 8002dd4:	e6c2      	b.n	8002b5c <USB_EPStartXfer+0x52>

08002dd6 <USB_ReadPMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	105b      	asrs	r3, r3, #1
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002dda:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8002dde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (index = nbytes; index != 0; index--)
 8002de2:	e004      	b.n	8002dee <USB_ReadPMA+0x18>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8002de4:	6810      	ldr	r0, [r2, #0]
 8002de6:	f821 0b02 	strh.w	r0, [r1], #2
  for (index = nbytes; index != 0; index--)
 8002dea:	3b01      	subs	r3, #1
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8002dec:	3204      	adds	r2, #4
  for (index = nbytes; index != 0; index--)
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f8      	bne.n	8002de4 <USB_ReadPMA+0xe>
    pbUsrBuf++;
  }
}
 8002df2:	4770      	bx	lr

08002df4 <USBD_CUSTOM_HID_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_CfgDesc);
 8002df4:	2329      	movs	r3, #41	; 0x29
 8002df6:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgDesc;
}
 8002df8:	4800      	ldr	r0, [pc, #0]	; (8002dfc <USBD_CUSTOM_HID_GetCfgDesc+0x8>)
 8002dfa:	4770      	bx	lr
 8002dfc:	20000044 	.word	0x20000044

08002e00 <USBD_CUSTOM_HID_DataIn>:
                              uint8_t epnum)
{
  
  /* Ensure that the FIFO is empty before a new transfer, this condition could 
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8002e00:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8002e04:	2000      	movs	r0, #0
 8002e06:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50

  return USBD_OK;
}
 8002e0a:	4770      	bx	lr

08002e0c <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8002e0c:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;  
 8002e0e:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218

  if (hhid->IsReportAvailable == 1)
 8002e12:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d001      	beq.n	8002e1c <USBD_CUSTOM_HID_EP0_RxReady+0x10>
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0;      
  }

  return USBD_OK;
}
 8002e18:	2000      	movs	r0, #0
 8002e1a:	bd10      	pop	{r4, pc}
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0], 
 8002e1c:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	7861      	ldrb	r1, [r4, #1]
 8002e24:	7820      	ldrb	r0, [r4, #0]
 8002e26:	4798      	blx	r3
    hhid->IsReportAvailable = 0;      
 8002e28:	2300      	movs	r3, #0
 8002e2a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002e2c:	e7f4      	b.n	8002e18 <USBD_CUSTOM_HID_EP0_RxReady+0xc>
	...

08002e30 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 8002e30:	230a      	movs	r3, #10
 8002e32:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
}
 8002e34:	4800      	ldr	r0, [pc, #0]	; (8002e38 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x8>)
 8002e36:	4770      	bx	lr
 8002e38:	2000007c 	.word	0x2000007c

08002e3c <USBD_CUSTOM_HID_Setup>:
{
 8002e3c:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8002e3e:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002e42:	780b      	ldrb	r3, [r1, #0]
 8002e44:	f013 0360 	ands.w	r3, r3, #96	; 0x60
 8002e48:	d02f      	beq.n	8002eaa <USBD_CUSTOM_HID_Setup+0x6e>
 8002e4a:	2b20      	cmp	r3, #32
 8002e4c:	d15b      	bne.n	8002f06 <USBD_CUSTOM_HID_Setup+0xca>
    switch (req->bRequest)
 8002e4e:	784b      	ldrb	r3, [r1, #1]
 8002e50:	3b02      	subs	r3, #2
 8002e52:	2b09      	cmp	r3, #9
 8002e54:	d825      	bhi.n	8002ea2 <USBD_CUSTOM_HID_Setup+0x66>
 8002e56:	e8df f003 	tbb	[pc, r3]
 8002e5a:	0915      	.short	0x0915
 8002e5c:	24242424 	.word	0x24242424
 8002e60:	05101c24 	.word	0x05101c24
      hhid->Protocol = (uint8_t)(req->wValue);
 8002e64:	788b      	ldrb	r3, [r1, #2]
 8002e66:	6423      	str	r3, [r4, #64]	; 0x40
  return USBD_OK;
 8002e68:	2000      	movs	r0, #0
      break;
 8002e6a:	bd10      	pop	{r4, pc}
      USBD_CtlSendData (pdev, 
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8002e72:	f000 fc9c 	bl	80037ae <USBD_CtlSendData>
  return USBD_OK;
 8002e76:	2000      	movs	r0, #0
      break;
 8002e78:	bd10      	pop	{r4, pc}
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8002e7a:	884b      	ldrh	r3, [r1, #2]
 8002e7c:	0a1b      	lsrs	r3, r3, #8
 8002e7e:	6463      	str	r3, [r4, #68]	; 0x44
  return USBD_OK;
 8002e80:	2000      	movs	r0, #0
      break;
 8002e82:	bd10      	pop	{r4, pc}
      USBD_CtlSendData (pdev, 
 8002e84:	2201      	movs	r2, #1
 8002e86:	f104 0144 	add.w	r1, r4, #68	; 0x44
 8002e8a:	f000 fc90 	bl	80037ae <USBD_CtlSendData>
  return USBD_OK;
 8002e8e:	2000      	movs	r0, #0
      break;      
 8002e90:	bd10      	pop	{r4, pc}
      hhid->IsReportAvailable = 1;
 8002e92:	2301      	movs	r3, #1
 8002e94:	64e3      	str	r3, [r4, #76]	; 0x4c
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, (uint8_t)(req->wLength));
 8002e96:	798a      	ldrb	r2, [r1, #6]
 8002e98:	4621      	mov	r1, r4
 8002e9a:	f000 fc9d 	bl	80037d8 <USBD_CtlPrepareRx>
  return USBD_OK;
 8002e9e:	2000      	movs	r0, #0
      break;
 8002ea0:	bd10      	pop	{r4, pc}
      USBD_CtlError (pdev, req);
 8002ea2:	f000 fa31 	bl	8003308 <USBD_CtlError>
      return USBD_FAIL; 
 8002ea6:	2002      	movs	r0, #2
 8002ea8:	bd10      	pop	{r4, pc}
    switch (req->bRequest)
 8002eaa:	784b      	ldrb	r3, [r1, #1]
 8002eac:	2b0a      	cmp	r3, #10
 8002eae:	d01f      	beq.n	8002ef0 <USBD_CUSTOM_HID_Setup+0xb4>
 8002eb0:	2b0b      	cmp	r3, #11
 8002eb2:	d024      	beq.n	8002efe <USBD_CUSTOM_HID_Setup+0xc2>
 8002eb4:	2b06      	cmp	r3, #6
 8002eb6:	d001      	beq.n	8002ebc <USBD_CUSTOM_HID_Setup+0x80>
  return USBD_OK;
 8002eb8:	2000      	movs	r0, #0
}
 8002eba:	bd10      	pop	{r4, pc}
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8002ebc:	884b      	ldrh	r3, [r1, #2]
 8002ebe:	0a1b      	lsrs	r3, r3, #8
 8002ec0:	2b22      	cmp	r3, #34	; 0x22
 8002ec2:	d007      	beq.n	8002ed4 <USBD_CUSTOM_HID_Setup+0x98>
      else if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8002ec4:	2b21      	cmp	r3, #33	; 0x21
 8002ec6:	d00d      	beq.n	8002ee4 <USBD_CUSTOM_HID_Setup+0xa8>
  uint8_t  *pbuf = NULL;
 8002ec8:	2100      	movs	r1, #0
  uint16_t len = 0;
 8002eca:	460a      	mov	r2, r1
      USBD_CtlSendData (pdev, 
 8002ecc:	f000 fc6f 	bl	80037ae <USBD_CtlSendData>
  return USBD_OK;
 8002ed0:	2000      	movs	r0, #0
      break;
 8002ed2:	bd10      	pop	{r4, pc}
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8002ed4:	88ca      	ldrh	r2, [r1, #6]
 8002ed6:	2a40      	cmp	r2, #64	; 0x40
 8002ed8:	bf28      	it	cs
 8002eda:	2240      	movcs	r2, #64	; 0x40
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8002edc:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8002ee0:	6819      	ldr	r1, [r3, #0]
 8002ee2:	e7f3      	b.n	8002ecc <USBD_CUSTOM_HID_Setup+0x90>
        len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8002ee4:	88ca      	ldrh	r2, [r1, #6]
 8002ee6:	2a09      	cmp	r2, #9
 8002ee8:	bf28      	it	cs
 8002eea:	2209      	movcs	r2, #9
        pbuf = USBD_CUSTOM_HID_Desc;   
 8002eec:	4907      	ldr	r1, [pc, #28]	; (8002f0c <USBD_CUSTOM_HID_Setup+0xd0>)
 8002eee:	e7ed      	b.n	8002ecc <USBD_CUSTOM_HID_Setup+0x90>
      USBD_CtlSendData (pdev,
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f104 0148 	add.w	r1, r4, #72	; 0x48
 8002ef6:	f000 fc5a 	bl	80037ae <USBD_CtlSendData>
  return USBD_OK;
 8002efa:	2000      	movs	r0, #0
      break;
 8002efc:	bd10      	pop	{r4, pc}
      hhid->AltSetting = (uint8_t)(req->wValue);
 8002efe:	788b      	ldrb	r3, [r1, #2]
 8002f00:	64a3      	str	r3, [r4, #72]	; 0x48
  return USBD_OK;
 8002f02:	2000      	movs	r0, #0
      break;
 8002f04:	bd10      	pop	{r4, pc}
  return USBD_OK;
 8002f06:	2000      	movs	r0, #0
 8002f08:	bd10      	pop	{r4, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000070 	.word	0x20000070

08002f10 <USBD_CUSTOM_HID_DeInit>:
{
 8002f10:	b510      	push	{r4, lr}
 8002f12:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8002f14:	2181      	movs	r1, #129	; 0x81
 8002f16:	f001 fe2c 	bl	8004b72 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	4620      	mov	r0, r4
 8002f1e:	f001 fe28 	bl	8004b72 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8002f22:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8002f26:	b153      	cbz	r3, 8002f3e <USBD_CUSTOM_HID_DeInit+0x2e>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002f28:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002f30:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8002f34:	f001 fe88 	bl	8004c48 <USBD_static_free>
    pdev->pClassData = NULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8002f3e:	2000      	movs	r0, #0
 8002f40:	bd10      	pop	{r4, pc}

08002f42 <USBD_CUSTOM_HID_Init>:
{
 8002f42:	b570      	push	{r4, r5, r6, lr}
 8002f44:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 8002f46:	2340      	movs	r3, #64	; 0x40
 8002f48:	2203      	movs	r2, #3
 8002f4a:	2181      	movs	r1, #129	; 0x81
 8002f4c:	f001 fe00 	bl	8004b50 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8002f50:	2340      	movs	r3, #64	; 0x40
 8002f52:	2203      	movs	r2, #3
 8002f54:	2101      	movs	r1, #1
 8002f56:	4620      	mov	r0, r4
 8002f58:	f001 fdfa 	bl	8004b50 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 8002f5c:	2054      	movs	r0, #84	; 0x54
 8002f5e:	f001 fe6f 	bl	8004c40 <USBD_static_malloc>
 8002f62:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8002f66:	b178      	cbz	r0, 8002f88 <USBD_CUSTOM_HID_Init+0x46>
 8002f68:	4605      	mov	r5, r0
    hhid->state = CUSTOM_HID_IDLE;
 8002f6a:	2600      	movs	r6, #0
 8002f6c:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8002f70:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	4798      	blx	r3
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf, 
 8002f78:	2340      	movs	r3, #64	; 0x40
 8002f7a:	462a      	mov	r2, r5
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	4620      	mov	r0, r4
 8002f80:	f001 fe50 	bl	8004c24 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8002f84:	4630      	mov	r0, r6
 8002f86:	bd70      	pop	{r4, r5, r6, pc}
    ret = 1; 
 8002f88:	2001      	movs	r0, #1
}
 8002f8a:	bd70      	pop	{r4, r5, r6, pc}

08002f8c <USBD_CUSTOM_HID_SendReport>:
{
 8002f8c:	b538      	push	{r3, r4, r5, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8002f8e:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 8002f92:	f890 41fc 	ldrb.w	r4, [r0, #508]	; 0x1fc
 8002f96:	2c03      	cmp	r4, #3
 8002f98:	d001      	beq.n	8002f9e <USBD_CUSTOM_HID_SendReport+0x12>
}
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	bd38      	pop	{r3, r4, r5, pc}
    if(hhid->state == CUSTOM_HID_IDLE)
 8002f9e:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f9      	bne.n	8002f9a <USBD_CUSTOM_HID_SendReport+0xe>
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	460a      	mov	r2, r1
      hhid->state = CUSTOM_HID_BUSY;
 8002faa:	2101      	movs	r1, #1
 8002fac:	f885 1050 	strb.w	r1, [r5, #80]	; 0x50
      USBD_LL_Transmit (pdev, 
 8002fb0:	2181      	movs	r1, #129	; 0x81
 8002fb2:	f001 fe29 	bl	8004c08 <USBD_LL_Transmit>
 8002fb6:	e7f0      	b.n	8002f9a <USBD_CUSTOM_HID_SendReport+0xe>

08002fb8 <USBD_CUSTOM_HID_DataOut>:
		{
 8002fb8:	b538      	push	{r3, r4, r5, lr}
 8002fba:	4605      	mov	r5, r0
		  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8002fbc:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
		  for(u8_sys_usbHID_i=0;u8_sys_usbHID_i<def_u8_USB_HID_LENGTH;u8_sys_usbHID_i++)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	4b1a      	ldr	r3, [pc, #104]	; (800302c <USBD_CUSTOM_HID_DataOut+0x74>)
 8002fc4:	701a      	strb	r2, [r3, #0]
 8002fc6:	e005      	b.n	8002fd4 <USBD_CUSTOM_HID_DataOut+0x1c>
			  u8_array_sys_usbHID__RX[u8_sys_usbHID_i]=hhid->Report_buf[u8_sys_usbHID_i];
 8002fc8:	5ce1      	ldrb	r1, [r4, r3]
 8002fca:	4a19      	ldr	r2, [pc, #100]	; (8003030 <USBD_CUSTOM_HID_DataOut+0x78>)
 8002fcc:	54d1      	strb	r1, [r2, r3]
		  for(u8_sys_usbHID_i=0;u8_sys_usbHID_i<def_u8_USB_HID_LENGTH;u8_sys_usbHID_i++)
 8002fce:	3301      	adds	r3, #1
 8002fd0:	4a16      	ldr	r2, [pc, #88]	; (800302c <USBD_CUSTOM_HID_DataOut+0x74>)
 8002fd2:	7013      	strb	r3, [r2, #0]
 8002fd4:	4b15      	ldr	r3, [pc, #84]	; (800302c <USBD_CUSTOM_HID_DataOut+0x74>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b3f      	cmp	r3, #63	; 0x3f
 8002fda:	d9f5      	bls.n	8002fc8 <USBD_CUSTOM_HID_DataOut+0x10>
				  (u8_array_sys_usbHID__RX[0]=='E')&&
 8002fdc:	4b14      	ldr	r3, [pc, #80]	; (8003030 <USBD_CUSTOM_HID_DataOut+0x78>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
		  if(
 8002fe0:	2b45      	cmp	r3, #69	; 0x45
 8002fe2:	d00e      	beq.n	8003002 <USBD_CUSTOM_HID_DataOut+0x4a>
			  USB_HID_QUERY_HANDLE();
 8002fe4:	f000 fe5a 	bl	8003c9c <USB_HID_QUERY_HANDLE>
		  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, u8_array_sys_usbHID__TX, def_u8_USB_HID_LENGTH);
 8002fe8:	2240      	movs	r2, #64	; 0x40
 8002fea:	4912      	ldr	r1, [pc, #72]	; (8003034 <USBD_CUSTOM_HID_DataOut+0x7c>)
 8002fec:	4812      	ldr	r0, [pc, #72]	; (8003038 <USBD_CUSTOM_HID_DataOut+0x80>)
 8002fee:	f7ff ffcd 	bl	8002f8c <USBD_CUSTOM_HID_SendReport>
		  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf,
 8002ff2:	2340      	movs	r3, #64	; 0x40
 8002ff4:	4622      	mov	r2, r4
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	4628      	mov	r0, r5
 8002ffa:	f001 fe13 	bl	8004c24 <USBD_LL_PrepareReceive>
		}
 8002ffe:	2000      	movs	r0, #0
 8003000:	bd38      	pop	{r3, r4, r5, pc}
				  (u8_array_sys_usbHID__RX[1]=='C')	//&&
 8003002:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <USBD_CUSTOM_HID_DataOut+0x78>)
 8003004:	785b      	ldrb	r3, [r3, #1]
				  (u8_array_sys_usbHID__RX[0]=='E')&&
 8003006:	2b43      	cmp	r3, #67	; 0x43
 8003008:	d1ec      	bne.n	8002fe4 <USBD_CUSTOM_HID_DataOut+0x2c>
			  for(u8_sys_usbHID_i=0;u8_sys_usbHID_i<def_u8_USB_HID_LENGTH;u8_sys_usbHID_i++)
 800300a:	2200      	movs	r2, #0
 800300c:	4b07      	ldr	r3, [pc, #28]	; (800302c <USBD_CUSTOM_HID_DataOut+0x74>)
 800300e:	701a      	strb	r2, [r3, #0]
 8003010:	e006      	b.n	8003020 <USBD_CUSTOM_HID_DataOut+0x68>
				  u8_array_sys_usbHID__TX[u8_sys_usbHID_i]=u8_array_sys_usbHID__RX[u8_sys_usbHID_i];
 8003012:	4a07      	ldr	r2, [pc, #28]	; (8003030 <USBD_CUSTOM_HID_DataOut+0x78>)
 8003014:	5cd1      	ldrb	r1, [r2, r3]
 8003016:	4a07      	ldr	r2, [pc, #28]	; (8003034 <USBD_CUSTOM_HID_DataOut+0x7c>)
 8003018:	54d1      	strb	r1, [r2, r3]
			  for(u8_sys_usbHID_i=0;u8_sys_usbHID_i<def_u8_USB_HID_LENGTH;u8_sys_usbHID_i++)
 800301a:	3301      	adds	r3, #1
 800301c:	4a03      	ldr	r2, [pc, #12]	; (800302c <USBD_CUSTOM_HID_DataOut+0x74>)
 800301e:	7013      	strb	r3, [r2, #0]
 8003020:	4b02      	ldr	r3, [pc, #8]	; (800302c <USBD_CUSTOM_HID_DataOut+0x74>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b3f      	cmp	r3, #63	; 0x3f
 8003026:	d9f4      	bls.n	8003012 <USBD_CUSTOM_HID_DataOut+0x5a>
 8003028:	e7de      	b.n	8002fe8 <USBD_CUSTOM_HID_DataOut+0x30>
 800302a:	bf00      	nop
 800302c:	20003e62 	.word	0x20003e62
 8003030:	20003e0c 	.word	0x20003e0c
 8003034:	20003dc0 	.word	0x20003dc0
 8003038:	20003ee4 	.word	0x20003ee4

0800303c <USBD_CUSTOM_HID_RegisterInterface>:
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 800303c:	b119      	cbz	r1, 8003046 <USBD_CUSTOM_HID_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 800303e:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8003042:	2000      	movs	r0, #0
 8003044:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8003046:	2002      	movs	r0, #2
  }
  
  return ret;
}
 8003048:	4770      	bx	lr

0800304a <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800304a:	b198      	cbz	r0, 8003074 <USBD_Init+0x2a>
{
 800304c:	b508      	push	{r3, lr}
 800304e:	4603      	mov	r3, r0
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8003050:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 8003054:	b110      	cbz	r0, 800305c <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8003056:	2000      	movs	r0, #0
 8003058:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800305c:	b109      	cbz	r1, 8003062 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 800305e:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
 8003062:	4618      	mov	r0, r3
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8003064:	2301      	movs	r3, #1
 8003066:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 800306a:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800306c:	f001 fd22 	bl	8004ab4 <USBD_LL_Init>
  
  return USBD_OK; 
 8003070:	2000      	movs	r0, #0
 8003072:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8003074:	2002      	movs	r0, #2
 8003076:	4770      	bx	lr

08003078 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8003078:	b119      	cbz	r1, 8003082 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800307a:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 800307e:	2000      	movs	r0, #0
 8003080:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8003082:	2002      	movs	r0, #2
  }
  
  return status;
}
 8003084:	4770      	bx	lr

08003086 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8003086:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8003088:	f001 fd54 	bl	8004b34 <USBD_LL_Start>
  
  return USBD_OK;  
}
 800308c:	2000      	movs	r0, #0
 800308e:	bd08      	pop	{r3, pc}

08003090 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003090:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8003092:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003096:	b123      	cbz	r3, 80030a2 <USBD_SetClassConfig+0x12>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4798      	blx	r3
 800309c:	b118      	cbz	r0, 80030a6 <USBD_SetClassConfig+0x16>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800309e:	2002      	movs	r0, #2
 80030a0:	bd08      	pop	{r3, pc}
 80030a2:	2002      	movs	r0, #2
 80030a4:	bd08      	pop	{r3, pc}
    {
      ret = USBD_OK;
 80030a6:	2000      	movs	r0, #0
    }
  }
  return ret; 
}
 80030a8:	bd08      	pop	{r3, pc}

080030aa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80030aa:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80030ac:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4798      	blx	r3
  return USBD_OK;
}
 80030b4:	2000      	movs	r0, #0
 80030b6:	bd08      	pop	{r3, pc}

080030b8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80030b8:	b538      	push	{r3, r4, r5, lr}
 80030ba:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80030bc:	f500 7502 	add.w	r5, r0, #520	; 0x208
 80030c0:	4628      	mov	r0, r5
 80030c2:	f000 f90d 	bl	80032e0 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80030c6:	2301      	movs	r3, #1
 80030c8:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80030cc:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80030d0:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 80030d4:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
 80030d8:	f001 031f 	and.w	r3, r1, #31
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d00e      	beq.n	80030fe <USBD_LL_SetupStage+0x46>
 80030e0:	b13b      	cbz	r3, 80030f2 <USBD_LL_SetupStage+0x3a>
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d010      	beq.n	8003108 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80030e6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80030ea:	4620      	mov	r0, r4
 80030ec:	f001 fd4f 	bl	8004b8e <USBD_LL_StallEP>
    break;
 80030f0:	e003      	b.n	80030fa <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 80030f2:	4629      	mov	r1, r5
 80030f4:	4620      	mov	r0, r4
 80030f6:	f000 fa71 	bl	80035dc <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 80030fa:	2000      	movs	r0, #0
 80030fc:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 80030fe:	4629      	mov	r1, r5
 8003100:	4620      	mov	r0, r4
 8003102:	f000 fa8f 	bl	8003624 <USBD_StdItfReq>
    break;
 8003106:	e7f8      	b.n	80030fa <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8003108:	4629      	mov	r1, r5
 800310a:	4620      	mov	r0, r4
 800310c:	f000 faa6 	bl	800365c <USBD_StdEPReq>
    break;
 8003110:	e7f3      	b.n	80030fa <USBD_LL_SetupStage+0x42>

08003112 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8003112:	b510      	push	{r4, lr}
 8003114:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8003116:	bb19      	cbnz	r1, 8003160 <USBD_LL_DataOutStage+0x4e>
 8003118:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800311a:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 800311e:	2a03      	cmp	r2, #3
 8003120:	d127      	bne.n	8003172 <USBD_LL_DataOutStage+0x60>
    {
      if(pep->rem_length > pep->maxpacket)
 8003122:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 8003126:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 800312a:	4291      	cmp	r1, r2
 800312c:	d80b      	bhi.n	8003146 <USBD_LL_DataOutStage+0x34>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800312e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	b11b      	cbz	r3, 800313e <USBD_LL_DataOutStage+0x2c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003136:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800313a:	2a03      	cmp	r2, #3
 800313c:	d00e      	beq.n	800315c <USBD_LL_DataOutStage+0x4a>
        {
          pdev->pClass->EP0_RxReady(pdev); 
        }
        USBD_CtlSendStatus(pdev);
 800313e:	4620      	mov	r0, r4
 8003140:	f000 fb61 	bl	8003806 <USBD_CtlSendStatus>
 8003144:	e015      	b.n	8003172 <USBD_LL_DataOutStage+0x60>
        pep->rem_length -=  pep->maxpacket;
 8003146:	1a89      	subs	r1, r1, r2
 8003148:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
                            MIN(pep->rem_length ,pep->maxpacket));
 800314c:	428a      	cmp	r2, r1
 800314e:	bf28      	it	cs
 8003150:	460a      	movcs	r2, r1
        USBD_CtlContinueRx (pdev, 
 8003152:	b292      	uxth	r2, r2
 8003154:	4619      	mov	r1, r3
 8003156:	f000 fb4e 	bl	80037f6 <USBD_CtlContinueRx>
 800315a:	e00a      	b.n	8003172 <USBD_LL_DataOutStage+0x60>
          pdev->pClass->EP0_RxReady(pdev); 
 800315c:	4798      	blx	r3
 800315e:	e7ee      	b.n	800313e <USBD_LL_DataOutStage+0x2c>
 8003160:	460a      	mov	r2, r1
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8003162:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	b11b      	cbz	r3, 8003172 <USBD_LL_DataOutStage+0x60>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800316a:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 800316e:	2903      	cmp	r1, #3
 8003170:	d001      	beq.n	8003176 <USBD_LL_DataOutStage+0x64>
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8003172:	2000      	movs	r0, #0
 8003174:	bd10      	pop	{r4, pc}
    pdev->pClass->DataOut(pdev, epnum); 
 8003176:	4611      	mov	r1, r2
 8003178:	4798      	blx	r3
 800317a:	e7fa      	b.n	8003172 <USBD_LL_DataOutStage+0x60>

0800317c <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800317c:	b510      	push	{r4, lr}
 800317e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8003180:	2900      	cmp	r1, #0
 8003182:	d147      	bne.n	8003214 <USBD_LL_DataInStage+0x98>
 8003184:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8003186:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 800318a:	2a02      	cmp	r2, #2
 800318c:	d005      	beq.n	800319a <USBD_LL_DataInStage+0x1e>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800318e:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8003192:	2b01      	cmp	r3, #1
 8003194:	d03a      	beq.n	800320c <USBD_LL_DataInStage+0x90>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8003196:	2000      	movs	r0, #0
 8003198:	bd10      	pop	{r4, pc}
      if(pep->rem_length > pep->maxpacket)
 800319a:	69c1      	ldr	r1, [r0, #28]
 800319c:	6a02      	ldr	r2, [r0, #32]
 800319e:	4291      	cmp	r1, r2
 80031a0:	d817      	bhi.n	80031d2 <USBD_LL_DataInStage+0x56>
        if((pep->total_length % pep->maxpacket == 0) &&
 80031a2:	6981      	ldr	r1, [r0, #24]
 80031a4:	fbb1 f3f2 	udiv	r3, r1, r2
 80031a8:	fb02 1313 	mls	r3, r2, r3, r1
 80031ac:	b92b      	cbnz	r3, 80031ba <USBD_LL_DataInStage+0x3e>
 80031ae:	428a      	cmp	r2, r1
 80031b0:	d803      	bhi.n	80031ba <USBD_LL_DataInStage+0x3e>
             (pep->total_length < pdev->ep0_data_len ))
 80031b2:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 80031b6:	4299      	cmp	r1, r3
 80031b8:	d318      	bcc.n	80031ec <USBD_LL_DataInStage+0x70>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80031ba:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	b11b      	cbz	r3, 80031ca <USBD_LL_DataInStage+0x4e>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80031c2:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80031c6:	2a03      	cmp	r2, #3
 80031c8:	d01d      	beq.n	8003206 <USBD_LL_DataInStage+0x8a>
          USBD_CtlReceiveStatus(pdev);
 80031ca:	4620      	mov	r0, r4
 80031cc:	f000 fb26 	bl	800381c <USBD_CtlReceiveStatus>
 80031d0:	e7dd      	b.n	800318e <USBD_LL_DataInStage+0x12>
        pep->rem_length -=  pep->maxpacket;
 80031d2:	1a8a      	subs	r2, r1, r2
 80031d4:	61c2      	str	r2, [r0, #28]
        USBD_CtlContinueSendData (pdev, 
 80031d6:	b292      	uxth	r2, r2
 80031d8:	4619      	mov	r1, r3
 80031da:	f000 faf5 	bl	80037c8 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev,
 80031de:	2300      	movs	r3, #0
 80031e0:	461a      	mov	r2, r3
 80031e2:	4619      	mov	r1, r3
 80031e4:	4620      	mov	r0, r4
 80031e6:	f001 fd1d 	bl	8004c24 <USBD_LL_PrepareReceive>
 80031ea:	e7d0      	b.n	800318e <USBD_LL_DataInStage+0x12>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80031ec:	2200      	movs	r2, #0
 80031ee:	4611      	mov	r1, r2
 80031f0:	f000 faea 	bl	80037c8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80031f4:	2100      	movs	r1, #0
 80031f6:	f8c4 11f8 	str.w	r1, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 80031fa:	460b      	mov	r3, r1
 80031fc:	460a      	mov	r2, r1
 80031fe:	4620      	mov	r0, r4
 8003200:	f001 fd10 	bl	8004c24 <USBD_LL_PrepareReceive>
 8003204:	e7c3      	b.n	800318e <USBD_LL_DataInStage+0x12>
            pdev->pClass->EP0_TxSent(pdev); 
 8003206:	4620      	mov	r0, r4
 8003208:	4798      	blx	r3
 800320a:	e7de      	b.n	80031ca <USBD_LL_DataInStage+0x4e>
      pdev->dev_test_mode = 0;
 800320c:	2300      	movs	r3, #0
 800320e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 8003212:	e7c0      	b.n	8003196 <USBD_LL_DataInStage+0x1a>
 8003214:	460a      	mov	r2, r1
  else if((pdev->pClass->DataIn != NULL)&& 
 8003216:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0ba      	beq.n	8003196 <USBD_LL_DataInStage+0x1a>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003220:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8003224:	2903      	cmp	r1, #3
 8003226:	d1b6      	bne.n	8003196 <USBD_LL_DataInStage+0x1a>
    pdev->pClass->DataIn(pdev, epnum); 
 8003228:	4611      	mov	r1, r2
 800322a:	4798      	blx	r3
 800322c:	e7b3      	b.n	8003196 <USBD_LL_DataInStage+0x1a>

0800322e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800322e:	b538      	push	{r3, r4, r5, lr}
 8003230:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8003232:	2340      	movs	r3, #64	; 0x40
 8003234:	2200      	movs	r2, #0
 8003236:	4611      	mov	r1, r2
 8003238:	f001 fc8a 	bl	8004b50 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800323c:	2540      	movs	r5, #64	; 0x40
 800323e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8003242:	462b      	mov	r3, r5
 8003244:	2200      	movs	r2, #0
 8003246:	2180      	movs	r1, #128	; 0x80
 8003248:	4620      	mov	r0, r4
 800324a:	f001 fc81 	bl	8004b50 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800324e:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003250:	2301      	movs	r3, #1
 8003252:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8003256:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800325a:	b12b      	cbz	r3, 8003268 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800325c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	7921      	ldrb	r1, [r4, #4]
 8003264:	4620      	mov	r0, r4
 8003266:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8003268:	2000      	movs	r0, #0
 800326a:	bd38      	pop	{r3, r4, r5, pc}

0800326c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800326c:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800326e:	2000      	movs	r0, #0
 8003270:	4770      	bx	lr

08003272 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8003272:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003276:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800327a:	2304      	movs	r3, #4
 800327c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8003280:	2000      	movs	r0, #0
 8003282:	4770      	bx	lr

08003284 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8003284:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8003288:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800328c:	2000      	movs	r0, #0
 800328e:	4770      	bx	lr

08003290 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8003290:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8003292:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003296:	2b03      	cmp	r3, #3
 8003298:	d001      	beq.n	800329e <USBD_LL_SOF+0xe>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 800329a:	2000      	movs	r0, #0
 800329c:	bd08      	pop	{r3, pc}
    if(pdev->pClass->SOF != NULL)
 800329e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0f8      	beq.n	800329a <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 80032a8:	4798      	blx	r3
 80032aa:	e7f6      	b.n	800329a <USBD_LL_SOF+0xa>

080032ac <USBD_GetLen>:
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;
 80032ac:	2300      	movs	r3, #0

    while (*buf != '\0') 
 80032ae:	e002      	b.n	80032b6 <USBD_GetLen+0xa>
    {
        len++;
 80032b0:	3301      	adds	r3, #1
 80032b2:	b2db      	uxtb	r3, r3
        buf++;
 80032b4:	3001      	adds	r0, #1
    while (*buf != '\0') 
 80032b6:	7802      	ldrb	r2, [r0, #0]
 80032b8:	2a00      	cmp	r2, #0
 80032ba:	d1f9      	bne.n	80032b0 <USBD_GetLen+0x4>
    }

    return len;
}
 80032bc:	4618      	mov	r0, r3
 80032be:	4770      	bx	lr

080032c0 <USBD_SetFeature>:
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80032c0:	884b      	ldrh	r3, [r1, #2]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d000      	beq.n	80032c8 <USBD_SetFeature+0x8>
 80032c6:	4770      	bx	lr
{
 80032c8:	b510      	push	{r4, lr}
 80032ca:	4604      	mov	r4, r0
    pdev->dev_remote_wakeup = 1;  
 80032cc:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 80032d0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 80032d8:	4620      	mov	r0, r4
 80032da:	f000 fa94 	bl	8003806 <USBD_CtlSendStatus>
 80032de:	bd10      	pop	{r4, pc}

080032e0 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 80032e0:	780b      	ldrb	r3, [r1, #0]
 80032e2:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80032e4:	784b      	ldrb	r3, [r1, #1]
 80032e6:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80032e8:	788b      	ldrb	r3, [r1, #2]
 80032ea:	78ca      	ldrb	r2, [r1, #3]
 80032ec:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80032f0:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80032f2:	790b      	ldrb	r3, [r1, #4]
 80032f4:	794a      	ldrb	r2, [r1, #5]
 80032f6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80032fa:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80032fc:	798b      	ldrb	r3, [r1, #6]
 80032fe:	79ca      	ldrb	r2, [r1, #7]
 8003300:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003304:	80c3      	strh	r3, [r0, #6]
 8003306:	4770      	bx	lr

08003308 <USBD_CtlError>:
{
 8003308:	b510      	push	{r4, lr}
 800330a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 800330c:	2180      	movs	r1, #128	; 0x80
 800330e:	f001 fc3e 	bl	8004b8e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8003312:	2100      	movs	r1, #0
 8003314:	4620      	mov	r0, r4
 8003316:	f001 fc3a 	bl	8004b8e <USBD_LL_StallEP>
 800331a:	bd10      	pop	{r4, pc}

0800331c <USBD_GetDescriptor>:
{
 800331c:	b530      	push	{r4, r5, lr}
 800331e:	b083      	sub	sp, #12
 8003320:	4604      	mov	r4, r0
 8003322:	460d      	mov	r5, r1
  switch (req->wValue >> 8)
 8003324:	8849      	ldrh	r1, [r1, #2]
 8003326:	0a0b      	lsrs	r3, r1, #8
 8003328:	3b01      	subs	r3, #1
 800332a:	2b06      	cmp	r3, #6
 800332c:	f200 8084 	bhi.w	8003438 <USBD_GetDescriptor+0x11c>
 8003330:	e8df f003 	tbb	[pc, r3]
 8003334:	82271304 	.word	0x82271304
 8003338:	6682      	.short	0x6682
 800333a:	73          	.byte	0x73
 800333b:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800333c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f10d 0106 	add.w	r1, sp, #6
 8003346:	7c00      	ldrb	r0, [r0, #16]
 8003348:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 800334a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800334e:	b112      	cbz	r2, 8003356 <USBD_GetDescriptor+0x3a>
 8003350:	88eb      	ldrh	r3, [r5, #6]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d174      	bne.n	8003440 <USBD_GetDescriptor+0x124>
}
 8003356:	b003      	add	sp, #12
 8003358:	bd30      	pop	{r4, r5, pc}
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800335a:	7c03      	ldrb	r3, [r0, #16]
 800335c:	b943      	cbnz	r3, 8003370 <USBD_GetDescriptor+0x54>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800335e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003364:	f10d 0006 	add.w	r0, sp, #6
 8003368:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800336a:	2302      	movs	r3, #2
 800336c:	7043      	strb	r3, [r0, #1]
 800336e:	e7ec      	b.n	800334a <USBD_GetDescriptor+0x2e>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003370:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003376:	f10d 0006 	add.w	r0, sp, #6
 800337a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800337c:	2302      	movs	r3, #2
 800337e:	7043      	strb	r3, [r0, #1]
 8003380:	e7e3      	b.n	800334a <USBD_GetDescriptor+0x2e>
    switch ((uint8_t)(req->wValue))
 8003382:	b2c9      	uxtb	r1, r1
 8003384:	2905      	cmp	r1, #5
 8003386:	d834      	bhi.n	80033f2 <USBD_GetDescriptor+0xd6>
 8003388:	e8df f001 	tbb	[pc, r1]
 800338c:	1b130b03 	.word	0x1b130b03
 8003390:	2b23      	.short	0x2b23
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8003392:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f10d 0106 	add.w	r1, sp, #6
 800339c:	7c00      	ldrb	r0, [r0, #16]
 800339e:	4798      	blx	r3
      break;
 80033a0:	e7d3      	b.n	800334a <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80033a2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f10d 0106 	add.w	r1, sp, #6
 80033ac:	7c00      	ldrb	r0, [r0, #16]
 80033ae:	4798      	blx	r3
      break;
 80033b0:	e7cb      	b.n	800334a <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80033b2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f10d 0106 	add.w	r1, sp, #6
 80033bc:	7c00      	ldrb	r0, [r0, #16]
 80033be:	4798      	blx	r3
      break;
 80033c0:	e7c3      	b.n	800334a <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80033c2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	f10d 0106 	add.w	r1, sp, #6
 80033cc:	7c00      	ldrb	r0, [r0, #16]
 80033ce:	4798      	blx	r3
      break;
 80033d0:	e7bb      	b.n	800334a <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80033d2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	f10d 0106 	add.w	r1, sp, #6
 80033dc:	7c00      	ldrb	r0, [r0, #16]
 80033de:	4798      	blx	r3
      break;
 80033e0:	e7b3      	b.n	800334a <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80033e2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	f10d 0106 	add.w	r1, sp, #6
 80033ec:	7c00      	ldrb	r0, [r0, #16]
 80033ee:	4798      	blx	r3
      break;
 80033f0:	e7ab      	b.n	800334a <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
 80033f2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80033f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f8:	f10d 0206 	add.w	r2, sp, #6
 80033fc:	4798      	blx	r3
      break;
 80033fe:	e7a4      	b.n	800334a <USBD_GetDescriptor+0x2e>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003400:	7c03      	ldrb	r3, [r0, #16]
 8003402:	b933      	cbnz	r3, 8003412 <USBD_GetDescriptor+0xf6>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003404:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340a:	f10d 0006 	add.w	r0, sp, #6
 800340e:	4798      	blx	r3
      break;
 8003410:	e79b      	b.n	800334a <USBD_GetDescriptor+0x2e>
      USBD_CtlError(pdev , req);
 8003412:	4629      	mov	r1, r5
 8003414:	f7ff ff78 	bl	8003308 <USBD_CtlError>
      return;
 8003418:	e79d      	b.n	8003356 <USBD_GetDescriptor+0x3a>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800341a:	7c03      	ldrb	r3, [r0, #16]
 800341c:	b943      	cbnz	r3, 8003430 <USBD_GetDescriptor+0x114>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800341e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003424:	f10d 0006 	add.w	r0, sp, #6
 8003428:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800342a:	2307      	movs	r3, #7
 800342c:	7043      	strb	r3, [r0, #1]
      break; 
 800342e:	e78c      	b.n	800334a <USBD_GetDescriptor+0x2e>
      USBD_CtlError(pdev , req);
 8003430:	4629      	mov	r1, r5
 8003432:	f7ff ff69 	bl	8003308 <USBD_CtlError>
      return;
 8003436:	e78e      	b.n	8003356 <USBD_GetDescriptor+0x3a>
     USBD_CtlError(pdev , req);
 8003438:	4629      	mov	r1, r5
 800343a:	f7ff ff65 	bl	8003308 <USBD_CtlError>
    return;
 800343e:	e78a      	b.n	8003356 <USBD_GetDescriptor+0x3a>
    len = MIN(len , req->wLength);
 8003440:	429a      	cmp	r2, r3
 8003442:	bf28      	it	cs
 8003444:	461a      	movcs	r2, r3
 8003446:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 800344a:	4601      	mov	r1, r0
 800344c:	4620      	mov	r0, r4
 800344e:	f000 f9ae 	bl	80037ae <USBD_CtlSendData>
 8003452:	e780      	b.n	8003356 <USBD_GetDescriptor+0x3a>

08003454 <USBD_SetAddress>:
{
 8003454:	b538      	push	{r3, r4, r5, lr}
 8003456:	4604      	mov	r4, r0
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8003458:	888b      	ldrh	r3, [r1, #4]
 800345a:	b9e3      	cbnz	r3, 8003496 <USBD_SetAddress+0x42>
 800345c:	88cb      	ldrh	r3, [r1, #6]
 800345e:	b9d3      	cbnz	r3, 8003496 <USBD_SetAddress+0x42>
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8003460:	788d      	ldrb	r5, [r1, #2]
 8003462:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003466:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800346a:	2b03      	cmp	r3, #3
 800346c:	d00c      	beq.n	8003488 <USBD_SetAddress+0x34>
      pdev->dev_address = dev_addr;
 800346e:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8003472:	4629      	mov	r1, r5
 8003474:	f001 fbba 	bl	8004bec <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8003478:	4620      	mov	r0, r4
 800347a:	f000 f9c4 	bl	8003806 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 800347e:	b135      	cbz	r5, 800348e <USBD_SetAddress+0x3a>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8003480:	2302      	movs	r3, #2
 8003482:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8003486:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev , req);
 8003488:	f7ff ff3e 	bl	8003308 <USBD_CtlError>
 800348c:	bd38      	pop	{r3, r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800348e:	2301      	movs	r3, #1
 8003490:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8003494:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);                        
 8003496:	4620      	mov	r0, r4
 8003498:	f7ff ff36 	bl	8003308 <USBD_CtlError>
 800349c:	bd38      	pop	{r3, r4, r5, pc}
	...

080034a0 <USBD_SetConfig>:
{
 80034a0:	b538      	push	{r3, r4, r5, lr}
 80034a2:	4604      	mov	r4, r0
 80034a4:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);                 
 80034a6:	7889      	ldrb	r1, [r1, #2]
 80034a8:	4b25      	ldr	r3, [pc, #148]	; (8003540 <USBD_SetConfig+0xa0>)
 80034aa:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80034ac:	2901      	cmp	r1, #1
 80034ae:	d809      	bhi.n	80034c4 <USBD_SetConfig+0x24>
    switch (pdev->dev_state) 
 80034b0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d009      	beq.n	80034cc <USBD_SetConfig+0x2c>
 80034b8:	2b03      	cmp	r3, #3
 80034ba:	d01c      	beq.n	80034f6 <USBD_SetConfig+0x56>
       USBD_CtlError(pdev , req);                     
 80034bc:	4629      	mov	r1, r5
 80034be:	f7ff ff23 	bl	8003308 <USBD_CtlError>
 80034c2:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);                              
 80034c4:	4629      	mov	r1, r5
 80034c6:	f7ff ff1f 	bl	8003308 <USBD_CtlError>
 80034ca:	bd38      	pop	{r3, r4, r5, pc}
      if (cfgidx) 
 80034cc:	b181      	cbz	r1, 80034f0 <USBD_SetConfig+0x50>
        pdev->dev_config = cfgidx;
 80034ce:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80034d0:	2303      	movs	r3, #3
 80034d2:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80034d6:	f7ff fddb 	bl	8003090 <USBD_SetClassConfig>
 80034da:	2802      	cmp	r0, #2
 80034dc:	d003      	beq.n	80034e6 <USBD_SetConfig+0x46>
        USBD_CtlSendStatus(pdev);
 80034de:	4620      	mov	r0, r4
 80034e0:	f000 f991 	bl	8003806 <USBD_CtlSendStatus>
 80034e4:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev , req);  
 80034e6:	4629      	mov	r1, r5
 80034e8:	4620      	mov	r0, r4
 80034ea:	f7ff ff0d 	bl	8003308 <USBD_CtlError>
          return;
 80034ee:	bd38      	pop	{r3, r4, r5, pc}
         USBD_CtlSendStatus(pdev);
 80034f0:	f000 f989 	bl	8003806 <USBD_CtlSendStatus>
 80034f4:	bd38      	pop	{r3, r4, r5, pc}
      if (cfgidx == 0) 
 80034f6:	b189      	cbz	r1, 800351c <USBD_SetConfig+0x7c>
      else  if (cfgidx != pdev->dev_config) 
 80034f8:	6843      	ldr	r3, [r0, #4]
 80034fa:	4299      	cmp	r1, r3
 80034fc:	d01d      	beq.n	800353a <USBD_SetConfig+0x9a>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80034fe:	b2d9      	uxtb	r1, r3
 8003500:	f7ff fdd3 	bl	80030aa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8003504:	4b0e      	ldr	r3, [pc, #56]	; (8003540 <USBD_SetConfig+0xa0>)
 8003506:	7819      	ldrb	r1, [r3, #0]
 8003508:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800350a:	4620      	mov	r0, r4
 800350c:	f7ff fdc0 	bl	8003090 <USBD_SetClassConfig>
 8003510:	2802      	cmp	r0, #2
 8003512:	d00d      	beq.n	8003530 <USBD_SetConfig+0x90>
        USBD_CtlSendStatus(pdev);
 8003514:	4620      	mov	r0, r4
 8003516:	f000 f976 	bl	8003806 <USBD_CtlSendStatus>
 800351a:	bd38      	pop	{r3, r4, r5, pc}
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800351c:	2302      	movs	r3, #2
 800351e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8003522:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8003524:	f7ff fdc1 	bl	80030aa <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8003528:	4620      	mov	r0, r4
 800352a:	f000 f96c 	bl	8003806 <USBD_CtlSendStatus>
 800352e:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev , req);  
 8003530:	4629      	mov	r1, r5
 8003532:	4620      	mov	r0, r4
 8003534:	f7ff fee8 	bl	8003308 <USBD_CtlError>
          return;
 8003538:	bd38      	pop	{r3, r4, r5, pc}
        USBD_CtlSendStatus(pdev);
 800353a:	f000 f964 	bl	8003806 <USBD_CtlSendStatus>
 800353e:	bd38      	pop	{r3, r4, r5, pc}
 8003540:	2000012c 	.word	0x2000012c

08003544 <USBD_GetConfig>:
{
 8003544:	b508      	push	{r3, lr}
  if (req->wLength != 1) 
 8003546:	88cb      	ldrh	r3, [r1, #6]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d108      	bne.n	800355e <USBD_GetConfig+0x1a>
    switch (pdev->dev_state )  
 800354c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003550:	2b02      	cmp	r3, #2
 8003552:	d007      	beq.n	8003564 <USBD_GetConfig+0x20>
 8003554:	2b03      	cmp	r3, #3
 8003556:	d00d      	beq.n	8003574 <USBD_GetConfig+0x30>
       USBD_CtlError(pdev , req);
 8003558:	f7ff fed6 	bl	8003308 <USBD_CtlError>
 800355c:	bd08      	pop	{r3, pc}
     USBD_CtlError(pdev , req);
 800355e:	f7ff fed3 	bl	8003308 <USBD_CtlError>
 8003562:	bd08      	pop	{r3, pc}
      pdev->dev_default_config = 0;
 8003564:	4601      	mov	r1, r0
 8003566:	2300      	movs	r3, #0
 8003568:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 800356c:	2201      	movs	r2, #1
 800356e:	f000 f91e 	bl	80037ae <USBD_CtlSendData>
      break;
 8003572:	bd08      	pop	{r3, pc}
      USBD_CtlSendData (pdev, 
 8003574:	2201      	movs	r2, #1
 8003576:	1d01      	adds	r1, r0, #4
 8003578:	f000 f919 	bl	80037ae <USBD_CtlSendData>
      break;
 800357c:	bd08      	pop	{r3, pc}

0800357e <USBD_GetStatus>:
{
 800357e:	b508      	push	{r3, lr}
  switch (pdev->dev_state) 
 8003580:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003584:	3b02      	subs	r3, #2
 8003586:	2b01      	cmp	r3, #1
 8003588:	d80c      	bhi.n	80035a4 <USBD_GetStatus+0x26>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800358a:	2301      	movs	r3, #1
 800358c:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 800358e:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8003592:	b10b      	cbz	r3, 8003598 <USBD_GetStatus+0x1a>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8003594:	2303      	movs	r3, #3
 8003596:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8003598:	2202      	movs	r2, #2
 800359a:	f100 010c 	add.w	r1, r0, #12
 800359e:	f000 f906 	bl	80037ae <USBD_CtlSendData>
    break;
 80035a2:	bd08      	pop	{r3, pc}
    USBD_CtlError(pdev , req);                        
 80035a4:	f7ff feb0 	bl	8003308 <USBD_CtlError>
 80035a8:	bd08      	pop	{r3, pc}

080035aa <USBD_ClrFeature>:
{
 80035aa:	b510      	push	{r4, lr}
 80035ac:	4604      	mov	r4, r0
  switch (pdev->dev_state)
 80035ae:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80035b2:	3b02      	subs	r3, #2
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d80e      	bhi.n	80035d6 <USBD_ClrFeature+0x2c>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80035b8:	884b      	ldrh	r3, [r1, #2]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d000      	beq.n	80035c0 <USBD_ClrFeature+0x16>
 80035be:	bd10      	pop	{r4, pc}
      pdev->dev_remote_wakeup = 0; 
 80035c0:	2300      	movs	r3, #0
 80035c2:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80035c6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80035ce:	4620      	mov	r0, r4
 80035d0:	f000 f919 	bl	8003806 <USBD_CtlSendStatus>
 80035d4:	bd10      	pop	{r4, pc}
     USBD_CtlError(pdev , req);
 80035d6:	f7ff fe97 	bl	8003308 <USBD_CtlError>
}
 80035da:	e7f0      	b.n	80035be <USBD_ClrFeature+0x14>

080035dc <USBD_StdDevReq>:
{
 80035dc:	b508      	push	{r3, lr}
  switch (req->bRequest) 
 80035de:	784b      	ldrb	r3, [r1, #1]
 80035e0:	2b09      	cmp	r3, #9
 80035e2:	d81c      	bhi.n	800361e <USBD_StdDevReq+0x42>
 80035e4:	e8df f003 	tbb	[pc, r3]
 80035e8:	151b1812 	.word	0x151b1812
 80035ec:	1b05091b 	.word	0x1b05091b
 80035f0:	0c0f      	.short	0x0c0f
    USBD_GetDescriptor (pdev, req) ;
 80035f2:	f7ff fe93 	bl	800331c <USBD_GetDescriptor>
}
 80035f6:	2000      	movs	r0, #0
 80035f8:	bd08      	pop	{r3, pc}
    USBD_SetAddress(pdev, req);
 80035fa:	f7ff ff2b 	bl	8003454 <USBD_SetAddress>
    break;
 80035fe:	e7fa      	b.n	80035f6 <USBD_StdDevReq+0x1a>
    USBD_SetConfig (pdev , req);
 8003600:	f7ff ff4e 	bl	80034a0 <USBD_SetConfig>
    break;
 8003604:	e7f7      	b.n	80035f6 <USBD_StdDevReq+0x1a>
    USBD_GetConfig (pdev , req);
 8003606:	f7ff ff9d 	bl	8003544 <USBD_GetConfig>
    break;
 800360a:	e7f4      	b.n	80035f6 <USBD_StdDevReq+0x1a>
    USBD_GetStatus (pdev , req);
 800360c:	f7ff ffb7 	bl	800357e <USBD_GetStatus>
    break;
 8003610:	e7f1      	b.n	80035f6 <USBD_StdDevReq+0x1a>
    USBD_SetFeature (pdev , req);    
 8003612:	f7ff fe55 	bl	80032c0 <USBD_SetFeature>
    break;
 8003616:	e7ee      	b.n	80035f6 <USBD_StdDevReq+0x1a>
    USBD_ClrFeature (pdev , req);
 8003618:	f7ff ffc7 	bl	80035aa <USBD_ClrFeature>
    break;
 800361c:	e7eb      	b.n	80035f6 <USBD_StdDevReq+0x1a>
    USBD_CtlError(pdev , req);
 800361e:	f7ff fe73 	bl	8003308 <USBD_CtlError>
    break;
 8003622:	e7e8      	b.n	80035f6 <USBD_StdDevReq+0x1a>

08003624 <USBD_StdItfReq>:
{
 8003624:	b538      	push	{r3, r4, r5, lr}
 8003626:	4604      	mov	r4, r0
 8003628:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 800362a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800362e:	2b03      	cmp	r3, #3
 8003630:	d111      	bne.n	8003656 <USBD_StdItfReq+0x32>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8003632:	790b      	ldrb	r3, [r1, #4]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d903      	bls.n	8003640 <USBD_StdItfReq+0x1c>
       USBD_CtlError(pdev , req);
 8003638:	f7ff fe66 	bl	8003308 <USBD_CtlError>
}
 800363c:	2000      	movs	r0, #0
 800363e:	bd38      	pop	{r3, r4, r5, pc}
      pdev->pClass->Setup (pdev, req); 
 8003640:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8003648:	88eb      	ldrh	r3, [r5, #6]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f6      	bne.n	800363c <USBD_StdItfReq+0x18>
         USBD_CtlSendStatus(pdev);
 800364e:	4620      	mov	r0, r4
 8003650:	f000 f8d9 	bl	8003806 <USBD_CtlSendStatus>
 8003654:	e7f2      	b.n	800363c <USBD_StdItfReq+0x18>
     USBD_CtlError(pdev , req);
 8003656:	f7ff fe57 	bl	8003308 <USBD_CtlError>
    break;
 800365a:	e7ef      	b.n	800363c <USBD_StdItfReq+0x18>

0800365c <USBD_StdEPReq>:
{
 800365c:	b538      	push	{r3, r4, r5, lr}
 800365e:	4605      	mov	r5, r0
 8003660:	460c      	mov	r4, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8003662:	888a      	ldrh	r2, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8003664:	780b      	ldrb	r3, [r1, #0]
 8003666:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800366a:	2b20      	cmp	r3, #32
 800366c:	d011      	beq.n	8003692 <USBD_StdEPReq+0x36>
 800366e:	b2d1      	uxtb	r1, r2
  switch (req->bRequest) 
 8003670:	7863      	ldrb	r3, [r4, #1]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d02b      	beq.n	80036ce <USBD_StdEPReq+0x72>
 8003676:	2b00      	cmp	r3, #0
 8003678:	d04d      	beq.n	8003716 <USBD_StdEPReq+0xba>
 800367a:	2b03      	cmp	r3, #3
 800367c:	d10d      	bne.n	800369a <USBD_StdEPReq+0x3e>
    switch (pdev->dev_state) 
 800367e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003682:	2b02      	cmp	r3, #2
 8003684:	d00b      	beq.n	800369e <USBD_StdEPReq+0x42>
 8003686:	2b03      	cmp	r3, #3
 8003688:	d010      	beq.n	80036ac <USBD_StdEPReq+0x50>
      USBD_CtlError(pdev , req);
 800368a:	4621      	mov	r1, r4
 800368c:	f7ff fe3c 	bl	8003308 <USBD_CtlError>
      break;    
 8003690:	e003      	b.n	800369a <USBD_StdEPReq+0x3e>
    pdev->pClass->Setup (pdev, req);
 8003692:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	4798      	blx	r3
}
 800369a:	2000      	movs	r0, #0
 800369c:	bd38      	pop	{r3, r4, r5, pc}
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800369e:	2900      	cmp	r1, #0
 80036a0:	d0fb      	beq.n	800369a <USBD_StdEPReq+0x3e>
 80036a2:	2980      	cmp	r1, #128	; 0x80
 80036a4:	d0f9      	beq.n	800369a <USBD_StdEPReq+0x3e>
        USBD_LL_StallEP(pdev , ep_addr);
 80036a6:	f001 fa72 	bl	8004b8e <USBD_LL_StallEP>
 80036aa:	e7f6      	b.n	800369a <USBD_StdEPReq+0x3e>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80036ac:	8863      	ldrh	r3, [r4, #2]
 80036ae:	b923      	cbnz	r3, 80036ba <USBD_StdEPReq+0x5e>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80036b0:	b119      	cbz	r1, 80036ba <USBD_StdEPReq+0x5e>
 80036b2:	2980      	cmp	r1, #128	; 0x80
 80036b4:	d001      	beq.n	80036ba <USBD_StdEPReq+0x5e>
          USBD_LL_StallEP(pdev , ep_addr);
 80036b6:	f001 fa6a 	bl	8004b8e <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 80036ba:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	4621      	mov	r1, r4
 80036c2:	4628      	mov	r0, r5
 80036c4:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80036c6:	4628      	mov	r0, r5
 80036c8:	f000 f89d 	bl	8003806 <USBD_CtlSendStatus>
      break;
 80036cc:	e7e5      	b.n	800369a <USBD_StdEPReq+0x3e>
    switch (pdev->dev_state) 
 80036ce:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d005      	beq.n	80036e2 <USBD_StdEPReq+0x86>
 80036d6:	2b03      	cmp	r3, #3
 80036d8:	d00a      	beq.n	80036f0 <USBD_StdEPReq+0x94>
      USBD_CtlError(pdev , req);
 80036da:	4621      	mov	r1, r4
 80036dc:	f7ff fe14 	bl	8003308 <USBD_CtlError>
      break;    
 80036e0:	e7db      	b.n	800369a <USBD_StdEPReq+0x3e>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80036e2:	2900      	cmp	r1, #0
 80036e4:	d0d9      	beq.n	800369a <USBD_StdEPReq+0x3e>
 80036e6:	2980      	cmp	r1, #128	; 0x80
 80036e8:	d0d7      	beq.n	800369a <USBD_StdEPReq+0x3e>
        USBD_LL_StallEP(pdev , ep_addr);
 80036ea:	f001 fa50 	bl	8004b8e <USBD_LL_StallEP>
 80036ee:	e7d4      	b.n	800369a <USBD_StdEPReq+0x3e>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80036f0:	8863      	ldrh	r3, [r4, #2]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1d1      	bne.n	800369a <USBD_StdEPReq+0x3e>
        if ((ep_addr & 0x7F) != 0x00) 
 80036f6:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 80036fa:	d103      	bne.n	8003704 <USBD_StdEPReq+0xa8>
        USBD_CtlSendStatus(pdev);
 80036fc:	4628      	mov	r0, r5
 80036fe:	f000 f882 	bl	8003806 <USBD_CtlSendStatus>
 8003702:	e7ca      	b.n	800369a <USBD_StdEPReq+0x3e>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8003704:	f001 fa51 	bl	8004baa <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8003708:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	4621      	mov	r1, r4
 8003710:	4628      	mov	r0, r5
 8003712:	4798      	blx	r3
 8003714:	e7f2      	b.n	80036fc <USBD_StdEPReq+0xa0>
    switch (pdev->dev_state) 
 8003716:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800371a:	2b02      	cmp	r3, #2
 800371c:	d005      	beq.n	800372a <USBD_StdEPReq+0xce>
 800371e:	2b03      	cmp	r3, #3
 8003720:	d009      	beq.n	8003736 <USBD_StdEPReq+0xda>
      USBD_CtlError(pdev , req);
 8003722:	4621      	mov	r1, r4
 8003724:	f7ff fdf0 	bl	8003308 <USBD_CtlError>
      break;
 8003728:	e7b7      	b.n	800369a <USBD_StdEPReq+0x3e>
      if ((ep_addr & 0x7F) != 0x00) 
 800372a:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 800372e:	d0b4      	beq.n	800369a <USBD_StdEPReq+0x3e>
        USBD_LL_StallEP(pdev , ep_addr);
 8003730:	f001 fa2d 	bl	8004b8e <USBD_LL_StallEP>
 8003734:	e7b1      	b.n	800369a <USBD_StdEPReq+0x3e>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003736:	f012 0f80 	tst.w	r2, #128	; 0x80
 800373a:	d111      	bne.n	8003760 <USBD_StdEPReq+0x104>
                                         &pdev->ep_out[ep_addr & 0x7F];
 800373c:	f001 047f 	and.w	r4, r1, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003740:	3410      	adds	r4, #16
 8003742:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 8003746:	3404      	adds	r4, #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003748:	4628      	mov	r0, r5
 800374a:	f001 fa3c 	bl	8004bc6 <USBD_LL_IsStallEP>
 800374e:	b170      	cbz	r0, 800376e <USBD_StdEPReq+0x112>
        pep->status = 0x0001;     
 8003750:	2301      	movs	r3, #1
 8003752:	6023      	str	r3, [r4, #0]
      USBD_CtlSendData (pdev,
 8003754:	2202      	movs	r2, #2
 8003756:	4621      	mov	r1, r4
 8003758:	4628      	mov	r0, r5
 800375a:	f000 f828 	bl	80037ae <USBD_CtlSendData>
      break;
 800375e:	e79c      	b.n	800369a <USBD_StdEPReq+0x3e>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003760:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8003764:	3401      	adds	r4, #1
 8003766:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 800376a:	3404      	adds	r4, #4
 800376c:	e7ec      	b.n	8003748 <USBD_StdEPReq+0xec>
        pep->status = 0x0000;  
 800376e:	2300      	movs	r3, #0
 8003770:	6023      	str	r3, [r4, #0]
 8003772:	e7ef      	b.n	8003754 <USBD_StdEPReq+0xf8>

08003774 <USBD_GetString>:
  if (desc != NULL) 
 8003774:	b1d0      	cbz	r0, 80037ac <USBD_GetString+0x38>
{
 8003776:	b570      	push	{r4, r5, r6, lr}
 8003778:	460d      	mov	r5, r1
 800377a:	4616      	mov	r6, r2
 800377c:	4604      	mov	r4, r0
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800377e:	f7ff fd95 	bl	80032ac <USBD_GetLen>
 8003782:	3001      	adds	r0, #1
 8003784:	0040      	lsls	r0, r0, #1
 8003786:	b280      	uxth	r0, r0
 8003788:	8030      	strh	r0, [r6, #0]
    unicode[idx++] = *len;
 800378a:	7028      	strb	r0, [r5, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800378c:	2303      	movs	r3, #3
 800378e:	706b      	strb	r3, [r5, #1]
 8003790:	2302      	movs	r3, #2
    while (*desc != '\0') 
 8003792:	e007      	b.n	80037a4 <USBD_GetString+0x30>
      unicode[idx++] = *desc++;
 8003794:	1c5a      	adds	r2, r3, #1
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	3401      	adds	r4, #1
 800379a:	54e9      	strb	r1, [r5, r3]
      unicode[idx++] =  0x00;
 800379c:	3302      	adds	r3, #2
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2100      	movs	r1, #0
 80037a2:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0') 
 80037a4:	7821      	ldrb	r1, [r4, #0]
 80037a6:	2900      	cmp	r1, #0
 80037a8:	d1f4      	bne.n	8003794 <USBD_GetString+0x20>
 80037aa:	bd70      	pop	{r4, r5, r6, pc}
 80037ac:	4770      	bx	lr

080037ae <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80037ae:	b510      	push	{r4, lr}
 80037b0:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80037b2:	2202      	movs	r2, #2
 80037b4:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 80037b8:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 80037ba:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80037bc:	460a      	mov	r2, r1
 80037be:	2100      	movs	r1, #0
 80037c0:	f001 fa22 	bl	8004c08 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80037c4:	2000      	movs	r0, #0
 80037c6:	bd10      	pop	{r4, pc}

080037c8 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80037c8:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80037ca:	4613      	mov	r3, r2
 80037cc:	460a      	mov	r2, r1
 80037ce:	2100      	movs	r1, #0
 80037d0:	f001 fa1a 	bl	8004c08 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80037d4:	2000      	movs	r0, #0
 80037d6:	bd08      	pop	{r3, pc}

080037d8 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80037d8:	b510      	push	{r4, lr}
 80037da:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80037dc:	2203      	movs	r2, #3
 80037de:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 80037e2:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 80037e6:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80037ea:	460a      	mov	r2, r1
 80037ec:	2100      	movs	r1, #0
 80037ee:	f001 fa19 	bl	8004c24 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 80037f2:	2000      	movs	r0, #0
 80037f4:	bd10      	pop	{r4, pc}

080037f6 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80037f6:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 80037f8:	4613      	mov	r3, r2
 80037fa:	460a      	mov	r2, r1
 80037fc:	2100      	movs	r1, #0
 80037fe:	f001 fa11 	bl	8004c24 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8003802:	2000      	movs	r0, #0
 8003804:	bd08      	pop	{r3, pc}

08003806 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8003806:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003808:	2304      	movs	r3, #4
 800380a:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800380e:	2300      	movs	r3, #0
 8003810:	461a      	mov	r2, r3
 8003812:	4619      	mov	r1, r3
 8003814:	f001 f9f8 	bl	8004c08 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003818:	2000      	movs	r0, #0
 800381a:	bd08      	pop	{r3, pc}

0800381c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800381c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800381e:	2305      	movs	r3, #5
 8003820:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8003824:	2300      	movs	r3, #0
 8003826:	461a      	mov	r2, r3
 8003828:	4619      	mov	r1, r3
 800382a:	f001 f9fb 	bl	8004c24 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800382e:	2000      	movs	r0, #0
 8003830:	bd08      	pop	{r3, pc}
	...

08003834 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003834:	b500      	push	{lr}
 8003836:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8003838:	481b      	ldr	r0, [pc, #108]	; (80038a8 <MX_ADC1_Init+0x74>)
 800383a:	4b1c      	ldr	r3, [pc, #112]	; (80038ac <MX_ADC1_Init+0x78>)
 800383c:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800383e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003842:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003844:	2300      	movs	r3, #0
 8003846:	60c3      	str	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003848:	6143      	str	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800384a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800384e:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003850:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 2;
 8003852:	2302      	movs	r3, #2
 8003854:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003856:	f7fc ff23 	bl	80006a0 <HAL_ADC_Init>
 800385a:	b9b0      	cbnz	r0, 800388a <MX_ADC1_Init+0x56>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_11;
 800385c:	230b      	movs	r3, #11
 800385e:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003860:	2301      	movs	r3, #1
 8003862:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8003864:	2306      	movs	r3, #6
 8003866:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003868:	a901      	add	r1, sp, #4
 800386a:	480f      	ldr	r0, [pc, #60]	; (80038a8 <MX_ADC1_Init+0x74>)
 800386c:	f7fc fd08 	bl	8000280 <HAL_ADC_ConfigChannel>
 8003870:	b980      	cbnz	r0, 8003894 <MX_ADC1_Init+0x60>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_10;
 8003872:	230a      	movs	r3, #10
 8003874:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003876:	2302      	movs	r3, #2
 8003878:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800387a:	a901      	add	r1, sp, #4
 800387c:	480a      	ldr	r0, [pc, #40]	; (80038a8 <MX_ADC1_Init+0x74>)
 800387e:	f7fc fcff 	bl	8000280 <HAL_ADC_ConfigChannel>
 8003882:	b960      	cbnz	r0, 800389e <MX_ADC1_Init+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8003884:	b005      	add	sp, #20
 8003886:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 800388a:	2150      	movs	r1, #80	; 0x50
 800388c:	4808      	ldr	r0, [pc, #32]	; (80038b0 <MX_ADC1_Init+0x7c>)
 800388e:	f000 fe79 	bl	8004584 <_Error_Handler>
 8003892:	e7e3      	b.n	800385c <MX_ADC1_Init+0x28>
    _Error_Handler(__FILE__, __LINE__);
 8003894:	215a      	movs	r1, #90	; 0x5a
 8003896:	4806      	ldr	r0, [pc, #24]	; (80038b0 <MX_ADC1_Init+0x7c>)
 8003898:	f000 fe74 	bl	8004584 <_Error_Handler>
 800389c:	e7e9      	b.n	8003872 <MX_ADC1_Init+0x3e>
    _Error_Handler(__FILE__, __LINE__);
 800389e:	2163      	movs	r1, #99	; 0x63
 80038a0:	4803      	ldr	r0, [pc, #12]	; (80038b0 <MX_ADC1_Init+0x7c>)
 80038a2:	f000 fe6f 	bl	8004584 <_Error_Handler>
}
 80038a6:	e7ed      	b.n	8003884 <MX_ADC1_Init+0x50>
 80038a8:	200001c8 	.word	0x200001c8
 80038ac:	40012400 	.word	0x40012400
 80038b0:	08004ddc 	.word	0x08004ddc

080038b4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80038b4:	b500      	push	{lr}
 80038b6:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc2.Instance = ADC2;
 80038b8:	481b      	ldr	r0, [pc, #108]	; (8003928 <MX_ADC2_Init+0x74>)
 80038ba:	4b1c      	ldr	r3, [pc, #112]	; (800392c <MX_ADC2_Init+0x78>)
 80038bc:	6003      	str	r3, [r0, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80038be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038c2:	6083      	str	r3, [r0, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80038c4:	2300      	movs	r3, #0
 80038c6:	60c3      	str	r3, [r0, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80038c8:	6143      	str	r3, [r0, #20]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80038ca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80038ce:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80038d0:	6043      	str	r3, [r0, #4]
  hadc2.Init.NbrOfConversion = 2;
 80038d2:	2302      	movs	r3, #2
 80038d4:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80038d6:	f7fc fee3 	bl	80006a0 <HAL_ADC_Init>
 80038da:	b9b0      	cbnz	r0, 800390a <MX_ADC2_Init+0x56>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_13;
 80038dc:	230d      	movs	r3, #13
 80038de:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80038e0:	2301      	movs	r3, #1
 80038e2:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80038e4:	2306      	movs	r3, #6
 80038e6:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80038e8:	a901      	add	r1, sp, #4
 80038ea:	480f      	ldr	r0, [pc, #60]	; (8003928 <MX_ADC2_Init+0x74>)
 80038ec:	f7fc fcc8 	bl	8000280 <HAL_ADC_ConfigChannel>
 80038f0:	b980      	cbnz	r0, 8003914 <MX_ADC2_Init+0x60>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_12;
 80038f2:	230c      	movs	r3, #12
 80038f4:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80038f6:	2302      	movs	r3, #2
 80038f8:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80038fa:	a901      	add	r1, sp, #4
 80038fc:	480a      	ldr	r0, [pc, #40]	; (8003928 <MX_ADC2_Init+0x74>)
 80038fe:	f7fc fcbf 	bl	8000280 <HAL_ADC_ConfigChannel>
 8003902:	b960      	cbnz	r0, 800391e <MX_ADC2_Init+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8003904:	b005      	add	sp, #20
 8003906:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 800390a:	2177      	movs	r1, #119	; 0x77
 800390c:	4808      	ldr	r0, [pc, #32]	; (8003930 <MX_ADC2_Init+0x7c>)
 800390e:	f000 fe39 	bl	8004584 <_Error_Handler>
 8003912:	e7e3      	b.n	80038dc <MX_ADC2_Init+0x28>
    _Error_Handler(__FILE__, __LINE__);
 8003914:	2181      	movs	r1, #129	; 0x81
 8003916:	4806      	ldr	r0, [pc, #24]	; (8003930 <MX_ADC2_Init+0x7c>)
 8003918:	f000 fe34 	bl	8004584 <_Error_Handler>
 800391c:	e7e9      	b.n	80038f2 <MX_ADC2_Init+0x3e>
    _Error_Handler(__FILE__, __LINE__);
 800391e:	218a      	movs	r1, #138	; 0x8a
 8003920:	4803      	ldr	r0, [pc, #12]	; (8003930 <MX_ADC2_Init+0x7c>)
 8003922:	f000 fe2f 	bl	8004584 <_Error_Handler>
}
 8003926:	e7ed      	b.n	8003904 <MX_ADC2_Init+0x50>
 8003928:	20000198 	.word	0x20000198
 800392c:	40012800 	.word	0x40012800
 8003930:	08004ddc 	.word	0x08004ddc

08003934 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003934:	b510      	push	{r4, lr}
 8003936:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8003938:	6803      	ldr	r3, [r0, #0]
 800393a:	4a25      	ldr	r2, [pc, #148]	; (80039d0 <HAL_ADC_MspInit+0x9c>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d004      	beq.n	800394a <HAL_ADC_MspInit+0x16>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 8003940:	4a24      	ldr	r2, [pc, #144]	; (80039d4 <HAL_ADC_MspInit+0xa0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d031      	beq.n	80039aa <HAL_ADC_MspInit+0x76>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8003946:	b006      	add	sp, #24
 8003948:	bd10      	pop	{r4, pc}
 800394a:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 800394c:	4b22      	ldr	r3, [pc, #136]	; (80039d8 <HAL_ADC_MspInit+0xa4>)
 800394e:	699a      	ldr	r2, [r3, #24]
 8003950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003954:	619a      	str	r2, [r3, #24]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = IDC_B_2__ADC1_IN10_Pin|IDC_B_1__ADC1_IN11_Pin;
 8003960:	2303      	movs	r3, #3
 8003962:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003964:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003966:	a902      	add	r1, sp, #8
 8003968:	481c      	ldr	r0, [pc, #112]	; (80039dc <HAL_ADC_MspInit+0xa8>)
 800396a:	f7fd f911 	bl	8000b90 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 800396e:	481c      	ldr	r0, [pc, #112]	; (80039e0 <HAL_ADC_MspInit+0xac>)
 8003970:	4b1c      	ldr	r3, [pc, #112]	; (80039e4 <HAL_ADC_MspInit+0xb0>)
 8003972:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003974:	2300      	movs	r3, #0
 8003976:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003978:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800397a:	2280      	movs	r2, #128	; 0x80
 800397c:	60c2      	str	r2, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800397e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003982:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003984:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003988:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800398a:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800398c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003990:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003992:	f7fc ffcd 	bl	8000930 <HAL_DMA_Init>
 8003996:	b918      	cbnz	r0, 80039a0 <HAL_ADC_MspInit+0x6c>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003998:	4b11      	ldr	r3, [pc, #68]	; (80039e0 <HAL_ADC_MspInit+0xac>)
 800399a:	6223      	str	r3, [r4, #32]
 800399c:	625c      	str	r4, [r3, #36]	; 0x24
 800399e:	e7d2      	b.n	8003946 <HAL_ADC_MspInit+0x12>
      _Error_Handler(__FILE__, __LINE__);
 80039a0:	21af      	movs	r1, #175	; 0xaf
 80039a2:	4811      	ldr	r0, [pc, #68]	; (80039e8 <HAL_ADC_MspInit+0xb4>)
 80039a4:	f000 fdee 	bl	8004584 <_Error_Handler>
 80039a8:	e7f6      	b.n	8003998 <HAL_ADC_MspInit+0x64>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80039aa:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <HAL_ADC_MspInit+0xa4>)
 80039ac:	699a      	ldr	r2, [r3, #24]
 80039ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039b2:	619a      	str	r2, [r3, #24]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ba:	9301      	str	r3, [sp, #4]
 80039bc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = IDC_B_4__ADC2_IN12_Pin|IDC_B_3__ADC2_IN13_Pin;
 80039be:	230c      	movs	r3, #12
 80039c0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039c2:	2303      	movs	r3, #3
 80039c4:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039c6:	a902      	add	r1, sp, #8
 80039c8:	4804      	ldr	r0, [pc, #16]	; (80039dc <HAL_ADC_MspInit+0xa8>)
 80039ca:	f7fd f8e1 	bl	8000b90 <HAL_GPIO_Init>
}
 80039ce:	e7ba      	b.n	8003946 <HAL_ADC_MspInit+0x12>
 80039d0:	40012400 	.word	0x40012400
 80039d4:	40012800 	.word	0x40012800
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40011000 	.word	0x40011000
 80039e0:	200001f8 	.word	0x200001f8
 80039e4:	40020008 	.word	0x40020008
 80039e8:	08004ddc 	.word	0x08004ddc

080039ec <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80039ec:	b500      	push	{lr}
 80039ee:	b083      	sub	sp, #12
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80039f0:	4b0a      	ldr	r3, [pc, #40]	; (8003a1c <MX_DMA_Init+0x30>)
 80039f2:	695a      	ldr	r2, [r3, #20]
 80039f4:	f042 0201 	orr.w	r2, r2, #1
 80039f8:	615a      	str	r2, [r3, #20]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	9301      	str	r3, [sp, #4]
 8003a02:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003a04:	2200      	movs	r2, #0
 8003a06:	4611      	mov	r1, r2
 8003a08:	200b      	movs	r0, #11
 8003a0a:	f7fc ff11 	bl	8000830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003a0e:	200b      	movs	r0, #11
 8003a10:	f7fc ff40 	bl	8000894 <HAL_NVIC_EnableIRQ>

}
 8003a14:	b003      	add	sp, #12
 8003a16:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a1a:	bf00      	nop
 8003a1c:	40021000 	.word	0x40021000

08003a20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a24:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a26:	4b38      	ldr	r3, [pc, #224]	; (8003b08 <MX_GPIO_Init+0xe8>)
 8003a28:	699a      	ldr	r2, [r3, #24]
 8003a2a:	f042 0210 	orr.w	r2, r2, #16
 8003a2e:	619a      	str	r2, [r3, #24]
 8003a30:	699a      	ldr	r2, [r3, #24]
 8003a32:	f002 0210 	and.w	r2, r2, #16
 8003a36:	9200      	str	r2, [sp, #0]
 8003a38:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a3a:	699a      	ldr	r2, [r3, #24]
 8003a3c:	f042 0220 	orr.w	r2, r2, #32
 8003a40:	619a      	str	r2, [r3, #24]
 8003a42:	699a      	ldr	r2, [r3, #24]
 8003a44:	f002 0220 	and.w	r2, r2, #32
 8003a48:	9201      	str	r2, [sp, #4]
 8003a4a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a4c:	699a      	ldr	r2, [r3, #24]
 8003a4e:	f042 0204 	orr.w	r2, r2, #4
 8003a52:	619a      	str	r2, [r3, #24]
 8003a54:	699a      	ldr	r2, [r3, #24]
 8003a56:	f002 0204 	and.w	r2, r2, #4
 8003a5a:	9202      	str	r2, [sp, #8]
 8003a5c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a5e:	699a      	ldr	r2, [r3, #24]
 8003a60:	f042 0208 	orr.w	r2, r2, #8
 8003a64:	619a      	str	r2, [r3, #24]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	f003 0308 	and.w	r3, r3, #8
 8003a6c:	9303      	str	r3, [sp, #12]
 8003a6e:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_ex_JTDI__LED_RED_GPIO_Port, OUT_ex_JTDI__LED_RED_Pin, GPIO_PIN_RESET);
 8003a70:	4f26      	ldr	r7, [pc, #152]	; (8003b0c <MX_GPIO_Init+0xec>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a78:	4638      	mov	r0, r7
 8003a7a:	f7fd f986 	bl	8000d8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT__USB_DISCONNECT_GPIO_Port, OUT__USB_DISCONNECT_Pin, GPIO_PIN_SET);
 8003a7e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8003b18 <MX_GPIO_Init+0xf8>
 8003a82:	2201      	movs	r2, #1
 8003a84:	2104      	movs	r1, #4
 8003a86:	4640      	mov	r0, r8
 8003a88:	f7fd f97f 	bl	8000d8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT_ex_JTDO__LED_BLUE_Pin|OUT_exNJTRST__LED_GREEN_Pin, GPIO_PIN_RESET);
 8003a8c:	4d20      	ldr	r5, [pc, #128]	; (8003b10 <MX_GPIO_Init+0xf0>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	2118      	movs	r1, #24
 8003a92:	4628      	mov	r0, r5
 8003a94:	f7fd f979 	bl	8000d8a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = IDC_A_5_Pin|IDC_A_8_Pin|IDC_A_7_Pin|IDC_B_8_Pin 
 8003a98:	f64f 4370 	movw	r3, #64624	; 0xfc70
 8003a9c:	9304      	str	r3, [sp, #16]
                          |IDC_B_7_Pin|IDC_C_2_Pin|IDC_A_2_Pin|IDC_A_1_Pin 
                          |IDC_A_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a9e:	2400      	movs	r4, #0
 8003aa0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa2:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003aa4:	a904      	add	r1, sp, #16
 8003aa6:	481b      	ldr	r0, [pc, #108]	; (8003b14 <MX_GPIO_Init+0xf4>)
 8003aa8:	f7fd f872 	bl	8000b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = IDC_B_6_Pin|IDC_B_5_Pin|IDC_C_7_Pin|IDC_C_8_Pin 
 8003aac:	23f3      	movs	r3, #243	; 0xf3
 8003aae:	9304      	str	r3, [sp, #16]
                          |IDC_C_5_Pin|IDC_C_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ab0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab2:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab4:	a904      	add	r1, sp, #16
 8003ab6:	4638      	mov	r0, r7
 8003ab8:	f7fd f86a 	bl	8000b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = IDC_C_3_Pin|IDC_C_4_Pin|IDC_C_1_Pin|IDC_A_3_Pin 
 8003abc:	2367      	movs	r3, #103	; 0x67
 8003abe:	9304      	str	r3, [sp, #16]
                          |IDC_A_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ac0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac2:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ac4:	a904      	add	r1, sp, #16
 8003ac6:	4628      	mov	r0, r5
 8003ac8:	f7fd f862 	bl	8000b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_ex_JTDI__LED_RED_Pin;
 8003acc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ad0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ad2:	2601      	movs	r6, #1
 8003ad4:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad6:	2402      	movs	r4, #2
 8003ad8:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(OUT_ex_JTDI__LED_RED_GPIO_Port, &GPIO_InitStruct);
 8003ada:	a904      	add	r1, sp, #16
 8003adc:	4638      	mov	r0, r7
 8003ade:	f7fd f857 	bl	8000b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT__USB_DISCONNECT_Pin;
 8003ae2:	2304      	movs	r3, #4
 8003ae4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ae6:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ae8:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(OUT__USB_DISCONNECT_GPIO_Port, &GPIO_InitStruct);
 8003aea:	a904      	add	r1, sp, #16
 8003aec:	4640      	mov	r0, r8
 8003aee:	f7fd f84f 	bl	8000b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = OUT_ex_JTDO__LED_BLUE_Pin|OUT_exNJTRST__LED_GREEN_Pin;
 8003af2:	2318      	movs	r3, #24
 8003af4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003af6:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af8:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003afa:	a904      	add	r1, sp, #16
 8003afc:	4628      	mov	r0, r5
 8003afe:	f7fd f847 	bl	8000b90 <HAL_GPIO_Init>

}
 8003b02:	b008      	add	sp, #32
 8003b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	40010800 	.word	0x40010800
 8003b10:	40010c00 	.word	0x40010c00
 8003b14:	40011000 	.word	0x40011000
 8003b18:	40011400 	.word	0x40011400

08003b1c <f_GPIO_Init__set__IDC_C_as_full_output>:
u32		u32_tmp_3;
u32		u32_tmp_4;


void f_GPIO_Init__set__IDC_C_as_full_output(void)
{
 8003b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b1e:	b085      	sub	sp, #20
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b20:	2701      	movs	r7, #1
 8003b22:	9701      	str	r7, [sp, #4]
	//GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b24:	2303      	movs	r3, #3
 8003b26:	9303      	str	r3, [sp, #12]

	GPIO_InitStruct.Pin = IDC_C_1_Pin;
 8003b28:	ac04      	add	r4, sp, #16
 8003b2a:	2304      	movs	r3, #4
 8003b2c:	f844 3d10 	str.w	r3, [r4, #-16]!
	HAL_GPIO_Init(IDC_C_1_GPIO_Port, &GPIO_InitStruct);
 8003b30:	4d18      	ldr	r5, [pc, #96]	; (8003b94 <f_GPIO_Init__set__IDC_C_as_full_output+0x78>)
 8003b32:	4621      	mov	r1, r4
 8003b34:	4628      	mov	r0, r5
 8003b36:	f7fd f82b 	bl	8000b90 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = IDC_C_2_Pin;
 8003b3a:	2640      	movs	r6, #64	; 0x40
 8003b3c:	9600      	str	r6, [sp, #0]
	HAL_GPIO_Init(IDC_C_2_GPIO_Port, &GPIO_InitStruct);
 8003b3e:	4621      	mov	r1, r4
 8003b40:	4815      	ldr	r0, [pc, #84]	; (8003b98 <f_GPIO_Init__set__IDC_C_as_full_output+0x7c>)
 8003b42:	f7fd f825 	bl	8000b90 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = IDC_C_3_Pin;
 8003b46:	9700      	str	r7, [sp, #0]
	HAL_GPIO_Init(IDC_C_3_GPIO_Port, &GPIO_InitStruct);
 8003b48:	4621      	mov	r1, r4
 8003b4a:	4628      	mov	r0, r5
 8003b4c:	f7fd f820 	bl	8000b90 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = IDC_C_4_Pin;
 8003b50:	2302      	movs	r3, #2
 8003b52:	9300      	str	r3, [sp, #0]
	HAL_GPIO_Init(IDC_C_4_GPIO_Port, &GPIO_InitStruct);
 8003b54:	4621      	mov	r1, r4
 8003b56:	4628      	mov	r0, r5
 8003b58:	f7fd f81a 	bl	8000b90 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = IDC_C_5_Pin;
 8003b5c:	9600      	str	r6, [sp, #0]
	HAL_GPIO_Init(IDC_C_5_GPIO_Port, &GPIO_InitStruct);
 8003b5e:	f5a5 6580 	sub.w	r5, r5, #1024	; 0x400
 8003b62:	4621      	mov	r1, r4
 8003b64:	4628      	mov	r0, r5
 8003b66:	f7fd f813 	bl	8000b90 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = IDC_C_6_Pin;
 8003b6a:	2380      	movs	r3, #128	; 0x80
 8003b6c:	9300      	str	r3, [sp, #0]
	HAL_GPIO_Init(IDC_C_6_GPIO_Port, &GPIO_InitStruct);
 8003b6e:	4621      	mov	r1, r4
 8003b70:	4628      	mov	r0, r5
 8003b72:	f7fd f80d 	bl	8000b90 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = IDC_C_7_Pin;
 8003b76:	2310      	movs	r3, #16
 8003b78:	9300      	str	r3, [sp, #0]
	HAL_GPIO_Init(IDC_C_7_GPIO_Port, &GPIO_InitStruct);
 8003b7a:	4621      	mov	r1, r4
 8003b7c:	4628      	mov	r0, r5
 8003b7e:	f7fd f807 	bl	8000b90 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = IDC_C_8_Pin;
 8003b82:	2320      	movs	r3, #32
 8003b84:	9300      	str	r3, [sp, #0]
	HAL_GPIO_Init(IDC_C_8_GPIO_Port, &GPIO_InitStruct);
 8003b86:	4621      	mov	r1, r4
 8003b88:	4628      	mov	r0, r5
 8003b8a:	f7fd f801 	bl	8000b90 <HAL_GPIO_Init>
}
 8003b8e:	b005      	add	sp, #20
 8003b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40010c00 	.word	0x40010c00
 8003b98:	40011000 	.word	0x40011000

08003b9c <f_GPIO_Init__set__IDC_A_as_full_input_pulled_up>:
	GPIO_InitStruct.Pin = IDC_A_8_Pin;
	HAL_GPIO_Init(IDC_A_8_GPIO_Port, &GPIO_InitStruct);
}

void f_GPIO_Init__set__IDC_A_as_full_input_pulled_up(void)
{
 8003b9c:	b570      	push	{r4, r5, r6, lr}
 8003b9e:	b084      	sub	sp, #16
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	9302      	str	r3, [sp, #8]
	//GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	9303      	str	r3, [sp, #12]

	GPIO_InitStruct.Pin = IDC_A_1_Pin;
 8003bac:	ac04      	add	r4, sp, #16
 8003bae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003bb2:	f844 3d10 	str.w	r3, [r4, #-16]!
	HAL_GPIO_Init(IDC_A_1_GPIO_Port, &GPIO_InitStruct);
 8003bb6:	4d1b      	ldr	r5, [pc, #108]	; (8003c24 <f_GPIO_Init__set__IDC_A_as_full_input_pulled_up+0x88>)
 8003bb8:	4621      	mov	r1, r4
 8003bba:	4628      	mov	r0, r5
 8003bbc:	f7fc ffe8 	bl	8000b90 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = IDC_A_2_Pin;
 8003bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bc4:	9300      	str	r3, [sp, #0]
	HAL_GPIO_Init(IDC_A_2_GPIO_Port, &GPIO_InitStruct);
 8003bc6:	4621      	mov	r1, r4
 8003bc8:	4628      	mov	r0, r5
 8003bca:	f7fc ffe1 	bl	8000b90 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = IDC_A_3_Pin;
 8003bce:	2320      	movs	r3, #32
 8003bd0:	9300      	str	r3, [sp, #0]
	HAL_GPIO_Init(IDC_A_3_GPIO_Port, &GPIO_InitStruct);
 8003bd2:	4e15      	ldr	r6, [pc, #84]	; (8003c28 <f_GPIO_Init__set__IDC_A_as_full_input_pulled_up+0x8c>)
 8003bd4:	4621      	mov	r1, r4
 8003bd6:	4630      	mov	r0, r6
 8003bd8:	f7fc ffda 	bl	8000b90 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = IDC_A_4_Pin;
 8003bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003be0:	9300      	str	r3, [sp, #0]
	HAL_GPIO_Init(IDC_A_4_GPIO_Port, &GPIO_InitStruct);
 8003be2:	4621      	mov	r1, r4
 8003be4:	4628      	mov	r0, r5
 8003be6:	f7fc ffd3 	bl	8000b90 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = IDC_A_5_Pin;
 8003bea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bee:	9300      	str	r3, [sp, #0]
	HAL_GPIO_Init(IDC_A_5_GPIO_Port, &GPIO_InitStruct);
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	4628      	mov	r0, r5
 8003bf4:	f7fc ffcc 	bl	8000b90 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = IDC_A_6_Pin;
 8003bf8:	2340      	movs	r3, #64	; 0x40
 8003bfa:	9300      	str	r3, [sp, #0]
	HAL_GPIO_Init(IDC_A_6_GPIO_Port, &GPIO_InitStruct);
 8003bfc:	4621      	mov	r1, r4
 8003bfe:	4630      	mov	r0, r6
 8003c00:	f7fc ffc6 	bl	8000b90 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = IDC_A_7_Pin;
 8003c04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c08:	9300      	str	r3, [sp, #0]
	HAL_GPIO_Init(IDC_A_7_GPIO_Port, &GPIO_InitStruct);
 8003c0a:	4621      	mov	r1, r4
 8003c0c:	4628      	mov	r0, r5
 8003c0e:	f7fc ffbf 	bl	8000b90 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = IDC_A_8_Pin;
 8003c12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c16:	9300      	str	r3, [sp, #0]
	HAL_GPIO_Init(IDC_A_8_GPIO_Port, &GPIO_InitStruct);
 8003c18:	4621      	mov	r1, r4
 8003c1a:	4628      	mov	r0, r5
 8003c1c:	f7fc ffb8 	bl	8000b90 <HAL_GPIO_Init>
}
 8003c20:	b004      	add	sp, #16
 8003c22:	bd70      	pop	{r4, r5, r6, pc}
 8003c24:	40011000 	.word	0x40011000
 8003c28:	40010c00 	.word	0x40010c00

08003c2c <f_sys_usbHID__SCOPE__CLEAN__U32_DMA_BUFFER>:
//{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{
//USB_HID__SCOPE functions
void	f_sys_usbHID__SCOPE__CLEAN__U32_DMA_BUFFER(void)
{
	u16	clean_index;
	for(clean_index=0;clean_index<def_u16_sys_usbHID__SCOPE__U32_DMA_BUFFER_LENGTH;clean_index++)
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	e005      	b.n	8003c3c <f_sys_usbHID__SCOPE__CLEAN__U32_DMA_BUFFER+0x10>
	{
		u32_array_ADC_1_2_DMA_COPY[clean_index]=0;
 8003c30:	2100      	movs	r1, #0
 8003c32:	4a05      	ldr	r2, [pc, #20]	; (8003c48 <f_sys_usbHID__SCOPE__CLEAN__U32_DMA_BUFFER+0x1c>)
 8003c34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(clean_index=0;clean_index<def_u16_sys_usbHID__SCOPE__U32_DMA_BUFFER_LENGTH;clean_index++)
 8003c38:	3301      	adds	r3, #1
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	f640 62d7 	movw	r2, #3799	; 0xed7
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d9f5      	bls.n	8003c30 <f_sys_usbHID__SCOPE__CLEAN__U32_DMA_BUFFER+0x4>
	}
}
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	20000244 	.word	0x20000244

08003c4c <f_u16__return_indexed_u16_hid_parameter_from_RX_array>:

u16		f_u16__return_indexed_u16_hid_parameter_from_RX_array(u8	u8_f_in_parameter_index)
{
	u16 u16_tmp_1_in_f;
	u16_tmp_1_in_f=0;
	if(u8_f_in_parameter_index<32)
 8003c4c:	281f      	cmp	r0, #31
 8003c4e:	d80a      	bhi.n	8003c66 <f_u16__return_indexed_u16_hid_parameter_from_RX_array+0x1a>
	{
		u8_f_in_parameter_index*=2;	//u16 icin
 8003c50:	0040      	lsls	r0, r0, #1
 8003c52:	b2c0      	uxtb	r0, r0
		u8_f_in_parameter_index++;
 8003c54:	1c43      	adds	r3, r0, #1
 8003c56:	b2db      	uxtb	r3, r3
		u16_tmp_1_in_f=u8_array_sys_usbHID__RX[u8_f_in_parameter_index];
 8003c58:	4a04      	ldr	r2, [pc, #16]	; (8003c6c <f_u16__return_indexed_u16_hid_parameter_from_RX_array+0x20>)
 8003c5a:	5cd3      	ldrb	r3, [r2, r3]
		u16_tmp_1_in_f<<=8;
		u8_f_in_parameter_index--;
		u16_tmp_1_in_f+=u8_array_sys_usbHID__RX[u8_f_in_parameter_index];
 8003c5c:	5c10      	ldrb	r0, [r2, r0]
 8003c5e:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8003c62:	b280      	uxth	r0, r0
 8003c64:	4770      	bx	lr
	u16_tmp_1_in_f=0;
 8003c66:	2000      	movs	r0, #0
	}

	return u16_tmp_1_in_f;
}
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	20003e0c 	.word	0x20003e0c

08003c70 <f__start_record_with_TIMER_ADC_DMA>:
		  u8_array_sys_usbHID__TX[5]+=128;
	  }
}

void f__start_record_with_TIMER_ADC_DMA(void)
{
 8003c70:	b508      	push	{r3, lr}
	HAL_ADC_Start_DMA	(	(ADC_HandleTypeDef*)(&hadc1), (uint32_t*)(u32_array_ADC_1_2_DMA_COPY), def_u16_sys_usbHID__SCOPE__U32_DMA_BUFFER_LENGTH);
 8003c72:	f640 62d8 	movw	r2, #3800	; 0xed8
 8003c76:	4905      	ldr	r1, [pc, #20]	; (8003c8c <f__start_record_with_TIMER_ADC_DMA+0x1c>)
 8003c78:	4805      	ldr	r0, [pc, #20]	; (8003c90 <f__start_record_with_TIMER_ADC_DMA+0x20>)
 8003c7a:	f7fc fc53 	bl	8000524 <HAL_ADC_Start_DMA>
	HAL_ADC_Start		(	(ADC_HandleTypeDef*)(&hadc2));
 8003c7e:	4805      	ldr	r0, [pc, #20]	; (8003c94 <f__start_record_with_TIMER_ADC_DMA+0x24>)
 8003c80:	f7fc fbda 	bl	8000438 <HAL_ADC_Start>

	HAL_TIM_Base_Start(&htim3); 			//"HAL_ADC_Start_IT" ile tetikliyor
 8003c84:	4804      	ldr	r0, [pc, #16]	; (8003c98 <f__start_record_with_TIMER_ADC_DMA+0x28>)
 8003c86:	f7fe f943 	bl	8001f10 <HAL_TIM_Base_Start>
 8003c8a:	bd08      	pop	{r3, pc}
 8003c8c:	20000244 	.word	0x20000244
 8003c90:	200001c8 	.word	0x200001c8
 8003c94:	20000198 	.word	0x20000198
 8003c98:	20003ea4 	.word	0x20003ea4

08003c9c <USB_HID_QUERY_HANDLE>:
}

void USB_HID_QUERY_HANDLE(void)
{
 8003c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		//  "ECxxxx..." echo not received:

		//PC is always master. slave can not respose without master query!!!

		//tx clean.
		for(u8_sys_usbHID_i=0;u8_sys_usbHID_i<def_u8_USB_HID_LENGTH;u8_sys_usbHID_i++)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	4b91      	ldr	r3, [pc, #580]	; (8003ee8 <USB_HID_QUERY_HANDLE+0x24c>)
 8003ca2:	701a      	strb	r2, [r3, #0]
 8003ca4:	e005      	b.n	8003cb2 <USB_HID_QUERY_HANDLE+0x16>
		{
			u8_array_sys_usbHID__TX[u8_sys_usbHID_i]=0;
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	4a90      	ldr	r2, [pc, #576]	; (8003eec <USB_HID_QUERY_HANDLE+0x250>)
 8003caa:	54d1      	strb	r1, [r2, r3]
		for(u8_sys_usbHID_i=0;u8_sys_usbHID_i<def_u8_USB_HID_LENGTH;u8_sys_usbHID_i++)
 8003cac:	3301      	adds	r3, #1
 8003cae:	4a8e      	ldr	r2, [pc, #568]	; (8003ee8 <USB_HID_QUERY_HANDLE+0x24c>)
 8003cb0:	7013      	strb	r3, [r2, #0]
 8003cb2:	4b8d      	ldr	r3, [pc, #564]	; (8003ee8 <USB_HID_QUERY_HANDLE+0x24c>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b3f      	cmp	r3, #63	; 0x3f
 8003cb8:	d9f5      	bls.n	8003ca6 <USB_HID_QUERY_HANDLE+0xa>
		}

		//{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{
		//extract command: (little endian)
		u16_sys_usbHID__COMMAND_from_PC=f_u16__return_indexed_u16_hid_parameter_from_RX_array(0);
 8003cba:	2000      	movs	r0, #0
 8003cbc:	f7ff ffc6 	bl	8003c4c <f_u16__return_indexed_u16_hid_parameter_from_RX_array>
 8003cc0:	4b8b      	ldr	r3, [pc, #556]	; (8003ef0 <USB_HID_QUERY_HANDLE+0x254>)
 8003cc2:	8018      	strh	r0, [r3, #0]
		//}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}

		//{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{
		switch(u16_sys_usbHID__COMMAND_from_PC)
 8003cc4:	3802      	subs	r0, #2
 8003cc6:	2803      	cmp	r0, #3
 8003cc8:	f200 80f0 	bhi.w	8003eac <USB_HID_QUERY_HANDLE+0x210>
 8003ccc:	e8df f010 	tbh	[pc, r0, lsl #1]
 8003cd0:	00040011 	.word	0x00040011
 8003cd4:	003b00e6 	.word	0x003b00e6

			} break;

			case(def_u16_sys_usbHID__COMMAND_from_PC__SCOPE__GET_STATES):
			{
				u8_array_sys_usbHID__TX[0]=u8_array_sys_usbHID__RX[0];		//command echo!!!
 8003cd8:	4a86      	ldr	r2, [pc, #536]	; (8003ef4 <USB_HID_QUERY_HANDLE+0x258>)
 8003cda:	7811      	ldrb	r1, [r2, #0]
 8003cdc:	4b83      	ldr	r3, [pc, #524]	; (8003eec <USB_HID_QUERY_HANDLE+0x250>)
 8003cde:	7019      	strb	r1, [r3, #0]
				u8_array_sys_usbHID__TX[1]=u8_array_sys_usbHID__RX[1];
 8003ce0:	7852      	ldrb	r2, [r2, #1]
 8003ce2:	705a      	strb	r2, [r3, #1]

				u8_array_sys_usbHID__TX[2]=u8_sys_usbHID__MAIN_STATE;
 8003ce4:	4a84      	ldr	r2, [pc, #528]	; (8003ef8 <USB_HID_QUERY_HANDLE+0x25c>)
 8003ce6:	7812      	ldrb	r2, [r2, #0]
 8003ce8:	709a      	strb	r2, [r3, #2]

				u8_array_sys_usbHID__TX[3]=u8_sys_usbHID__SUB_STATE;
 8003cea:	4a84      	ldr	r2, [pc, #528]	; (8003efc <USB_HID_QUERY_HANDLE+0x260>)
 8003cec:	7812      	ldrb	r2, [r2, #0]
 8003cee:	70da      	strb	r2, [r3, #3]

			} break;
 8003cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

			case(def_u16_sys_usbHID__COMMAND_from_PC__SCOPE__START_DMA_RECORD_w_PARAMETERS):
			{
				if(u8_sys_usbHID__MAIN_STATE==def_u8_sys_usbHID__MAIN_STATE__READY)
 8003cf2:	4b81      	ldr	r3, [pc, #516]	; (8003ef8 <USB_HID_QUERY_HANDLE+0x25c>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2bc8      	cmp	r3, #200	; 0xc8
 8003cf8:	d004      	beq.n	8003d04 <USB_HID_QUERY_HANDLE+0x68>

					u8_sys_usbHID__MAIN_STATE_NEXT=def_u8_sys_usbHID__MAIN_STATE__RECORD;
				}
				else
				{
					u8_array_sys_usbHID__TX[0]=255;		//error sign!!!
 8003cfa:	4b7c      	ldr	r3, [pc, #496]	; (8003eec <USB_HID_QUERY_HANDLE+0x250>)
 8003cfc:	22ff      	movs	r2, #255	; 0xff
 8003cfe:	701a      	strb	r2, [r3, #0]
					u8_array_sys_usbHID__TX[1]=255;
 8003d00:	705a      	strb	r2, [r3, #1]
 8003d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					u8_array_sys_usbHID__TX[0]=u8_array_sys_usbHID__RX[0];		//command echo!!!
 8003d04:	4a7b      	ldr	r2, [pc, #492]	; (8003ef4 <USB_HID_QUERY_HANDLE+0x258>)
 8003d06:	7811      	ldrb	r1, [r2, #0]
 8003d08:	4b78      	ldr	r3, [pc, #480]	; (8003eec <USB_HID_QUERY_HANDLE+0x250>)
 8003d0a:	7019      	strb	r1, [r3, #0]
					u8_array_sys_usbHID__TX[1]=u8_array_sys_usbHID__RX[1];
 8003d0c:	7852      	ldrb	r2, [r2, #1]
 8003d0e:	705a      	strb	r2, [r3, #1]
					HAL_TIM_Base_Stop(&htim3);
 8003d10:	4c7b      	ldr	r4, [pc, #492]	; (8003f00 <USB_HID_QUERY_HANDLE+0x264>)
 8003d12:	4620      	mov	r0, r4
 8003d14:	f7fe f909 	bl	8001f2a <HAL_TIM_Base_Stop>
					f_sys_usbHID__SCOPE__CLEAN__U32_DMA_BUFFER();
 8003d18:	f7ff ff88 	bl	8003c2c <f_sys_usbHID__SCOPE__CLEAN__U32_DMA_BUFFER>
					TIM3->ARR=f_u16__return_indexed_u16_hid_parameter_from_RX_array(1);
 8003d1c:	2001      	movs	r0, #1
 8003d1e:	f7ff ff95 	bl	8003c4c <f_u16__return_indexed_u16_hid_parameter_from_RX_array>
 8003d22:	4b78      	ldr	r3, [pc, #480]	; (8003f04 <USB_HID_QUERY_HANDLE+0x268>)
 8003d24:	62d8      	str	r0, [r3, #44]	; 0x2c
					HAL_ADC_Start_DMA	(	(ADC_HandleTypeDef*)(&hadc1), (uint32_t*)(u32_array_ADC_1_2_DMA_COPY), def_u16_sys_usbHID__SCOPE__U32_DMA_BUFFER_LENGTH);
 8003d26:	f640 62d8 	movw	r2, #3800	; 0xed8
 8003d2a:	4977      	ldr	r1, [pc, #476]	; (8003f08 <USB_HID_QUERY_HANDLE+0x26c>)
 8003d2c:	4877      	ldr	r0, [pc, #476]	; (8003f0c <USB_HID_QUERY_HANDLE+0x270>)
 8003d2e:	f7fc fbf9 	bl	8000524 <HAL_ADC_Start_DMA>
					HAL_ADC_Start		(	(ADC_HandleTypeDef*)(&hadc2));
 8003d32:	4877      	ldr	r0, [pc, #476]	; (8003f10 <USB_HID_QUERY_HANDLE+0x274>)
 8003d34:	f7fc fb80 	bl	8000438 <HAL_ADC_Start>
					HAL_TIM_Base_Start(&htim3); 			//"HAL_ADC_Start_IT" ile tetikliyor
 8003d38:	4620      	mov	r0, r4
 8003d3a:	f7fe f8e9 	bl	8001f10 <HAL_TIM_Base_Start>
					u8_sys_usbHID__MAIN_STATE_NEXT=def_u8_sys_usbHID__MAIN_STATE__RECORD;
 8003d3e:	22c9      	movs	r2, #201	; 0xc9
 8003d40:	4b74      	ldr	r3, [pc, #464]	; (8003f14 <USB_HID_QUERY_HANDLE+0x278>)
 8003d42:	701a      	strb	r2, [r3, #0]
 8003d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

			} break;

			case(def_u16_sys_usbHID__COMMAND_from_PC__SCOPE__START_DMA_RECORD_w_TRIGGER_IO):
			{
				if(u8_sys_usbHID__MAIN_STATE==def_u8_sys_usbHID__MAIN_STATE__READY)
 8003d46:	4b6c      	ldr	r3, [pc, #432]	; (8003ef8 <USB_HID_QUERY_HANDLE+0x25c>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2bc8      	cmp	r3, #200	; 0xc8
 8003d4c:	d004      	beq.n	8003d58 <USB_HID_QUERY_HANDLE+0xbc>
					}

				}
				else
				{
					u8_array_sys_usbHID__TX[0]=255;		//error sign!!!
 8003d4e:	4b67      	ldr	r3, [pc, #412]	; (8003eec <USB_HID_QUERY_HANDLE+0x250>)
 8003d50:	22ff      	movs	r2, #255	; 0xff
 8003d52:	701a      	strb	r2, [r3, #0]
					u8_array_sys_usbHID__TX[1]=255;
 8003d54:	705a      	strb	r2, [r3, #1]
 8003d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					u8_array_sys_usbHID__TX[0]=u8_array_sys_usbHID__RX[0];		//command echo!!!
 8003d58:	4a66      	ldr	r2, [pc, #408]	; (8003ef4 <USB_HID_QUERY_HANDLE+0x258>)
 8003d5a:	7811      	ldrb	r1, [r2, #0]
 8003d5c:	4b63      	ldr	r3, [pc, #396]	; (8003eec <USB_HID_QUERY_HANDLE+0x250>)
 8003d5e:	7019      	strb	r1, [r3, #0]
					u8_array_sys_usbHID__TX[1]=u8_array_sys_usbHID__RX[1];
 8003d60:	7852      	ldrb	r2, [r2, #1]
 8003d62:	705a      	strb	r2, [r3, #1]
					HAL_TIM_Base_Stop(&htim3);
 8003d64:	4866      	ldr	r0, [pc, #408]	; (8003f00 <USB_HID_QUERY_HANDLE+0x264>)
 8003d66:	f7fe f8e0 	bl	8001f2a <HAL_TIM_Base_Stop>
					f_sys_usbHID__SCOPE__CLEAN__U32_DMA_BUFFER();
 8003d6a:	f7ff ff5f 	bl	8003c2c <f_sys_usbHID__SCOPE__CLEAN__U32_DMA_BUFFER>
					TIM3->ARR=f_u16__return_indexed_u16_hid_parameter_from_RX_array(1);
 8003d6e:	2001      	movs	r0, #1
 8003d70:	f7ff ff6c 	bl	8003c4c <f_u16__return_indexed_u16_hid_parameter_from_RX_array>
 8003d74:	4b63      	ldr	r3, [pc, #396]	; (8003f04 <USB_HID_QUERY_HANDLE+0x268>)
 8003d76:	62d8      	str	r0, [r3, #44]	; 0x2c
					u16_sys_usbHID__PARAMETER_TMP_1=f_u16__return_indexed_u16_hid_parameter_from_RX_array(2);	//parametre 2: trigger mode
 8003d78:	2002      	movs	r0, #2
 8003d7a:	f7ff ff67 	bl	8003c4c <f_u16__return_indexed_u16_hid_parameter_from_RX_array>
 8003d7e:	4604      	mov	r4, r0
 8003d80:	4b65      	ldr	r3, [pc, #404]	; (8003f18 <USB_HID_QUERY_HANDLE+0x27c>)
 8003d82:	8018      	strh	r0, [r3, #0]
					u8_sys_usbHID__SUB_STATE=def_u8_sys_usbHID__SUB_STATE_of_RECORD__NOT_DEFINED;
 8003d84:	2300      	movs	r3, #0
 8003d86:	4a5d      	ldr	r2, [pc, #372]	; (8003efc <USB_HID_QUERY_HANDLE+0x260>)
 8003d88:	7013      	strb	r3, [r2, #0]
					u16_sys_usbHID__in_ms_TIME_UP_COUNTER_OF_RECORD=0;
 8003d8a:	4a64      	ldr	r2, [pc, #400]	; (8003f1c <USB_HID_QUERY_HANDLE+0x280>)
 8003d8c:	8013      	strh	r3, [r2, #0]
					u16_sys_usbHID__in_ms_TIME_OF_RECORD_START=0;
 8003d8e:	4a64      	ldr	r2, [pc, #400]	; (8003f20 <USB_HID_QUERY_HANDLE+0x284>)
 8003d90:	8013      	strh	r3, [r2, #0]
					u16_sys_usbHID__in_ms_TIME_OF_OUT_1_ON=0;
 8003d92:	4a64      	ldr	r2, [pc, #400]	; (8003f24 <USB_HID_QUERY_HANDLE+0x288>)
 8003d94:	8013      	strh	r3, [r2, #0]
					u16_sys_usbHID__in_ms_TIME_OF_OUT_2_ON=0;
 8003d96:	4a64      	ldr	r2, [pc, #400]	; (8003f28 <USB_HID_QUERY_HANDLE+0x28c>)
 8003d98:	8013      	strh	r3, [r2, #0]
					u16_sys_usbHID__in_ms_TIME_OF_OUT_3_ON=0;
 8003d9a:	4a64      	ldr	r2, [pc, #400]	; (8003f2c <USB_HID_QUERY_HANDLE+0x290>)
 8003d9c:	8013      	strh	r3, [r2, #0]
					u16_sys_usbHID__in_ms_TIME_OF_OUT_4_ON=0;
 8003d9e:	4a64      	ldr	r2, [pc, #400]	; (8003f30 <USB_HID_QUERY_HANDLE+0x294>)
 8003da0:	8013      	strh	r3, [r2, #0]
					u16_sys_usbHID__in_ms_TIME_OF_OUT_1_OFF=0;
 8003da2:	4a64      	ldr	r2, [pc, #400]	; (8003f34 <USB_HID_QUERY_HANDLE+0x298>)
 8003da4:	8013      	strh	r3, [r2, #0]
					u16_sys_usbHID__in_ms_TIME_OF_OUT_2_OFF=0;
 8003da6:	4a64      	ldr	r2, [pc, #400]	; (8003f38 <USB_HID_QUERY_HANDLE+0x29c>)
 8003da8:	8013      	strh	r3, [r2, #0]
					u16_sys_usbHID__in_ms_TIME_OF_OUT_3_OFF=0;
 8003daa:	4a64      	ldr	r2, [pc, #400]	; (8003f3c <USB_HID_QUERY_HANDLE+0x2a0>)
 8003dac:	8013      	strh	r3, [r2, #0]
					u16_sys_usbHID__in_ms_TIME_OF_OUT_4_OFF=0;
 8003dae:	4a64      	ldr	r2, [pc, #400]	; (8003f40 <USB_HID_QUERY_HANDLE+0x2a4>)
 8003db0:	8013      	strh	r3, [r2, #0]
					switch(u16_sys_usbHID__PARAMETER_TMP_1)
 8003db2:	1ec3      	subs	r3, r0, #3
 8003db4:	2b05      	cmp	r3, #5
 8003db6:	d86c      	bhi.n	8003e92 <USB_HID_QUERY_HANDLE+0x1f6>
 8003db8:	e8df f003 	tbb	[pc, r3]
 8003dbc:	036b6b03 	.word	0x036b6b03
 8003dc0:	5454      	.short	0x5454
							u16_sys_usbHID__in_ms_TIME_OF_RECORD_START=	f_u16__return_indexed_u16_hid_parameter_from_RX_array(5);		//parametre 5: "digital output tetikleme" de 0-10000. ms arasi kayitin baslama zamani.
 8003dc2:	2005      	movs	r0, #5
 8003dc4:	f7ff ff42 	bl	8003c4c <f_u16__return_indexed_u16_hid_parameter_from_RX_array>
 8003dc8:	4b55      	ldr	r3, [pc, #340]	; (8003f20 <USB_HID_QUERY_HANDLE+0x284>)
 8003dca:	8018      	strh	r0, [r3, #0]
							u16_sys_usbHID__in_ms_TIME_OF_OUT_1_ON=		f_u16__return_indexed_u16_hid_parameter_from_RX_array(6);		//parametre 6: "digital output tetikleme" de 0-10000. ms arasi output 1 on zamani.
 8003dcc:	2006      	movs	r0, #6
 8003dce:	f7ff ff3d 	bl	8003c4c <f_u16__return_indexed_u16_hid_parameter_from_RX_array>
 8003dd2:	4b54      	ldr	r3, [pc, #336]	; (8003f24 <USB_HID_QUERY_HANDLE+0x288>)
 8003dd4:	8018      	strh	r0, [r3, #0]
							u16_sys_usbHID__in_ms_TIME_OF_OUT_2_ON=		f_u16__return_indexed_u16_hid_parameter_from_RX_array(7);		//parametre 7: "digital output tetikleme" de 0-10000. ms arasi output 2 on zamani.
 8003dd6:	2007      	movs	r0, #7
 8003dd8:	f7ff ff38 	bl	8003c4c <f_u16__return_indexed_u16_hid_parameter_from_RX_array>
 8003ddc:	4b52      	ldr	r3, [pc, #328]	; (8003f28 <USB_HID_QUERY_HANDLE+0x28c>)
 8003dde:	8018      	strh	r0, [r3, #0]
							u16_sys_usbHID__in_ms_TIME_OF_OUT_3_ON=		f_u16__return_indexed_u16_hid_parameter_from_RX_array(8);		//parametre 8: "digital output tetikleme" de 0-10000. ms arasi output 3 on zamani.
 8003de0:	2008      	movs	r0, #8
 8003de2:	f7ff ff33 	bl	8003c4c <f_u16__return_indexed_u16_hid_parameter_from_RX_array>
 8003de6:	4b51      	ldr	r3, [pc, #324]	; (8003f2c <USB_HID_QUERY_HANDLE+0x290>)
 8003de8:	8018      	strh	r0, [r3, #0]
							u16_sys_usbHID__in_ms_TIME_OF_OUT_4_ON=		f_u16__return_indexed_u16_hid_parameter_from_RX_array(9);		//parametre 9: "digital output tetikleme" de 0-10000. ms arasi output 4 on zamani.
 8003dea:	2009      	movs	r0, #9
 8003dec:	f7ff ff2e 	bl	8003c4c <f_u16__return_indexed_u16_hid_parameter_from_RX_array>
 8003df0:	4b4f      	ldr	r3, [pc, #316]	; (8003f30 <USB_HID_QUERY_HANDLE+0x294>)
 8003df2:	8018      	strh	r0, [r3, #0]
							u16_sys_usbHID__in_ms_TIME_OF_OUT_1_OFF=	f_u16__return_indexed_u16_hid_parameter_from_RX_array(10);		//parametre 10: "digital output tetikleme" de 0-10000. ms arasi output 1 off zamani.
 8003df4:	200a      	movs	r0, #10
 8003df6:	f7ff ff29 	bl	8003c4c <f_u16__return_indexed_u16_hid_parameter_from_RX_array>
 8003dfa:	4b4e      	ldr	r3, [pc, #312]	; (8003f34 <USB_HID_QUERY_HANDLE+0x298>)
 8003dfc:	8018      	strh	r0, [r3, #0]
							u16_sys_usbHID__in_ms_TIME_OF_OUT_2_OFF=	f_u16__return_indexed_u16_hid_parameter_from_RX_array(11);		//parametre 11: "digital output tetikleme" de 0-10000. ms arasi output 2 off zamani.
 8003dfe:	200b      	movs	r0, #11
 8003e00:	f7ff ff24 	bl	8003c4c <f_u16__return_indexed_u16_hid_parameter_from_RX_array>
 8003e04:	4b4c      	ldr	r3, [pc, #304]	; (8003f38 <USB_HID_QUERY_HANDLE+0x29c>)
 8003e06:	8018      	strh	r0, [r3, #0]
							u16_sys_usbHID__in_ms_TIME_OF_OUT_3_OFF=	f_u16__return_indexed_u16_hid_parameter_from_RX_array(12);		//parametre 12: "digital output tetikleme" de 0-10000. ms arasi output 3 off zamani.
 8003e08:	200c      	movs	r0, #12
 8003e0a:	f7ff ff1f 	bl	8003c4c <f_u16__return_indexed_u16_hid_parameter_from_RX_array>
 8003e0e:	4b4b      	ldr	r3, [pc, #300]	; (8003f3c <USB_HID_QUERY_HANDLE+0x2a0>)
 8003e10:	8018      	strh	r0, [r3, #0]
							u16_sys_usbHID__in_ms_TIME_OF_OUT_4_OFF=	f_u16__return_indexed_u16_hid_parameter_from_RX_array(13);		//parametre 13: "digital output tetikleme" de 0-10000. ms arasi output 4 off zamani.
 8003e12:	200d      	movs	r0, #13
 8003e14:	f7ff ff1a 	bl	8003c4c <f_u16__return_indexed_u16_hid_parameter_from_RX_array>
 8003e18:	4b49      	ldr	r3, [pc, #292]	; (8003f40 <USB_HID_QUERY_HANDLE+0x2a4>)
 8003e1a:	8018      	strh	r0, [r3, #0]
							HAL_GPIO_WritePin(IDC_C_1_GPIO_Port, IDC_C_1_Pin, GPIO_PIN_RESET);
 8003e1c:	4c49      	ldr	r4, [pc, #292]	; (8003f44 <USB_HID_QUERY_HANDLE+0x2a8>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	2104      	movs	r1, #4
 8003e22:	4620      	mov	r0, r4
 8003e24:	f7fc ffb1 	bl	8000d8a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(IDC_C_2_GPIO_Port, IDC_C_2_Pin, GPIO_PIN_RESET);
 8003e28:	2200      	movs	r2, #0
 8003e2a:	2140      	movs	r1, #64	; 0x40
 8003e2c:	4846      	ldr	r0, [pc, #280]	; (8003f48 <USB_HID_QUERY_HANDLE+0x2ac>)
 8003e2e:	f7fc ffac 	bl	8000d8a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(IDC_C_3_GPIO_Port, IDC_C_3_Pin, GPIO_PIN_RESET);
 8003e32:	2200      	movs	r2, #0
 8003e34:	2101      	movs	r1, #1
 8003e36:	4620      	mov	r0, r4
 8003e38:	f7fc ffa7 	bl	8000d8a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(IDC_C_4_GPIO_Port, IDC_C_4_Pin, GPIO_PIN_RESET);
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	2102      	movs	r1, #2
 8003e40:	4620      	mov	r0, r4
 8003e42:	f7fc ffa2 	bl	8000d8a <HAL_GPIO_WritePin>
							if(u16_sys_usbHID__PARAMETER_TMP_1==def_u16_sys_usbHID__SCOPE__P2_TRIGGER_MODE__4_output)
 8003e46:	4b34      	ldr	r3, [pc, #208]	; (8003f18 <USB_HID_QUERY_HANDLE+0x27c>)
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	2b03      	cmp	r3, #3
 8003e4c:	d006      	beq.n	8003e5c <USB_HID_QUERY_HANDLE+0x1c0>
								u8_sys_usbHID__SUB_STATE=def_u8_sys_usbHID__SUB_STATE_of_RECORD__w_TRIGGER_1IO;
 8003e4e:	226e      	movs	r2, #110	; 0x6e
 8003e50:	4b2a      	ldr	r3, [pc, #168]	; (8003efc <USB_HID_QUERY_HANDLE+0x260>)
 8003e52:	701a      	strb	r2, [r3, #0]
							u8_sys_usbHID__MAIN_STATE_NEXT=def_u8_sys_usbHID__MAIN_STATE__RECORD;
 8003e54:	22c9      	movs	r2, #201	; 0xc9
 8003e56:	4b2f      	ldr	r3, [pc, #188]	; (8003f14 <USB_HID_QUERY_HANDLE+0x278>)
 8003e58:	701a      	strb	r2, [r3, #0]
						} break;
 8003e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
								u8_sys_usbHID__SUB_STATE=def_u8_sys_usbHID__SUB_STATE_of_RECORD__w_TRIGGER_4IO;
 8003e5c:	2264      	movs	r2, #100	; 0x64
 8003e5e:	4b27      	ldr	r3, [pc, #156]	; (8003efc <USB_HID_QUERY_HANDLE+0x260>)
 8003e60:	701a      	strb	r2, [r3, #0]
 8003e62:	e7f7      	b.n	8003e54 <USB_HID_QUERY_HANDLE+0x1b8>
							u16_sys_usbHID__time_down_counter_2=f_u16__return_indexed_u16_hid_parameter_from_RX_array(3); 	//"u16_f_in__time_out_in_sec"
 8003e64:	2003      	movs	r0, #3
 8003e66:	f7ff fef1 	bl	8003c4c <f_u16__return_indexed_u16_hid_parameter_from_RX_array>
							u16_sys_usbHID__time_down_counter_2*=1000;	// convert to milli sec base.
 8003e6a:	ebc0 1340 	rsb	r3, r0, r0, lsl #5
 8003e6e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003e72:	00c3      	lsls	r3, r0, #3
 8003e74:	4a35      	ldr	r2, [pc, #212]	; (8003f4c <USB_HID_QUERY_HANDLE+0x2b0>)
 8003e76:	8013      	strh	r3, [r2, #0]
							if(u16_sys_usbHID__PARAMETER_TMP_1==def_u16_sys_usbHID__SCOPE__P2_TRIGGER_MODE__w_waiting_input_1_RISE)
 8003e78:	2c07      	cmp	r4, #7
 8003e7a:	d006      	beq.n	8003e8a <USB_HID_QUERY_HANDLE+0x1ee>
								u8_sys_usbHID__SUB_STATE=def_u8_sys_usbHID__SUB_STATE_of_RECORD__w_waiting_input_1_FALL;
 8003e7c:	2279      	movs	r2, #121	; 0x79
 8003e7e:	4b1f      	ldr	r3, [pc, #124]	; (8003efc <USB_HID_QUERY_HANDLE+0x260>)
 8003e80:	701a      	strb	r2, [r3, #0]
							u8_sys_usbHID__MAIN_STATE_NEXT=def_u8_sys_usbHID__MAIN_STATE__RECORD;
 8003e82:	22c9      	movs	r2, #201	; 0xc9
 8003e84:	4b23      	ldr	r3, [pc, #140]	; (8003f14 <USB_HID_QUERY_HANDLE+0x278>)
 8003e86:	701a      	strb	r2, [r3, #0]
						} break;
 8003e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
								u8_sys_usbHID__SUB_STATE=def_u8_sys_usbHID__SUB_STATE_of_RECORD__w_waiting_input_1_RISE;
 8003e8a:	2278      	movs	r2, #120	; 0x78
 8003e8c:	4b1b      	ldr	r3, [pc, #108]	; (8003efc <USB_HID_QUERY_HANDLE+0x260>)
 8003e8e:	701a      	strb	r2, [r3, #0]
 8003e90:	e7f7      	b.n	8003e82 <USB_HID_QUERY_HANDLE+0x1e6>
							u8_array_sys_usbHID__TX[0]=255;		//error sign!!!
 8003e92:	4b16      	ldr	r3, [pc, #88]	; (8003eec <USB_HID_QUERY_HANDLE+0x250>)
 8003e94:	22ff      	movs	r2, #255	; 0xff
 8003e96:	701a      	strb	r2, [r3, #0]
							u8_array_sys_usbHID__TX[1]=255;
 8003e98:	705a      	strb	r2, [r3, #1]
						break;
 8003e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				}
			} break;

			case(def_u16_sys_usbHID__COMMAND_from_PC__SCOPE__GET_INDEXED_RECORD_DATA):
			{
				if(u8_sys_usbHID__MAIN_STATE==def_u8_sys_usbHID__MAIN_STATE__READY)
 8003e9c:	4b16      	ldr	r3, [pc, #88]	; (8003ef8 <USB_HID_QUERY_HANDLE+0x25c>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2bc8      	cmp	r3, #200	; 0xc8
 8003ea2:	d004      	beq.n	8003eae <USB_HID_QUERY_HANDLE+0x212>


				}
				else
				{
					u8_array_sys_usbHID__TX[0]=255;		//error sign!!!
 8003ea4:	4b11      	ldr	r3, [pc, #68]	; (8003eec <USB_HID_QUERY_HANDLE+0x250>)
 8003ea6:	22ff      	movs	r2, #255	; 0xff
 8003ea8:	701a      	strb	r2, [r3, #0]
					u8_array_sys_usbHID__TX[1]=255;
 8003eaa:	705a      	strb	r2, [r3, #1]
 8003eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					u16_sys_usbHID__COMMAND_TMP_1=u8_array_sys_usbHID__RX[3];	//H
 8003eae:	4b11      	ldr	r3, [pc, #68]	; (8003ef4 <USB_HID_QUERY_HANDLE+0x258>)
 8003eb0:	78d8      	ldrb	r0, [r3, #3]
					u16_sys_usbHID__COMMAND_TMP_1+=u8_array_sys_usbHID__RX[2];	//L
 8003eb2:	789c      	ldrb	r4, [r3, #2]
 8003eb4:	eb04 2300 	add.w	r3, r4, r0, lsl #8
 8003eb8:	b29b      	uxth	r3, r3
					u16_sys_usbHID__COMMAND_TMP_1*=2;
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	4a24      	ldr	r2, [pc, #144]	; (8003f50 <USB_HID_QUERY_HANDLE+0x2b4>)
 8003ec0:	8013      	strh	r3, [r2, #0]
					u8_tmp_1=4;	//bu arraydeki datanin baslangic yeri, ilk dort byte cmd ve index sonrası
 8003ec2:	2104      	movs	r1, #4
 8003ec4:	4a23      	ldr	r2, [pc, #140]	; (8003f54 <USB_HID_QUERY_HANDLE+0x2b8>)
 8003ec6:	7011      	strb	r1, [r2, #0]
					u16_tmp_1=u16_sys_usbHID__COMMAND_TMP_1;	//bu dma arraydeki index yeri.
 8003ec8:	4a23      	ldr	r2, [pc, #140]	; (8003f58 <USB_HID_QUERY_HANDLE+0x2bc>)
 8003eca:	8013      	strh	r3, [r2, #0]
					u16_tmp_2=u16_tmp_1+20;
 8003ecc:	3314      	adds	r3, #20
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	4a22      	ldr	r2, [pc, #136]	; (8003f5c <USB_HID_QUERY_HANDLE+0x2c0>)
 8003ed2:	8013      	strh	r3, [r2, #0]
					if(u16_tmp_2<=def_u16_sys_usbHID__SCOPE__U32_DMA_BUFFER_LENGTH) 	//istek arrayden tasmiyorsa
 8003ed4:	f640 62d8 	movw	r2, #3800	; 0xed8
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	f200 8093 	bhi.w	8004004 <USB_HID_QUERY_HANDLE+0x368>
						for(i=0;i<10;i++)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	4b1f      	ldr	r3, [pc, #124]	; (8003f60 <USB_HID_QUERY_HANDLE+0x2c4>)
 8003ee2:	801a      	strh	r2, [r3, #0]
 8003ee4:	e081      	b.n	8003fea <USB_HID_QUERY_HANDLE+0x34e>
 8003ee6:	bf00      	nop
 8003ee8:	20003e62 	.word	0x20003e62
 8003eec:	20003dc0 	.word	0x20003dc0
 8003ef0:	20000132 	.word	0x20000132
 8003ef4:	20003e0c 	.word	0x20003e0c
 8003ef8:	20000086 	.word	0x20000086
 8003efc:	2000013a 	.word	0x2000013a
 8003f00:	20003ea4 	.word	0x20003ea4
 8003f04:	40000400 	.word	0x40000400
 8003f08:	20000244 	.word	0x20000244
 8003f0c:	200001c8 	.word	0x200001c8
 8003f10:	20000198 	.word	0x20000198
 8003f14:	20000087 	.word	0x20000087
 8003f18:	20003db0 	.word	0x20003db0
 8003f1c:	20003db6 	.word	0x20003db6
 8003f20:	20003e5a 	.word	0x20003e5a
 8003f24:	20003e60 	.word	0x20003e60
 8003f28:	2000023e 	.word	0x2000023e
 8003f2c:	20003db2 	.word	0x20003db2
 8003f30:	20003dbe 	.word	0x20003dbe
 8003f34:	20003db4 	.word	0x20003db4
 8003f38:	20003e4c 	.word	0x20003e4c
 8003f3c:	20003dae 	.word	0x20003dae
 8003f40:	20000240 	.word	0x20000240
 8003f44:	40010c00 	.word	0x40010c00
 8003f48:	40011000 	.word	0x40011000
 8003f4c:	20000136 	.word	0x20000136
 8003f50:	20003e54 	.word	0x20003e54
 8003f54:	20003dac 	.word	0x20003dac
 8003f58:	20003e58 	.word	0x20003e58
 8003f5c:	20003e04 	.word	0x20003e04
 8003f60:	20003dbc 	.word	0x20003dbc
							u32_tmp_1=u32_array_ADC_1_2_DMA_COPY[u16_tmp_1];
 8003f64:	492a      	ldr	r1, [pc, #168]	; (8004010 <USB_HID_QUERY_HANDLE+0x374>)
 8003f66:	880b      	ldrh	r3, [r1, #0]
 8003f68:	4d2a      	ldr	r5, [pc, #168]	; (8004014 <USB_HID_QUERY_HANDLE+0x378>)
 8003f6a:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
 8003f6e:	4f2a      	ldr	r7, [pc, #168]	; (8004018 <USB_HID_QUERY_HANDLE+0x37c>)
 8003f70:	603e      	str	r6, [r7, #0]
							u16_tmp_1++;
 8003f72:	3301      	adds	r3, #1
 8003f74:	b29b      	uxth	r3, r3
							u32_tmp_2=u32_array_ADC_1_2_DMA_COPY[u16_tmp_1];
 8003f76:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
 8003f7a:	4d28      	ldr	r5, [pc, #160]	; (800401c <USB_HID_QUERY_HANDLE+0x380>)
 8003f7c:	602f      	str	r7, [r5, #0]
							u16_tmp_1++;
 8003f7e:	3301      	adds	r3, #1
 8003f80:	800b      	strh	r3, [r1, #0]
							u32_tmp_3=u32_tmp_1 & 0xfff;	//ch1, adc1_1
 8003f82:	f3c6 0e0b 	ubfx	lr, r6, #0, #12
							u32_tmp_4=u32_tmp_2 & 0xfff;	//ch2, adc1_2
 8003f86:	f3c7 030b 	ubfx	r3, r7, #0, #12
							u32_tmp_4+=u32_tmp_3; //3 byte ch1 and ch2 ready.
 8003f8a:	eb0e 3e03 	add.w	lr, lr, r3, lsl #12
							u8_array_sys_usbHID__TX[u8_tmp_1]=(u8)(u32_tmp_4);
 8003f8e:	4924      	ldr	r1, [pc, #144]	; (8004020 <USB_HID_QUERY_HANDLE+0x384>)
 8003f90:	780b      	ldrb	r3, [r1, #0]
 8003f92:	4d24      	ldr	r5, [pc, #144]	; (8004024 <USB_HID_QUERY_HANDLE+0x388>)
 8003f94:	f805 e003 	strb.w	lr, [r5, r3]
							u8_tmp_1++;
 8003f98:	3301      	adds	r3, #1
 8003f9a:	b2db      	uxtb	r3, r3
							u8_array_sys_usbHID__TX[u8_tmp_1]=(u8)(u32_tmp_4);
 8003f9c:	f3ce 2c07 	ubfx	ip, lr, #8, #8
 8003fa0:	f805 c003 	strb.w	ip, [r5, r3]
							u8_tmp_1++;
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	b2db      	uxtb	r3, r3
							u8_array_sys_usbHID__TX[u8_tmp_1]=(u8)(u32_tmp_4);
 8003fa8:	f3ce 4e07 	ubfx	lr, lr, #16, #8
 8003fac:	f805 e003 	strb.w	lr, [r5, r3]
							u8_tmp_1++;
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	b2db      	uxtb	r3, r3
							u32_tmp_3>>=16;
 8003fb4:	f3c6 460b 	ubfx	r6, r6, #16, #12
 8003fb8:	f8df e078 	ldr.w	lr, [pc, #120]	; 8004034 <USB_HID_QUERY_HANDLE+0x398>
 8003fbc:	f8ce 6000 	str.w	r6, [lr]
							u32_tmp_4>>=16;
 8003fc0:	f3c7 470b 	ubfx	r7, r7, #16, #12
							u32_tmp_4+=u32_tmp_3; //3 byte ch1 and ch2 ready.
 8003fc4:	eb06 3607 	add.w	r6, r6, r7, lsl #12
							u8_array_sys_usbHID__TX[u8_tmp_1]=(u8)(u32_tmp_4);
 8003fc8:	54ee      	strb	r6, [r5, r3]
							u8_tmp_1++;
 8003fca:	3301      	adds	r3, #1
 8003fcc:	b2db      	uxtb	r3, r3
							u8_array_sys_usbHID__TX[u8_tmp_1]=(u8)(u32_tmp_4);
 8003fce:	f3c6 2707 	ubfx	r7, r6, #8, #8
 8003fd2:	54ef      	strb	r7, [r5, r3]
							u32_tmp_4>>=8;
 8003fd4:	0c36      	lsrs	r6, r6, #16
 8003fd6:	4f14      	ldr	r7, [pc, #80]	; (8004028 <USB_HID_QUERY_HANDLE+0x38c>)
 8003fd8:	603e      	str	r6, [r7, #0]
							u8_tmp_1++;
 8003fda:	3301      	adds	r3, #1
 8003fdc:	b2db      	uxtb	r3, r3
							u8_array_sys_usbHID__TX[u8_tmp_1]=(u8)(u32_tmp_4);
 8003fde:	54ee      	strb	r6, [r5, r3]
							u8_tmp_1++;
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	700b      	strb	r3, [r1, #0]
						for(i=0;i<10;i++)
 8003fe4:	3201      	adds	r2, #1
 8003fe6:	4b11      	ldr	r3, [pc, #68]	; (800402c <USB_HID_QUERY_HANDLE+0x390>)
 8003fe8:	801a      	strh	r2, [r3, #0]
 8003fea:	4b10      	ldr	r3, [pc, #64]	; (800402c <USB_HID_QUERY_HANDLE+0x390>)
 8003fec:	881a      	ldrh	r2, [r3, #0]
 8003fee:	2a09      	cmp	r2, #9
 8003ff0:	d9b8      	bls.n	8003f64 <USB_HID_QUERY_HANDLE+0x2c8>
						u8_array_sys_usbHID__TX[0]=u8_array_sys_usbHID__RX[0];		//command echo!!!
 8003ff2:	4a0f      	ldr	r2, [pc, #60]	; (8004030 <USB_HID_QUERY_HANDLE+0x394>)
 8003ff4:	7811      	ldrb	r1, [r2, #0]
 8003ff6:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <USB_HID_QUERY_HANDLE+0x388>)
 8003ff8:	7019      	strb	r1, [r3, #0]
						u8_array_sys_usbHID__TX[1]=u8_array_sys_usbHID__RX[1];
 8003ffa:	7852      	ldrb	r2, [r2, #1]
 8003ffc:	705a      	strb	r2, [r3, #1]
						u8_array_sys_usbHID__TX[2]=u8_array_sys_usbHID__RX[2];		//parameter 1 index echo!!!
 8003ffe:	709c      	strb	r4, [r3, #2]
						u8_array_sys_usbHID__TX[3]=u8_array_sys_usbHID__RX[3];
 8004000:	70d8      	strb	r0, [r3, #3]
 8004002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						u8_array_sys_usbHID__TX[0]=255;		//error sign!!!
 8004004:	4b07      	ldr	r3, [pc, #28]	; (8004024 <USB_HID_QUERY_HANDLE+0x388>)
 8004006:	22ff      	movs	r2, #255	; 0xff
 8004008:	701a      	strb	r2, [r3, #0]
						u8_array_sys_usbHID__TX[1]=255;
 800400a:	705a      	strb	r2, [r3, #1]
 800400c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800400e:	bf00      	nop
 8004010:	20003e58 	.word	0x20003e58
 8004014:	20000244 	.word	0x20000244
 8004018:	20003db8 	.word	0x20003db8
 800401c:	20003e08 	.word	0x20003e08
 8004020:	20003dac 	.word	0x20003dac
 8004024:	20003dc0 	.word	0x20003dc0
 8004028:	20003da8 	.word	0x20003da8
 800402c:	20003dbc 	.word	0x20003dbc
 8004030:	20003e0c 	.word	0x20003e0c
 8004034:	20003e00 	.word	0x20003e00

08004038 <f_SYSTICK__prepare_time_flags_at_out_of_INTERRUPT>:
uint8_t 	u8_100_ms_counter;
uint8_t 	u8_1000_ms_counter;

void f_SYSTICK__prepare_time_flags_at_out_of_INTERRUPT(void)
{
	u8_10_ms_counter++;
 8004038:	4a1e      	ldr	r2, [pc, #120]	; (80040b4 <f_SYSTICK__prepare_time_flags_at_out_of_INTERRUPT+0x7c>)
 800403a:	7813      	ldrb	r3, [r2, #0]
 800403c:	3301      	adds	r3, #1
 800403e:	b2db      	uxtb	r3, r3
 8004040:	7013      	strb	r3, [r2, #0]
	if(u8_10_ms_counter>9)
 8004042:	2b09      	cmp	r3, #9
 8004044:	d934      	bls.n	80040b0 <f_SYSTICK__prepare_time_flags_at_out_of_INTERRUPT+0x78>
	{
		u8_10_ms_counter=0;
 8004046:	2200      	movs	r2, #0
 8004048:	4b1a      	ldr	r3, [pc, #104]	; (80040b4 <f_SYSTICK__prepare_time_flags_at_out_of_INTERRUPT+0x7c>)
 800404a:	701a      	strb	r2, [r3, #0]
		u1_flag_SYSTICK_10ms=1;
 800404c:	4a1a      	ldr	r2, [pc, #104]	; (80040b8 <f_SYSTICK__prepare_time_flags_at_out_of_INTERRUPT+0x80>)
 800404e:	7853      	ldrb	r3, [r2, #1]
 8004050:	f043 0302 	orr.w	r3, r3, #2
 8004054:	7053      	strb	r3, [r2, #1]
		u8_100_ms_counter++;
 8004056:	4a19      	ldr	r2, [pc, #100]	; (80040bc <f_SYSTICK__prepare_time_flags_at_out_of_INTERRUPT+0x84>)
 8004058:	7813      	ldrb	r3, [r2, #0]
 800405a:	3301      	adds	r3, #1
 800405c:	b2db      	uxtb	r3, r3
 800405e:	7013      	strb	r3, [r2, #0]
		if(u8_100_ms_counter>9)
 8004060:	2b09      	cmp	r3, #9
 8004062:	d925      	bls.n	80040b0 <f_SYSTICK__prepare_time_flags_at_out_of_INTERRUPT+0x78>
		{
			u8_100_ms_counter=0;
 8004064:	2200      	movs	r2, #0
 8004066:	4b15      	ldr	r3, [pc, #84]	; (80040bc <f_SYSTICK__prepare_time_flags_at_out_of_INTERRUPT+0x84>)
 8004068:	701a      	strb	r2, [r3, #0]
			u1_flag_SYSTICK_100ms=1;
 800406a:	4a13      	ldr	r2, [pc, #76]	; (80040b8 <f_SYSTICK__prepare_time_flags_at_out_of_INTERRUPT+0x80>)
 800406c:	7853      	ldrb	r3, [r2, #1]
 800406e:	f043 0304 	orr.w	r3, r3, #4
 8004072:	7053      	strb	r3, [r2, #1]
			u8_1000_ms_counter++;
 8004074:	4a12      	ldr	r2, [pc, #72]	; (80040c0 <f_SYSTICK__prepare_time_flags_at_out_of_INTERRUPT+0x88>)
 8004076:	7813      	ldrb	r3, [r2, #0]
 8004078:	3301      	adds	r3, #1
 800407a:	b2db      	uxtb	r3, r3
 800407c:	7013      	strb	r3, [r2, #0]
			if(u8_1000_ms_counter>9)
 800407e:	2b09      	cmp	r3, #9
 8004080:	d916      	bls.n	80040b0 <f_SYSTICK__prepare_time_flags_at_out_of_INTERRUPT+0x78>
			{
				u8_1000_ms_counter=0;
 8004082:	2200      	movs	r2, #0
 8004084:	4b0e      	ldr	r3, [pc, #56]	; (80040c0 <f_SYSTICK__prepare_time_flags_at_out_of_INTERRUPT+0x88>)
 8004086:	701a      	strb	r2, [r3, #0]
				u1_flag_SYSTICK_1000ms=1;
 8004088:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <f_SYSTICK__prepare_time_flags_at_out_of_INTERRUPT+0x80>)
 800408a:	785a      	ldrb	r2, [r3, #1]
 800408c:	f042 0208 	orr.w	r2, r2, #8
 8004090:	705a      	strb	r2, [r3, #1]

				if(u1_flag_SYSTICK_1HZ_TOGGLED==0)
 8004092:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8004096:	2b00      	cmp	r3, #0
 8004098:	db05      	blt.n	80040a6 <f_SYSTICK__prepare_time_flags_at_out_of_INTERRUPT+0x6e>
				{
					u1_flag_SYSTICK_1HZ_TOGGLED=1;
 800409a:	4a07      	ldr	r2, [pc, #28]	; (80040b8 <f_SYSTICK__prepare_time_flags_at_out_of_INTERRUPT+0x80>)
 800409c:	78d3      	ldrb	r3, [r2, #3]
 800409e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040a2:	70d3      	strb	r3, [r2, #3]
 80040a4:	4770      	bx	lr
				}
				else
				{
					u1_flag_SYSTICK_1HZ_TOGGLED=0;
 80040a6:	4b04      	ldr	r3, [pc, #16]	; (80040b8 <f_SYSTICK__prepare_time_flags_at_out_of_INTERRUPT+0x80>)
 80040a8:	78da      	ldrb	r2, [r3, #3]
 80040aa:	f36f 12c7 	bfc	r2, #7, #1
 80040ae:	70da      	strb	r2, [r3, #3]
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	20003e56 	.word	0x20003e56
 80040b8:	20003e50 	.word	0x20003e50
 80040bc:	2000023c 	.word	0x2000023c
 80040c0:	20003e5e 	.word	0x20003e5e

080040c4 <HAL_TIM_OC_DelayElapsedCallback>:
//}

//alttaki interrupt enable da calisiyor
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance==TIM4)
 80040c4:	6802      	ldr	r2, [r0, #0]
 80040c6:	4b05      	ldr	r3, [pc, #20]	; (80040dc <HAL_TIM_OC_DelayElapsedCallback+0x18>)
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d000      	beq.n	80040ce <HAL_TIM_OC_DelayElapsedCallback+0xa>
 80040cc:	4770      	bx	lr
	{
		u1_flag_SYSTICK_1ms=1;
 80040ce:	4a04      	ldr	r2, [pc, #16]	; (80040e0 <HAL_TIM_OC_DelayElapsedCallback+0x1c>)
 80040d0:	7853      	ldrb	r3, [r2, #1]
 80040d2:	f043 0301 	orr.w	r3, r3, #1
 80040d6:	7053      	strb	r3, [r2, #1]
	}
}
 80040d8:	e7f8      	b.n	80040cc <HAL_TIM_OC_DelayElapsedCallback+0x8>
 80040da:	bf00      	nop
 80040dc:	40000800 	.word	0x40000800
 80040e0:	20003e50 	.word	0x20003e50

080040e4 <HAL_TIM_PeriodElapsedCallback>:

//not in use!!! used in tests only!!!
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040e4:	b508      	push	{r3, lr}
	if(htim->Instance==TIM3)
 80040e6:	6802      	ldr	r2, [r0, #0]
 80040e8:	4b0a      	ldr	r3, [pc, #40]	; (8004114 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d000      	beq.n	80040f0 <HAL_TIM_PeriodElapsedCallback+0xc>
 80040ee:	bd08      	pop	{r3, pc}
	{
		u8_interrupt_tim3_flag=1;
 80040f0:	2201      	movs	r2, #1
 80040f2:	4b09      	ldr	r3, [pc, #36]	; (8004118 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80040f4:	701a      	strb	r2, [r3, #0]
		u16_interrupt_tim3_counter++;
 80040f6:	4a09      	ldr	r2, [pc, #36]	; (800411c <HAL_TIM_PeriodElapsedCallback+0x38>)
 80040f8:	8813      	ldrh	r3, [r2, #0]
 80040fa:	3301      	adds	r3, #1
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	8013      	strh	r3, [r2, #0]
		if(u16_interrupt_tim3_counter>60)
 8004100:	2b3c      	cmp	r3, #60	; 0x3c
 8004102:	d9f4      	bls.n	80040ee <HAL_TIM_PeriodElapsedCallback+0xa>
		{
			HAL_ADC_Stop_DMA((ADC_HandleTypeDef*)(&hadc1));
 8004104:	4806      	ldr	r0, [pc, #24]	; (8004120 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8004106:	f7fc fb53 	bl	80007b0 <HAL_ADC_Stop_DMA>
			u16_interrupt_tim3_counter=0;
 800410a:	2200      	movs	r2, #0
 800410c:	4b03      	ldr	r3, [pc, #12]	; (800411c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800410e:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8004110:	e7ed      	b.n	80040ee <HAL_TIM_PeriodElapsedCallback+0xa>
 8004112:	bf00      	nop
 8004114:	40000400 	.word	0x40000400
 8004118:	20000138 	.word	0x20000138
 800411c:	2000012e 	.word	0x2000012e
 8004120:	200001c8 	.word	0x200001c8

08004124 <f__END_OF_RECORD>:
}


void	f__END_OF_RECORD(void)
{
	u8_sys_usbHID__MAIN_STATE_NEXT=def_u8_sys_usbHID__MAIN_STATE__READY;
 8004124:	22c8      	movs	r2, #200	; 0xc8
 8004126:	4b01      	ldr	r3, [pc, #4]	; (800412c <f__END_OF_RECORD+0x8>)
 8004128:	701a      	strb	r2, [r3, #0]
 800412a:	4770      	bx	lr
 800412c:	20000087 	.word	0x20000087

08004130 <HAL_ADC_ConvCpltCallback>:
}

void	HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)		//onemli bu fonksiyon "ADC_DMAConvCplt" icinden cagiriliyor.
{
 8004130:	b508      	push	{r3, lr}
	 if (hadc->Instance == ADC1)
 8004132:	6802      	ldr	r2, [r0, #0]
 8004134:	4b04      	ldr	r3, [pc, #16]	; (8004148 <HAL_ADC_ConvCpltCallback+0x18>)
 8004136:	429a      	cmp	r2, r3
 8004138:	d000      	beq.n	800413c <HAL_ADC_ConvCpltCallback+0xc>
 800413a:	bd08      	pop	{r3, pc}
//			 u16_interrupt_adc_counter=0;
//			 //HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_4);
//		 }

		 //DMA buffer ready!!!
		 HAL_TIM_Base_Stop(&htim3);
 800413c:	4803      	ldr	r0, [pc, #12]	; (800414c <HAL_ADC_ConvCpltCallback+0x1c>)
 800413e:	f7fd fef4 	bl	8001f2a <HAL_TIM_Base_Stop>

		 f__END_OF_RECORD();
 8004142:	f7ff ffef 	bl	8004124 <f__END_OF_RECORD>

		 //f__fill_adc_dma_buffer_with_test_values();
	 }

	 UNUSED(hadc);
}
 8004146:	e7f8      	b.n	800413a <HAL_ADC_ConvCpltCallback+0xa>
 8004148:	40012400 	.word	0x40012400
 800414c:	20003ea4 	.word	0x20003ea4

08004150 <HAL_ADC_ConvHalfCpltCallback>:
void                    HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004150:	4770      	bx	lr

08004152 <HAL_ADC_ErrorCallback>:
void                    HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
	UNUSED(hadc);
}
void                    HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004152:	4770      	bx	lr

08004154 <f__ligth_ON_LED__RED__RECORD>:
extern 	ADC_HandleTypeDef hadc1;
extern 	ADC_HandleTypeDef hadc2;
extern 	DMA_HandleTypeDef hdma_adc1;

void	f__ligth_ON_LED__RED__RECORD(void)
{
 8004154:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(OUT_ex_JTDI__LED_RED_GPIO_Port, OUT_ex_JTDI__LED_RED_Pin, GPIO_PIN_SET);
 8004156:	2201      	movs	r2, #1
 8004158:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800415c:	4801      	ldr	r0, [pc, #4]	; (8004164 <f__ligth_ON_LED__RED__RECORD+0x10>)
 800415e:	f7fc fe14 	bl	8000d8a <HAL_GPIO_WritePin>
 8004162:	bd08      	pop	{r3, pc}
 8004164:	40010800 	.word	0x40010800

08004168 <f__ligth_OFF_LED__RED__RECORD>:
}

void	f__ligth_OFF_LED__RED__RECORD(void)
{
 8004168:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(OUT_ex_JTDI__LED_RED_GPIO_Port, OUT_ex_JTDI__LED_RED_Pin, GPIO_PIN_RESET);
 800416a:	2200      	movs	r2, #0
 800416c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004170:	4801      	ldr	r0, [pc, #4]	; (8004178 <f__ligth_OFF_LED__RED__RECORD+0x10>)
 8004172:	f7fc fe0a 	bl	8000d8a <HAL_GPIO_WritePin>
 8004176:	bd08      	pop	{r3, pc}
 8004178:	40010800 	.word	0x40010800

0800417c <f__ligth_ON_LED__GREEN__READY>:
}

void	f__ligth_ON_LED__GREEN__READY(void)
{
 800417c:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(OUT_exNJTRST__LED_GREEN_GPIO_Port, OUT_exNJTRST__LED_GREEN_Pin, GPIO_PIN_SET);
 800417e:	2201      	movs	r2, #1
 8004180:	2110      	movs	r1, #16
 8004182:	4802      	ldr	r0, [pc, #8]	; (800418c <f__ligth_ON_LED__GREEN__READY+0x10>)
 8004184:	f7fc fe01 	bl	8000d8a <HAL_GPIO_WritePin>
 8004188:	bd08      	pop	{r3, pc}
 800418a:	bf00      	nop
 800418c:	40010c00 	.word	0x40010c00

08004190 <f__ligth_OFF_LED__GREEN__READY>:
}

void	f__ligth_OFF_LED__GREEN__READY(void)
{
 8004190:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(OUT_exNJTRST__LED_GREEN_GPIO_Port, OUT_exNJTRST__LED_GREEN_Pin, GPIO_PIN_RESET);
 8004192:	2200      	movs	r2, #0
 8004194:	2110      	movs	r1, #16
 8004196:	4802      	ldr	r0, [pc, #8]	; (80041a0 <f__ligth_OFF_LED__GREEN__READY+0x10>)
 8004198:	f7fc fdf7 	bl	8000d8a <HAL_GPIO_WritePin>
 800419c:	bd08      	pop	{r3, pc}
 800419e:	bf00      	nop
 80041a0:	40010c00 	.word	0x40010c00

080041a4 <f__1ms_base_main_state_machine>:
}

//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
void	f__1ms_base_main_state_machine(void)
{
 80041a4:	b508      	push	{r3, lr}
	if(u16_sys_usbHID__time_down_counter_1>0)
 80041a6:	4b96      	ldr	r3, [pc, #600]	; (8004400 <f__1ms_base_main_state_machine+0x25c>)
 80041a8:	881b      	ldrh	r3, [r3, #0]
 80041aa:	b113      	cbz	r3, 80041b2 <f__1ms_base_main_state_machine+0xe>
	{
		u16_sys_usbHID__time_down_counter_1--;
 80041ac:	3b01      	subs	r3, #1
 80041ae:	4a94      	ldr	r2, [pc, #592]	; (8004400 <f__1ms_base_main_state_machine+0x25c>)
 80041b0:	8013      	strh	r3, [r2, #0]
	}

	if(u16_sys_usbHID__time_down_counter_2>0)
 80041b2:	4b94      	ldr	r3, [pc, #592]	; (8004404 <f__1ms_base_main_state_machine+0x260>)
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	b113      	cbz	r3, 80041be <f__1ms_base_main_state_machine+0x1a>
	{
		u16_sys_usbHID__time_down_counter_2--;
 80041b8:	3b01      	subs	r3, #1
 80041ba:	4a92      	ldr	r2, [pc, #584]	; (8004404 <f__1ms_base_main_state_machine+0x260>)
 80041bc:	8013      	strh	r3, [r2, #0]
	}

	//detection of state change request :
	//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
	if(u8_sys_usbHID__MAIN_STATE_NEXT!=u8_sys_usbHID__MAIN_STATE)
 80041be:	4b92      	ldr	r3, [pc, #584]	; (8004408 <f__1ms_base_main_state_machine+0x264>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	4a92      	ldr	r2, [pc, #584]	; (800440c <f__1ms_base_main_state_machine+0x268>)
 80041c4:	7812      	ldrb	r2, [r2, #0]
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d005      	beq.n	80041d6 <f__1ms_base_main_state_machine+0x32>
	{
		u8_sys_usbHID__MAIN_STATE=u8_sys_usbHID__MAIN_STATE_NEXT;
 80041ca:	4a90      	ldr	r2, [pc, #576]	; (800440c <f__1ms_base_main_state_machine+0x268>)
 80041cc:	7013      	strb	r3, [r2, #0]

		if(u8_sys_usbHID__MAIN_STATE==def_u8_sys_usbHID__MAIN_STATE__READY)
 80041ce:	2bc8      	cmp	r3, #200	; 0xc8
 80041d0:	d00e      	beq.n	80041f0 <f__1ms_base_main_state_machine+0x4c>
		{
			f__ligth_OFF_LED__RED__RECORD();
		}
		else if(u8_sys_usbHID__MAIN_STATE==def_u8_sys_usbHID__MAIN_STATE__RECORD)
 80041d2:	2bc9      	cmp	r3, #201	; 0xc9
 80041d4:	d00f      	beq.n	80041f6 <f__1ms_base_main_state_machine+0x52>
			f__ligth_OFF_LED__GREEN__READY();
		}
	}
	//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

	if(u8_sys_usbHID__MAIN_STATE==def_u8_sys_usbHID__MAIN_STATE__READY)
 80041d6:	4b8d      	ldr	r3, [pc, #564]	; (800440c <f__1ms_base_main_state_machine+0x268>)
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2bc8      	cmp	r3, #200	; 0xc8
 80041dc:	d00e      	beq.n	80041fc <f__1ms_base_main_state_machine+0x58>
		{
			u16_sys_usbHID__time_down_counter_1=1000;
			//every one second at ready state:
		}
	}
	else if(u8_sys_usbHID__MAIN_STATE==def_u8_sys_usbHID__MAIN_STATE__RECORD)
 80041de:	2bc9      	cmp	r3, #201	; 0xc9
 80041e0:	d015      	beq.n	800420e <f__1ms_base_main_state_machine+0x6a>
			}
		}
	}	//	end of "else if(u8_sys_usbHID__MAIN_STATE==def_u8_sys_usbHID__MAIN_STATE__RECORD)"
	else //if(u8_sys_usbHID__MAIN_STATE==def_u8_sys_usbHID__MAIN_STATE__WAIT_AFTER_FAIL)
	{
		if(u16_sys_usbHID__time_down_counter_2==0)
 80041e2:	4b88      	ldr	r3, [pc, #544]	; (8004404 <f__1ms_base_main_state_machine+0x260>)
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	b913      	cbnz	r3, 80041ee <f__1ms_base_main_state_machine+0x4a>
		{
			u8_sys_usbHID__MAIN_STATE_NEXT=def_u8_sys_usbHID__MAIN_STATE__READY;
 80041e8:	22c8      	movs	r2, #200	; 0xc8
 80041ea:	4b87      	ldr	r3, [pc, #540]	; (8004408 <f__1ms_base_main_state_machine+0x264>)
 80041ec:	701a      	strb	r2, [r3, #0]
 80041ee:	bd08      	pop	{r3, pc}
			f__ligth_OFF_LED__RED__RECORD();
 80041f0:	f7ff ffba 	bl	8004168 <f__ligth_OFF_LED__RED__RECORD>
 80041f4:	e7ef      	b.n	80041d6 <f__1ms_base_main_state_machine+0x32>
			f__ligth_OFF_LED__GREEN__READY();
 80041f6:	f7ff ffcb 	bl	8004190 <f__ligth_OFF_LED__GREEN__READY>
 80041fa:	e7ec      	b.n	80041d6 <f__1ms_base_main_state_machine+0x32>
		if(u16_sys_usbHID__time_down_counter_1==0)
 80041fc:	4b80      	ldr	r3, [pc, #512]	; (8004400 <f__1ms_base_main_state_machine+0x25c>)
 80041fe:	881b      	ldrh	r3, [r3, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1f4      	bne.n	80041ee <f__1ms_base_main_state_machine+0x4a>
			u16_sys_usbHID__time_down_counter_1=1000;
 8004204:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004208:	4b7d      	ldr	r3, [pc, #500]	; (8004400 <f__1ms_base_main_state_machine+0x25c>)
 800420a:	801a      	strh	r2, [r3, #0]
 800420c:	bd08      	pop	{r3, pc}
		if(u8_sys_usbHID__SUB_STATE==def_u8_sys_usbHID__SUB_STATE_of_RECORD__w_TRIGGER_4IO)
 800420e:	4b80      	ldr	r3, [pc, #512]	; (8004410 <f__1ms_base_main_state_machine+0x26c>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2b64      	cmp	r3, #100	; 0x64
 8004214:	d01b      	beq.n	800424e <f__1ms_base_main_state_machine+0xaa>
		else if(u8_sys_usbHID__SUB_STATE==def_u8_sys_usbHID__SUB_STATE_of_RECORD__w_TRIGGER_1IO)
 8004216:	2b6e      	cmp	r3, #110	; 0x6e
 8004218:	f000 8085 	beq.w	8004326 <f__1ms_base_main_state_machine+0x182>
		else if(u8_sys_usbHID__SUB_STATE==def_u8_sys_usbHID__SUB_STATE_of_RECORD__w_waiting_input_1_RISE)
 800421c:	2b78      	cmp	r3, #120	; 0x78
 800421e:	f000 8111 	beq.w	8004444 <f__1ms_base_main_state_machine+0x2a0>
		else if(u8_sys_usbHID__SUB_STATE==def_u8_sys_usbHID__SUB_STATE_of_RECORD__w_waiting_input_1_FALL)
 8004222:	2b79      	cmp	r3, #121	; 0x79
 8004224:	d1e3      	bne.n	80041ee <f__1ms_base_main_state_machine+0x4a>
			if(HAL_GPIO_ReadPin(IDC_A_2_GPIO_Port, IDC_A_2_Pin) == GPIO_PIN_RESET)
 8004226:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800422a:	487a      	ldr	r0, [pc, #488]	; (8004414 <f__1ms_base_main_state_machine+0x270>)
 800422c:	f7fc fda6 	bl	8000d7c <HAL_GPIO_ReadPin>
 8004230:	2800      	cmp	r0, #0
 8004232:	f000 8121 	beq.w	8004478 <f__1ms_base_main_state_machine+0x2d4>
			else if(u16_sys_usbHID__time_down_counter_2==0)
 8004236:	4b73      	ldr	r3, [pc, #460]	; (8004404 <f__1ms_base_main_state_machine+0x260>)
 8004238:	881b      	ldrh	r3, [r3, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1d7      	bne.n	80041ee <f__1ms_base_main_state_machine+0x4a>
				u8_sys_usbHID__MAIN_STATE_NEXT=def_u8_sys_usbHID__MAIN_STATE__WAIT_AFTER_FAIL;
 800423e:	22fa      	movs	r2, #250	; 0xfa
 8004240:	4b71      	ldr	r3, [pc, #452]	; (8004408 <f__1ms_base_main_state_machine+0x264>)
 8004242:	701a      	strb	r2, [r3, #0]
				u16_sys_usbHID__time_down_counter_2=3000;
 8004244:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004248:	4b6e      	ldr	r3, [pc, #440]	; (8004404 <f__1ms_base_main_state_machine+0x260>)
 800424a:	801a      	strh	r2, [r3, #0]
 800424c:	bd08      	pop	{r3, pc}
			u16_sys_usbHID__in_ms_TIME_UP_COUNTER_OF_RECORD++;
 800424e:	4a72      	ldr	r2, [pc, #456]	; (8004418 <f__1ms_base_main_state_machine+0x274>)
 8004250:	8813      	ldrh	r3, [r2, #0]
 8004252:	3301      	adds	r3, #1
 8004254:	b29b      	uxth	r3, r3
 8004256:	8013      	strh	r3, [r2, #0]
				if(u16_sys_usbHID__in_ms_TIME_UP_COUNTER_OF_RECORD==u16_sys_usbHID__in_ms_TIME_OF_OUT_1_ON)
 8004258:	4a70      	ldr	r2, [pc, #448]	; (800441c <f__1ms_base_main_state_machine+0x278>)
 800425a:	8812      	ldrh	r2, [r2, #0]
 800425c:	4293      	cmp	r3, r2
 800425e:	d032      	beq.n	80042c6 <f__1ms_base_main_state_machine+0x122>
				if(u16_sys_usbHID__in_ms_TIME_UP_COUNTER_OF_RECORD==u16_sys_usbHID__in_ms_TIME_OF_OUT_1_OFF)
 8004260:	4b6d      	ldr	r3, [pc, #436]	; (8004418 <f__1ms_base_main_state_machine+0x274>)
 8004262:	881a      	ldrh	r2, [r3, #0]
 8004264:	4b6e      	ldr	r3, [pc, #440]	; (8004420 <f__1ms_base_main_state_machine+0x27c>)
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d032      	beq.n	80042d2 <f__1ms_base_main_state_machine+0x12e>
				if(u16_sys_usbHID__in_ms_TIME_UP_COUNTER_OF_RECORD==u16_sys_usbHID__in_ms_TIME_OF_OUT_2_ON)
 800426c:	4b6a      	ldr	r3, [pc, #424]	; (8004418 <f__1ms_base_main_state_machine+0x274>)
 800426e:	881a      	ldrh	r2, [r3, #0]
 8004270:	4b6c      	ldr	r3, [pc, #432]	; (8004424 <f__1ms_base_main_state_machine+0x280>)
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	429a      	cmp	r2, r3
 8004276:	d032      	beq.n	80042de <f__1ms_base_main_state_machine+0x13a>
				if(u16_sys_usbHID__in_ms_TIME_UP_COUNTER_OF_RECORD==u16_sys_usbHID__in_ms_TIME_OF_OUT_2_OFF)
 8004278:	4b67      	ldr	r3, [pc, #412]	; (8004418 <f__1ms_base_main_state_machine+0x274>)
 800427a:	881a      	ldrh	r2, [r3, #0]
 800427c:	4b6a      	ldr	r3, [pc, #424]	; (8004428 <f__1ms_base_main_state_machine+0x284>)
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	429a      	cmp	r2, r3
 8004282:	d032      	beq.n	80042ea <f__1ms_base_main_state_machine+0x146>
				if(u16_sys_usbHID__in_ms_TIME_UP_COUNTER_OF_RECORD==u16_sys_usbHID__in_ms_TIME_OF_OUT_3_ON)
 8004284:	4b64      	ldr	r3, [pc, #400]	; (8004418 <f__1ms_base_main_state_machine+0x274>)
 8004286:	881a      	ldrh	r2, [r3, #0]
 8004288:	4b68      	ldr	r3, [pc, #416]	; (800442c <f__1ms_base_main_state_machine+0x288>)
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	429a      	cmp	r2, r3
 800428e:	d032      	beq.n	80042f6 <f__1ms_base_main_state_machine+0x152>
				if(u16_sys_usbHID__in_ms_TIME_UP_COUNTER_OF_RECORD==u16_sys_usbHID__in_ms_TIME_OF_OUT_3_OFF)
 8004290:	4b61      	ldr	r3, [pc, #388]	; (8004418 <f__1ms_base_main_state_machine+0x274>)
 8004292:	881a      	ldrh	r2, [r3, #0]
 8004294:	4b66      	ldr	r3, [pc, #408]	; (8004430 <f__1ms_base_main_state_machine+0x28c>)
 8004296:	881b      	ldrh	r3, [r3, #0]
 8004298:	429a      	cmp	r2, r3
 800429a:	d032      	beq.n	8004302 <f__1ms_base_main_state_machine+0x15e>
				if(u16_sys_usbHID__in_ms_TIME_UP_COUNTER_OF_RECORD==u16_sys_usbHID__in_ms_TIME_OF_OUT_4_ON)
 800429c:	4b5e      	ldr	r3, [pc, #376]	; (8004418 <f__1ms_base_main_state_machine+0x274>)
 800429e:	881a      	ldrh	r2, [r3, #0]
 80042a0:	4b64      	ldr	r3, [pc, #400]	; (8004434 <f__1ms_base_main_state_machine+0x290>)
 80042a2:	881b      	ldrh	r3, [r3, #0]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d032      	beq.n	800430e <f__1ms_base_main_state_machine+0x16a>
				if(u16_sys_usbHID__in_ms_TIME_UP_COUNTER_OF_RECORD==u16_sys_usbHID__in_ms_TIME_OF_OUT_4_OFF)
 80042a8:	4b5b      	ldr	r3, [pc, #364]	; (8004418 <f__1ms_base_main_state_machine+0x274>)
 80042aa:	881a      	ldrh	r2, [r3, #0]
 80042ac:	4b62      	ldr	r3, [pc, #392]	; (8004438 <f__1ms_base_main_state_machine+0x294>)
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d032      	beq.n	800431a <f__1ms_base_main_state_machine+0x176>
				if(u16_sys_usbHID__in_ms_TIME_UP_COUNTER_OF_RECORD==u16_sys_usbHID__in_ms_TIME_OF_RECORD_START)
 80042b4:	4b58      	ldr	r3, [pc, #352]	; (8004418 <f__1ms_base_main_state_machine+0x274>)
 80042b6:	881a      	ldrh	r2, [r3, #0]
 80042b8:	4b60      	ldr	r3, [pc, #384]	; (800443c <f__1ms_base_main_state_machine+0x298>)
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d196      	bne.n	80041ee <f__1ms_base_main_state_machine+0x4a>
					f__start_record_with_TIMER_ADC_DMA();
 80042c0:	f7ff fcd6 	bl	8003c70 <f__start_record_with_TIMER_ADC_DMA>
 80042c4:	bd08      	pop	{r3, pc}
					HAL_GPIO_WritePin(IDC_C_1_GPIO_Port, IDC_C_1_Pin, GPIO_PIN_SET);
 80042c6:	2201      	movs	r2, #1
 80042c8:	2104      	movs	r1, #4
 80042ca:	485d      	ldr	r0, [pc, #372]	; (8004440 <f__1ms_base_main_state_machine+0x29c>)
 80042cc:	f7fc fd5d 	bl	8000d8a <HAL_GPIO_WritePin>
 80042d0:	e7c6      	b.n	8004260 <f__1ms_base_main_state_machine+0xbc>
					HAL_GPIO_WritePin(IDC_C_1_GPIO_Port, IDC_C_1_Pin, GPIO_PIN_RESET);
 80042d2:	2200      	movs	r2, #0
 80042d4:	2104      	movs	r1, #4
 80042d6:	485a      	ldr	r0, [pc, #360]	; (8004440 <f__1ms_base_main_state_machine+0x29c>)
 80042d8:	f7fc fd57 	bl	8000d8a <HAL_GPIO_WritePin>
 80042dc:	e7c6      	b.n	800426c <f__1ms_base_main_state_machine+0xc8>
					HAL_GPIO_WritePin(IDC_C_2_GPIO_Port, IDC_C_2_Pin, GPIO_PIN_SET);
 80042de:	2201      	movs	r2, #1
 80042e0:	2140      	movs	r1, #64	; 0x40
 80042e2:	484c      	ldr	r0, [pc, #304]	; (8004414 <f__1ms_base_main_state_machine+0x270>)
 80042e4:	f7fc fd51 	bl	8000d8a <HAL_GPIO_WritePin>
 80042e8:	e7c6      	b.n	8004278 <f__1ms_base_main_state_machine+0xd4>
					HAL_GPIO_WritePin(IDC_C_2_GPIO_Port, IDC_C_2_Pin, GPIO_PIN_RESET);
 80042ea:	2200      	movs	r2, #0
 80042ec:	2140      	movs	r1, #64	; 0x40
 80042ee:	4849      	ldr	r0, [pc, #292]	; (8004414 <f__1ms_base_main_state_machine+0x270>)
 80042f0:	f7fc fd4b 	bl	8000d8a <HAL_GPIO_WritePin>
 80042f4:	e7c6      	b.n	8004284 <f__1ms_base_main_state_machine+0xe0>
					HAL_GPIO_WritePin(IDC_C_3_GPIO_Port, IDC_C_3_Pin, GPIO_PIN_SET);
 80042f6:	2201      	movs	r2, #1
 80042f8:	4611      	mov	r1, r2
 80042fa:	4851      	ldr	r0, [pc, #324]	; (8004440 <f__1ms_base_main_state_machine+0x29c>)
 80042fc:	f7fc fd45 	bl	8000d8a <HAL_GPIO_WritePin>
 8004300:	e7c6      	b.n	8004290 <f__1ms_base_main_state_machine+0xec>
					HAL_GPIO_WritePin(IDC_C_3_GPIO_Port, IDC_C_3_Pin, GPIO_PIN_RESET);
 8004302:	2200      	movs	r2, #0
 8004304:	2101      	movs	r1, #1
 8004306:	484e      	ldr	r0, [pc, #312]	; (8004440 <f__1ms_base_main_state_machine+0x29c>)
 8004308:	f7fc fd3f 	bl	8000d8a <HAL_GPIO_WritePin>
 800430c:	e7c6      	b.n	800429c <f__1ms_base_main_state_machine+0xf8>
					HAL_GPIO_WritePin(IDC_C_4_GPIO_Port, IDC_C_4_Pin, GPIO_PIN_SET);
 800430e:	2201      	movs	r2, #1
 8004310:	2102      	movs	r1, #2
 8004312:	484b      	ldr	r0, [pc, #300]	; (8004440 <f__1ms_base_main_state_machine+0x29c>)
 8004314:	f7fc fd39 	bl	8000d8a <HAL_GPIO_WritePin>
 8004318:	e7c6      	b.n	80042a8 <f__1ms_base_main_state_machine+0x104>
					HAL_GPIO_WritePin(IDC_C_4_GPIO_Port, IDC_C_4_Pin, GPIO_PIN_RESET);
 800431a:	2200      	movs	r2, #0
 800431c:	2102      	movs	r1, #2
 800431e:	4848      	ldr	r0, [pc, #288]	; (8004440 <f__1ms_base_main_state_machine+0x29c>)
 8004320:	f7fc fd33 	bl	8000d8a <HAL_GPIO_WritePin>
 8004324:	e7c6      	b.n	80042b4 <f__1ms_base_main_state_machine+0x110>
			u16_sys_usbHID__in_ms_TIME_UP_COUNTER_OF_RECORD++;
 8004326:	4a3c      	ldr	r2, [pc, #240]	; (8004418 <f__1ms_base_main_state_machine+0x274>)
 8004328:	8813      	ldrh	r3, [r2, #0]
 800432a:	3301      	adds	r3, #1
 800432c:	b29b      	uxth	r3, r3
 800432e:	8013      	strh	r3, [r2, #0]
				if(u16_sys_usbHID__in_ms_TIME_UP_COUNTER_OF_RECORD==u16_sys_usbHID__in_ms_TIME_OF_OUT_1_ON)
 8004330:	4a3a      	ldr	r2, [pc, #232]	; (800441c <f__1ms_base_main_state_machine+0x278>)
 8004332:	8812      	ldrh	r2, [r2, #0]
 8004334:	4293      	cmp	r3, r2
 8004336:	d033      	beq.n	80043a0 <f__1ms_base_main_state_machine+0x1fc>
				if(u16_sys_usbHID__in_ms_TIME_UP_COUNTER_OF_RECORD==u16_sys_usbHID__in_ms_TIME_OF_OUT_1_OFF)
 8004338:	4b37      	ldr	r3, [pc, #220]	; (8004418 <f__1ms_base_main_state_machine+0x274>)
 800433a:	881a      	ldrh	r2, [r3, #0]
 800433c:	4b38      	ldr	r3, [pc, #224]	; (8004420 <f__1ms_base_main_state_machine+0x27c>)
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	429a      	cmp	r2, r3
 8004342:	d033      	beq.n	80043ac <f__1ms_base_main_state_machine+0x208>
				if(u16_sys_usbHID__in_ms_TIME_UP_COUNTER_OF_RECORD==u16_sys_usbHID__in_ms_TIME_OF_OUT_2_ON)
 8004344:	4b34      	ldr	r3, [pc, #208]	; (8004418 <f__1ms_base_main_state_machine+0x274>)
 8004346:	881a      	ldrh	r2, [r3, #0]
 8004348:	4b36      	ldr	r3, [pc, #216]	; (8004424 <f__1ms_base_main_state_machine+0x280>)
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d033      	beq.n	80043b8 <f__1ms_base_main_state_machine+0x214>
				if(u16_sys_usbHID__in_ms_TIME_UP_COUNTER_OF_RECORD==u16_sys_usbHID__in_ms_TIME_OF_OUT_2_OFF)
 8004350:	4b31      	ldr	r3, [pc, #196]	; (8004418 <f__1ms_base_main_state_machine+0x274>)
 8004352:	881a      	ldrh	r2, [r3, #0]
 8004354:	4b34      	ldr	r3, [pc, #208]	; (8004428 <f__1ms_base_main_state_machine+0x284>)
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	429a      	cmp	r2, r3
 800435a:	d033      	beq.n	80043c4 <f__1ms_base_main_state_machine+0x220>
				if(u16_sys_usbHID__in_ms_TIME_UP_COUNTER_OF_RECORD==u16_sys_usbHID__in_ms_TIME_OF_OUT_3_ON)
 800435c:	4b2e      	ldr	r3, [pc, #184]	; (8004418 <f__1ms_base_main_state_machine+0x274>)
 800435e:	881a      	ldrh	r2, [r3, #0]
 8004360:	4b32      	ldr	r3, [pc, #200]	; (800442c <f__1ms_base_main_state_machine+0x288>)
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	429a      	cmp	r2, r3
 8004366:	d033      	beq.n	80043d0 <f__1ms_base_main_state_machine+0x22c>
				if(u16_sys_usbHID__in_ms_TIME_UP_COUNTER_OF_RECORD==u16_sys_usbHID__in_ms_TIME_OF_OUT_3_OFF)
 8004368:	4b2b      	ldr	r3, [pc, #172]	; (8004418 <f__1ms_base_main_state_machine+0x274>)
 800436a:	881a      	ldrh	r2, [r3, #0]
 800436c:	4b30      	ldr	r3, [pc, #192]	; (8004430 <f__1ms_base_main_state_machine+0x28c>)
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	429a      	cmp	r2, r3
 8004372:	d033      	beq.n	80043dc <f__1ms_base_main_state_machine+0x238>
				if(u16_sys_usbHID__in_ms_TIME_UP_COUNTER_OF_RECORD==u16_sys_usbHID__in_ms_TIME_OF_OUT_4_ON)
 8004374:	4b28      	ldr	r3, [pc, #160]	; (8004418 <f__1ms_base_main_state_machine+0x274>)
 8004376:	881a      	ldrh	r2, [r3, #0]
 8004378:	4b2e      	ldr	r3, [pc, #184]	; (8004434 <f__1ms_base_main_state_machine+0x290>)
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	429a      	cmp	r2, r3
 800437e:	d033      	beq.n	80043e8 <f__1ms_base_main_state_machine+0x244>
				if(u16_sys_usbHID__in_ms_TIME_UP_COUNTER_OF_RECORD==u16_sys_usbHID__in_ms_TIME_OF_OUT_4_OFF)
 8004380:	4b25      	ldr	r3, [pc, #148]	; (8004418 <f__1ms_base_main_state_machine+0x274>)
 8004382:	881a      	ldrh	r2, [r3, #0]
 8004384:	4b2c      	ldr	r3, [pc, #176]	; (8004438 <f__1ms_base_main_state_machine+0x294>)
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	429a      	cmp	r2, r3
 800438a:	d033      	beq.n	80043f4 <f__1ms_base_main_state_machine+0x250>
				if(u16_sys_usbHID__in_ms_TIME_UP_COUNTER_OF_RECORD==u16_sys_usbHID__in_ms_TIME_OF_RECORD_START)
 800438c:	4b22      	ldr	r3, [pc, #136]	; (8004418 <f__1ms_base_main_state_machine+0x274>)
 800438e:	881a      	ldrh	r2, [r3, #0]
 8004390:	4b2a      	ldr	r3, [pc, #168]	; (800443c <f__1ms_base_main_state_machine+0x298>)
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	f47f af2a 	bne.w	80041ee <f__1ms_base_main_state_machine+0x4a>
					f__start_record_with_TIMER_ADC_DMA();		//called once !!! because of incremented time counter!!!
 800439a:	f7ff fc69 	bl	8003c70 <f__start_record_with_TIMER_ADC_DMA>
 800439e:	bd08      	pop	{r3, pc}
					HAL_GPIO_WritePin(IDC_C_1_GPIO_Port, IDC_C_1_Pin, GPIO_PIN_SET);
 80043a0:	2201      	movs	r2, #1
 80043a2:	2104      	movs	r1, #4
 80043a4:	4826      	ldr	r0, [pc, #152]	; (8004440 <f__1ms_base_main_state_machine+0x29c>)
 80043a6:	f7fc fcf0 	bl	8000d8a <HAL_GPIO_WritePin>
 80043aa:	e7c5      	b.n	8004338 <f__1ms_base_main_state_machine+0x194>
					HAL_GPIO_WritePin(IDC_C_1_GPIO_Port, IDC_C_1_Pin, GPIO_PIN_RESET);
 80043ac:	2200      	movs	r2, #0
 80043ae:	2104      	movs	r1, #4
 80043b0:	4823      	ldr	r0, [pc, #140]	; (8004440 <f__1ms_base_main_state_machine+0x29c>)
 80043b2:	f7fc fcea 	bl	8000d8a <HAL_GPIO_WritePin>
 80043b6:	e7c5      	b.n	8004344 <f__1ms_base_main_state_machine+0x1a0>
					HAL_GPIO_WritePin(IDC_C_1_GPIO_Port, IDC_C_1_Pin, GPIO_PIN_SET);
 80043b8:	2201      	movs	r2, #1
 80043ba:	2104      	movs	r1, #4
 80043bc:	4820      	ldr	r0, [pc, #128]	; (8004440 <f__1ms_base_main_state_machine+0x29c>)
 80043be:	f7fc fce4 	bl	8000d8a <HAL_GPIO_WritePin>
 80043c2:	e7c5      	b.n	8004350 <f__1ms_base_main_state_machine+0x1ac>
					HAL_GPIO_WritePin(IDC_C_1_GPIO_Port, IDC_C_1_Pin, GPIO_PIN_RESET);
 80043c4:	2200      	movs	r2, #0
 80043c6:	2104      	movs	r1, #4
 80043c8:	481d      	ldr	r0, [pc, #116]	; (8004440 <f__1ms_base_main_state_machine+0x29c>)
 80043ca:	f7fc fcde 	bl	8000d8a <HAL_GPIO_WritePin>
 80043ce:	e7c5      	b.n	800435c <f__1ms_base_main_state_machine+0x1b8>
					HAL_GPIO_WritePin(IDC_C_1_GPIO_Port, IDC_C_1_Pin, GPIO_PIN_SET);
 80043d0:	2201      	movs	r2, #1
 80043d2:	2104      	movs	r1, #4
 80043d4:	481a      	ldr	r0, [pc, #104]	; (8004440 <f__1ms_base_main_state_machine+0x29c>)
 80043d6:	f7fc fcd8 	bl	8000d8a <HAL_GPIO_WritePin>
 80043da:	e7c5      	b.n	8004368 <f__1ms_base_main_state_machine+0x1c4>
					HAL_GPIO_WritePin(IDC_C_1_GPIO_Port, IDC_C_1_Pin, GPIO_PIN_RESET);
 80043dc:	2200      	movs	r2, #0
 80043de:	2104      	movs	r1, #4
 80043e0:	4817      	ldr	r0, [pc, #92]	; (8004440 <f__1ms_base_main_state_machine+0x29c>)
 80043e2:	f7fc fcd2 	bl	8000d8a <HAL_GPIO_WritePin>
 80043e6:	e7c5      	b.n	8004374 <f__1ms_base_main_state_machine+0x1d0>
					HAL_GPIO_WritePin(IDC_C_1_GPIO_Port, IDC_C_1_Pin, GPIO_PIN_SET);
 80043e8:	2201      	movs	r2, #1
 80043ea:	2104      	movs	r1, #4
 80043ec:	4814      	ldr	r0, [pc, #80]	; (8004440 <f__1ms_base_main_state_machine+0x29c>)
 80043ee:	f7fc fccc 	bl	8000d8a <HAL_GPIO_WritePin>
 80043f2:	e7c5      	b.n	8004380 <f__1ms_base_main_state_machine+0x1dc>
					HAL_GPIO_WritePin(IDC_C_1_GPIO_Port, IDC_C_1_Pin, GPIO_PIN_RESET);
 80043f4:	2200      	movs	r2, #0
 80043f6:	2104      	movs	r1, #4
 80043f8:	4811      	ldr	r0, [pc, #68]	; (8004440 <f__1ms_base_main_state_machine+0x29c>)
 80043fa:	f7fc fcc6 	bl	8000d8a <HAL_GPIO_WritePin>
 80043fe:	e7c5      	b.n	800438c <f__1ms_base_main_state_machine+0x1e8>
 8004400:	20000134 	.word	0x20000134
 8004404:	20000136 	.word	0x20000136
 8004408:	20000087 	.word	0x20000087
 800440c:	20000086 	.word	0x20000086
 8004410:	2000013a 	.word	0x2000013a
 8004414:	40011000 	.word	0x40011000
 8004418:	20003db6 	.word	0x20003db6
 800441c:	20003e60 	.word	0x20003e60
 8004420:	20003db4 	.word	0x20003db4
 8004424:	2000023e 	.word	0x2000023e
 8004428:	20003e4c 	.word	0x20003e4c
 800442c:	20003db2 	.word	0x20003db2
 8004430:	20003dae 	.word	0x20003dae
 8004434:	20003dbe 	.word	0x20003dbe
 8004438:	20000240 	.word	0x20000240
 800443c:	20003e5a 	.word	0x20003e5a
 8004440:	40010c00 	.word	0x40010c00
			if(HAL_GPIO_ReadPin(IDC_A_2_GPIO_Port, IDC_A_2_Pin) == GPIO_PIN_SET)
 8004444:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004448:	480e      	ldr	r0, [pc, #56]	; (8004484 <f__1ms_base_main_state_machine+0x2e0>)
 800444a:	f7fc fc97 	bl	8000d7c <HAL_GPIO_ReadPin>
 800444e:	2801      	cmp	r0, #1
 8004450:	d00c      	beq.n	800446c <f__1ms_base_main_state_machine+0x2c8>
			else if(u16_sys_usbHID__time_down_counter_2==0)
 8004452:	4b0d      	ldr	r3, [pc, #52]	; (8004488 <f__1ms_base_main_state_machine+0x2e4>)
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	f47f aec9 	bne.w	80041ee <f__1ms_base_main_state_machine+0x4a>
				u8_sys_usbHID__MAIN_STATE_NEXT=def_u8_sys_usbHID__MAIN_STATE__WAIT_AFTER_FAIL;
 800445c:	22fa      	movs	r2, #250	; 0xfa
 800445e:	4b0b      	ldr	r3, [pc, #44]	; (800448c <f__1ms_base_main_state_machine+0x2e8>)
 8004460:	701a      	strb	r2, [r3, #0]
				u16_sys_usbHID__time_down_counter_2=3000;
 8004462:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004466:	4b08      	ldr	r3, [pc, #32]	; (8004488 <f__1ms_base_main_state_machine+0x2e4>)
 8004468:	801a      	strh	r2, [r3, #0]
 800446a:	bd08      	pop	{r3, pc}
				f__start_record_with_TIMER_ADC_DMA();
 800446c:	f7ff fc00 	bl	8003c70 <f__start_record_with_TIMER_ADC_DMA>
				u8_sys_usbHID__SUB_STATE=def_u8_sys_usbHID__SUB_STATE_of_RECORD__w_waiting_input_1_RISE_started;
 8004470:	227a      	movs	r2, #122	; 0x7a
 8004472:	4b07      	ldr	r3, [pc, #28]	; (8004490 <f__1ms_base_main_state_machine+0x2ec>)
 8004474:	701a      	strb	r2, [r3, #0]
 8004476:	bd08      	pop	{r3, pc}
				f__start_record_with_TIMER_ADC_DMA();
 8004478:	f7ff fbfa 	bl	8003c70 <f__start_record_with_TIMER_ADC_DMA>
				u8_sys_usbHID__SUB_STATE=def_u8_sys_usbHID__SUB_STATE_of_RECORD__w_waiting_input_1_FALL_started;
 800447c:	227b      	movs	r2, #123	; 0x7b
 800447e:	4b04      	ldr	r3, [pc, #16]	; (8004490 <f__1ms_base_main_state_machine+0x2ec>)
 8004480:	701a      	strb	r2, [r3, #0]
 8004482:	bd08      	pop	{r3, pc}
 8004484:	40011000 	.word	0x40011000
 8004488:	20000136 	.word	0x20000136
 800448c:	20000087 	.word	0x20000087
 8004490:	2000013a 	.word	0x2000013a

08004494 <f__startup_IO_tests>:
//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]


//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
void	f__startup_IO_tests(void)
{
 8004494:	b508      	push	{r3, lr}
	//	HAL_GPIO_WritePin(IDC_C_1_GPIO_Port, IDC_C_1_Pin, GPIO_PIN_SET);
	//	HAL_GPIO_WritePin(IDC_C_2_GPIO_Port, IDC_C_2_Pin, GPIO_PIN_SET);
	//	HAL_GPIO_WritePin(IDC_C_3_GPIO_Port, IDC_C_3_Pin, GPIO_PIN_SET);
	//	HAL_GPIO_WritePin(IDC_C_4_GPIO_Port, IDC_C_4_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(IDC_C_5_GPIO_Port, IDC_C_5_Pin, GPIO_PIN_SET);
 8004496:	2201      	movs	r2, #1
 8004498:	2140      	movs	r1, #64	; 0x40
 800449a:	4804      	ldr	r0, [pc, #16]	; (80044ac <f__startup_IO_tests+0x18>)
 800449c:	f7fc fc75 	bl	8000d8a <HAL_GPIO_WritePin>
	//	HAL_GPIO_WritePin(IDC_C_6_GPIO_Port, IDC_C_6_Pin, GPIO_PIN_SET);
	//	HAL_GPIO_WritePin(IDC_C_7_GPIO_Port, IDC_C_7_Pin, GPIO_PIN_SET);
	//	HAL_GPIO_WritePin(IDC_C_8_GPIO_Port, IDC_C_8_Pin, GPIO_PIN_SET);

		HAL_Delay(300);
 80044a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80044a4:	f7fb fe9c 	bl	80001e0 <HAL_Delay>
 80044a8:	bd08      	pop	{r3, pc}
 80044aa:	bf00      	nop
 80044ac:	40010800 	.word	0x40010800

080044b0 <f__1ms_base_function_test>:
}
//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
void	f__1ms_base_function_test(void)
{
 80044b0:	b508      	push	{r3, lr}

  if(u8_one_shot_forced_function_test_flag==1)
 80044b2:	4b0a      	ldr	r3, [pc, #40]	; (80044dc <f__1ms_base_function_test+0x2c>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d000      	beq.n	80044bc <f__1ms_base_function_test+0xc>
 80044ba:	bd08      	pop	{r3, pc}
  {
	  u8_one_shot_forced_function_test_flag=0;
 80044bc:	2200      	movs	r2, #0
 80044be:	4b07      	ldr	r3, [pc, #28]	; (80044dc <f__1ms_base_function_test+0x2c>)
 80044c0:	701a      	strb	r2, [r3, #0]

	  //[[[[[[[[[[[[[[[[[[[[[[[[[[[[
		u8_array_sys_usbHID__RX[0]=(u8)def_u16_sys_usbHID__COMMAND_from_PC__SCOPE__START_DMA_RECORD_w_PARAMETERS;
 80044c2:	4b07      	ldr	r3, [pc, #28]	; (80044e0 <f__1ms_base_function_test+0x30>)
 80044c4:	2102      	movs	r1, #2
 80044c6:	7019      	strb	r1, [r3, #0]
		u8_array_sys_usbHID__RX[1]=(u8)(def_u16_sys_usbHID__COMMAND_from_PC__SCOPE__START_DMA_RECORD_w_PARAMETERS>>8);
 80044c8:	705a      	strb	r2, [r3, #1]

		u16_sys_usbHID__COMMAND_TMP_1=100;
		u8_array_sys_usbHID__RX[2]=u16_sys_usbHID__COMMAND_TMP_1;
 80044ca:	2164      	movs	r1, #100	; 0x64
 80044cc:	7099      	strb	r1, [r3, #2]
		u16_sys_usbHID__COMMAND_TMP_1>>=8;
 80044ce:	4905      	ldr	r1, [pc, #20]	; (80044e4 <f__1ms_base_function_test+0x34>)
 80044d0:	800a      	strh	r2, [r1, #0]
		u8_array_sys_usbHID__RX[3]=u16_sys_usbHID__COMMAND_TMP_1;
 80044d2:	70da      	strb	r2, [r3, #3]

		USB_HID_QUERY_HANDLE();
 80044d4:	f7ff fbe2 	bl	8003c9c <USB_HID_QUERY_HANDLE>
	  //]]]]]]]]]]]]]]]]]]]]]]]]]]]]

  }

}
 80044d8:	e7ef      	b.n	80044ba <f__1ms_base_function_test+0xa>
 80044da:	bf00      	nop
 80044dc:	20000139 	.word	0x20000139
 80044e0:	20003e0c 	.word	0x20003e0c
 80044e4:	20003e54 	.word	0x20003e54

080044e8 <f__1ms_base_led_blink_control>:
//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
u16 u16_led_blink_control_counter=0;
void	f__1ms_base_led_blink_control(void)
{
 80044e8:	b508      	push	{r3, lr}
	u16_led_blink_control_counter++;
 80044ea:	4a23      	ldr	r2, [pc, #140]	; (8004578 <f__1ms_base_led_blink_control+0x90>)
 80044ec:	8813      	ldrh	r3, [r2, #0]
 80044ee:	3301      	adds	r3, #1
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	8013      	strh	r3, [r2, #0]

	  if(u16_led_blink_control_counter>999)
 80044f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044f8:	d302      	bcc.n	8004500 <f__1ms_base_led_blink_control+0x18>
	  {
		  u16_led_blink_control_counter=0;
 80044fa:	2200      	movs	r2, #0
 80044fc:	4b1e      	ldr	r3, [pc, #120]	; (8004578 <f__1ms_base_led_blink_control+0x90>)
 80044fe:	801a      	strh	r2, [r3, #0]
	  }

		//[[[[[[[[[[[[[[[[[[[[[[[[[[[[
		if(u16_led_blink_control_counter==0)
 8004500:	4b1d      	ldr	r3, [pc, #116]	; (8004578 <f__1ms_base_led_blink_control+0x90>)
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	b14b      	cbz	r3, 800451a <f__1ms_base_led_blink_control+0x32>
			else if(u8_sys_usbHID__MAIN_STATE==def_u8_sys_usbHID__MAIN_STATE__RECORD)
			{
				f__ligth_ON_LED__RED__RECORD();
			}
		}
		else if(u16_led_blink_control_counter==10)
 8004506:	2b0a      	cmp	r3, #10
 8004508:	d018      	beq.n	800453c <f__1ms_base_led_blink_control+0x54>
		{
			HAL_GPIO_WritePin(OUT_ex_JTDO__LED_BLUE_GPIO_Port, OUT_ex_JTDO__LED_BLUE_Pin, GPIO_PIN_RESET);
		}
		else if(u16_led_blink_control_counter==200)
 800450a:	2bc8      	cmp	r3, #200	; 0xc8
 800450c:	d01c      	beq.n	8004548 <f__1ms_base_led_blink_control+0x60>
		{
			HAL_GPIO_WritePin(OUT_ex_JTDO__LED_BLUE_GPIO_Port, OUT_ex_JTDO__LED_BLUE_Pin, GPIO_PIN_SET);
		}
		else if(u16_led_blink_control_counter==210)
 800450e:	2bd2      	cmp	r3, #210	; 0xd2
 8004510:	d020      	beq.n	8004554 <f__1ms_base_led_blink_control+0x6c>
		{
			HAL_GPIO_WritePin(OUT_ex_JTDO__LED_BLUE_GPIO_Port, OUT_ex_JTDO__LED_BLUE_Pin, GPIO_PIN_RESET);
		}
		else if(u16_led_blink_control_counter==500)
 8004512:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004516:	d023      	beq.n	8004560 <f__1ms_base_led_blink_control+0x78>
 8004518:	bd08      	pop	{r3, pc}
		  HAL_GPIO_WritePin(OUT_ex_JTDO__LED_BLUE_GPIO_Port, OUT_ex_JTDO__LED_BLUE_Pin, GPIO_PIN_SET);
 800451a:	2201      	movs	r2, #1
 800451c:	2108      	movs	r1, #8
 800451e:	4817      	ldr	r0, [pc, #92]	; (800457c <f__1ms_base_led_blink_control+0x94>)
 8004520:	f7fc fc33 	bl	8000d8a <HAL_GPIO_WritePin>
			if(u8_sys_usbHID__MAIN_STATE==def_u8_sys_usbHID__MAIN_STATE__READY)
 8004524:	4b16      	ldr	r3, [pc, #88]	; (8004580 <f__1ms_base_led_blink_control+0x98>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2bc8      	cmp	r3, #200	; 0xc8
 800452a:	d004      	beq.n	8004536 <f__1ms_base_led_blink_control+0x4e>
			else if(u8_sys_usbHID__MAIN_STATE==def_u8_sys_usbHID__MAIN_STATE__RECORD)
 800452c:	2bc9      	cmp	r3, #201	; 0xc9
 800452e:	d1f3      	bne.n	8004518 <f__1ms_base_led_blink_control+0x30>
				f__ligth_ON_LED__RED__RECORD();
 8004530:	f7ff fe10 	bl	8004154 <f__ligth_ON_LED__RED__RECORD>
 8004534:	bd08      	pop	{r3, pc}
				f__ligth_ON_LED__GREEN__READY();
 8004536:	f7ff fe21 	bl	800417c <f__ligth_ON_LED__GREEN__READY>
 800453a:	bd08      	pop	{r3, pc}
			HAL_GPIO_WritePin(OUT_ex_JTDO__LED_BLUE_GPIO_Port, OUT_ex_JTDO__LED_BLUE_Pin, GPIO_PIN_RESET);
 800453c:	2200      	movs	r2, #0
 800453e:	2108      	movs	r1, #8
 8004540:	480e      	ldr	r0, [pc, #56]	; (800457c <f__1ms_base_led_blink_control+0x94>)
 8004542:	f7fc fc22 	bl	8000d8a <HAL_GPIO_WritePin>
 8004546:	bd08      	pop	{r3, pc}
			HAL_GPIO_WritePin(OUT_ex_JTDO__LED_BLUE_GPIO_Port, OUT_ex_JTDO__LED_BLUE_Pin, GPIO_PIN_SET);
 8004548:	2201      	movs	r2, #1
 800454a:	2108      	movs	r1, #8
 800454c:	480b      	ldr	r0, [pc, #44]	; (800457c <f__1ms_base_led_blink_control+0x94>)
 800454e:	f7fc fc1c 	bl	8000d8a <HAL_GPIO_WritePin>
 8004552:	bd08      	pop	{r3, pc}
			HAL_GPIO_WritePin(OUT_ex_JTDO__LED_BLUE_GPIO_Port, OUT_ex_JTDO__LED_BLUE_Pin, GPIO_PIN_RESET);
 8004554:	2200      	movs	r2, #0
 8004556:	2108      	movs	r1, #8
 8004558:	4808      	ldr	r0, [pc, #32]	; (800457c <f__1ms_base_led_blink_control+0x94>)
 800455a:	f7fc fc16 	bl	8000d8a <HAL_GPIO_WritePin>
 800455e:	bd08      	pop	{r3, pc}
		{
			if(u8_sys_usbHID__MAIN_STATE==def_u8_sys_usbHID__MAIN_STATE__READY)
 8004560:	4b07      	ldr	r3, [pc, #28]	; (8004580 <f__1ms_base_led_blink_control+0x98>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2bc8      	cmp	r3, #200	; 0xc8
 8004566:	d004      	beq.n	8004572 <f__1ms_base_led_blink_control+0x8a>
			{
				f__ligth_OFF_LED__GREEN__READY();
			}
			else if(u8_sys_usbHID__MAIN_STATE==def_u8_sys_usbHID__MAIN_STATE__RECORD)
 8004568:	2bc9      	cmp	r3, #201	; 0xc9
 800456a:	d1d5      	bne.n	8004518 <f__1ms_base_led_blink_control+0x30>
			{
				f__ligth_OFF_LED__RED__RECORD();
 800456c:	f7ff fdfc 	bl	8004168 <f__ligth_OFF_LED__RED__RECORD>
			}
		}
		//]]]]]]]]]]]]]]]]]]]]]]]]]]]]

}
 8004570:	e7d2      	b.n	8004518 <f__1ms_base_led_blink_control+0x30>
				f__ligth_OFF_LED__GREEN__READY();
 8004572:	f7ff fe0d 	bl	8004190 <f__ligth_OFF_LED__GREEN__READY>
 8004576:	bd08      	pop	{r3, pc}
 8004578:	20000130 	.word	0x20000130
 800457c:	40010c00 	.word	0x40010c00
 8004580:	20000086 	.word	0x20000086

08004584 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8004584:	e7fe      	b.n	8004584 <_Error_Handler>
	...

08004588 <SystemClock_Config>:
{
 8004588:	b500      	push	{lr}
 800458a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800458c:	2201      	movs	r2, #1
 800458e:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004590:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004594:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004596:	2100      	movs	r1, #0
 8004598:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800459a:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800459c:	2202      	movs	r2, #2
 800459e:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80045a0:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80045a2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80045a6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045a8:	a80a      	add	r0, sp, #40	; 0x28
 80045aa:	f7fd f883 	bl	80016b4 <HAL_RCC_OscConfig>
 80045ae:	bb60      	cbnz	r0, 800460a <SystemClock_Config+0x82>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045b0:	230f      	movs	r3, #15
 80045b2:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045b4:	2102      	movs	r1, #2
 80045b6:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045b8:	2300      	movs	r3, #0
 80045ba:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80045bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045c0:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80045c2:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80045c4:	a805      	add	r0, sp, #20
 80045c6:	f7fd fa9b 	bl	8001b00 <HAL_RCC_ClockConfig>
 80045ca:	bb18      	cbnz	r0, 8004614 <SystemClock_Config+0x8c>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80045cc:	2312      	movs	r3, #18
 80045ce:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80045d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045d4:	9303      	str	r3, [sp, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80045d6:	2300      	movs	r3, #0
 80045d8:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80045da:	a801      	add	r0, sp, #4
 80045dc:	f7fd fb52 	bl	8001c84 <HAL_RCCEx_PeriphCLKConfig>
 80045e0:	b9e8      	cbnz	r0, 800461e <SystemClock_Config+0x96>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80045e2:	f7fd fb49 	bl	8001c78 <HAL_RCC_GetHCLKFreq>
 80045e6:	4b10      	ldr	r3, [pc, #64]	; (8004628 <SystemClock_Config+0xa0>)
 80045e8:	fba3 3000 	umull	r3, r0, r3, r0
 80045ec:	0980      	lsrs	r0, r0, #6
 80045ee:	f7fc f95d 	bl	80008ac <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80045f2:	2004      	movs	r0, #4
 80045f4:	f7fc f970 	bl	80008d8 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80045f8:	2200      	movs	r2, #0
 80045fa:	4611      	mov	r1, r2
 80045fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004600:	f7fc f916 	bl	8000830 <HAL_NVIC_SetPriority>
}
 8004604:	b015      	add	sp, #84	; 0x54
 8004606:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 800460a:	f240 511d 	movw	r1, #1309	; 0x51d
 800460e:	4807      	ldr	r0, [pc, #28]	; (800462c <SystemClock_Config+0xa4>)
 8004610:	f7ff ffb8 	bl	8004584 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004614:	f240 512b 	movw	r1, #1323	; 0x52b
 8004618:	4804      	ldr	r0, [pc, #16]	; (800462c <SystemClock_Config+0xa4>)
 800461a:	f7ff ffb3 	bl	8004584 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800461e:	f240 5133 	movw	r1, #1331	; 0x533
 8004622:	4802      	ldr	r0, [pc, #8]	; (800462c <SystemClock_Config+0xa4>)
 8004624:	f7ff ffae 	bl	8004584 <_Error_Handler>
 8004628:	10624dd3 	.word	0x10624dd3
 800462c:	08004dec 	.word	0x08004dec

08004630 <main>:
{
 8004630:	b508      	push	{r3, lr}
  HAL_Init();
 8004632:	f7fb fdb1 	bl	8000198 <HAL_Init>
  SystemClock_Config();
 8004636:	f7ff ffa7 	bl	8004588 <SystemClock_Config>
  MX_GPIO_Init();
 800463a:	f7ff f9f1 	bl	8003a20 <MX_GPIO_Init>
  MX_DMA_Init();
 800463e:	f7ff f9d5 	bl	80039ec <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8004642:	f000 f9b7 	bl	80049b4 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8004646:	f7ff f8f5 	bl	8003834 <MX_ADC1_Init>
  MX_ADC2_Init();
 800464a:	f7ff f933 	bl	80038b4 <MX_ADC2_Init>
  MX_TIM4_Init();
 800464e:	f000 f93b 	bl	80048c8 <MX_TIM4_Init>
  MX_TIM3_Init();
 8004652:	f000 f8fd 	bl	8004850 <MX_TIM3_Init>
	HAL_Delay(300);
 8004656:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800465a:	f7fb fdc1 	bl	80001e0 <HAL_Delay>
	HAL_GPIO_WritePin(OUT__USB_DISCONNECT_GPIO_Port, OUT__USB_DISCONNECT_Pin, GPIO_PIN_RESET);
 800465e:	2200      	movs	r2, #0
 8004660:	2104      	movs	r1, #4
 8004662:	482c      	ldr	r0, [pc, #176]	; (8004714 <main+0xe4>)
 8004664:	f7fc fb91 	bl	8000d8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_ex_JTDI__LED_RED_GPIO_Port, OUT_ex_JTDI__LED_RED_Pin, GPIO_PIN_SET);
 8004668:	2201      	movs	r2, #1
 800466a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800466e:	482a      	ldr	r0, [pc, #168]	; (8004718 <main+0xe8>)
 8004670:	f7fc fb8b 	bl	8000d8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_ex_JTDO__LED_BLUE_GPIO_Port, OUT_ex_JTDO__LED_BLUE_Pin, GPIO_PIN_SET);
 8004674:	4c29      	ldr	r4, [pc, #164]	; (800471c <main+0xec>)
 8004676:	2201      	movs	r2, #1
 8004678:	2108      	movs	r1, #8
 800467a:	4620      	mov	r0, r4
 800467c:	f7fc fb85 	bl	8000d8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_exNJTRST__LED_GREEN_GPIO_Port, OUT_exNJTRST__LED_GREEN_Pin, GPIO_PIN_SET);
 8004680:	2201      	movs	r2, #1
 8004682:	2110      	movs	r1, #16
 8004684:	4620      	mov	r0, r4
 8004686:	f7fc fb80 	bl	8000d8a <HAL_GPIO_WritePin>
	f_sys_usbHID__SCOPE__CLEAN__U32_DMA_BUFFER();
 800468a:	f7ff facf 	bl	8003c2c <f_sys_usbHID__SCOPE__CLEAN__U32_DMA_BUFFER>
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_4); 	//1ms time base source.
 800468e:	210c      	movs	r1, #12
 8004690:	4823      	ldr	r0, [pc, #140]	; (8004720 <main+0xf0>)
 8004692:	f7fd fe83 	bl	800239c <HAL_TIM_OC_Start_IT>
	f_GPIO_Init__set__IDC_C_as_full_output();
 8004696:	f7ff fa41 	bl	8003b1c <f_GPIO_Init__set__IDC_C_as_full_output>
	f_GPIO_Init__set__IDC_A_as_full_input_pulled_up();
 800469a:	f7ff fa7f 	bl	8003b9c <f_GPIO_Init__set__IDC_A_as_full_input_pulled_up>
	f__startup_IO_tests();
 800469e:	f7ff fef9 	bl	8004494 <f__startup_IO_tests>
	HAL_Delay(300);
 80046a2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80046a6:	f7fb fd9b 	bl	80001e0 <HAL_Delay>
 80046aa:	e012      	b.n	80046d2 <main+0xa2>
		  u1_flag_SYSTICK_1ms=0;
 80046ac:	4b1d      	ldr	r3, [pc, #116]	; (8004724 <main+0xf4>)
 80046ae:	785a      	ldrb	r2, [r3, #1]
 80046b0:	f36f 0200 	bfc	r2, #0, #1
 80046b4:	705a      	strb	r2, [r3, #1]
		  f_SYSTICK__prepare_time_flags_at_out_of_INTERRUPT();
 80046b6:	f7ff fcbf 	bl	8004038 <f_SYSTICK__prepare_time_flags_at_out_of_INTERRUPT>
		  f__1ms_base_main_state_machine();
 80046ba:	f7ff fd73 	bl	80041a4 <f__1ms_base_main_state_machine>
		  f__1ms_base_function_test();
 80046be:	f7ff fef7 	bl	80044b0 <f__1ms_base_function_test>
		  f__1ms_base_led_blink_control();
 80046c2:	f7ff ff11 	bl	80044e8 <f__1ms_base_led_blink_control>
 80046c6:	e009      	b.n	80046dc <main+0xac>
	  if(u1_flag_SYSTICK_1000ms==1)
 80046c8:	4b16      	ldr	r3, [pc, #88]	; (8004724 <main+0xf4>)
 80046ca:	785b      	ldrb	r3, [r3, #1]
 80046cc:	f013 0f08 	tst.w	r3, #8
 80046d0:	d119      	bne.n	8004706 <main+0xd6>
	  if(u1_flag_SYSTICK_1ms==1)
 80046d2:	4b14      	ldr	r3, [pc, #80]	; (8004724 <main+0xf4>)
 80046d4:	785b      	ldrb	r3, [r3, #1]
 80046d6:	f013 0f01 	tst.w	r3, #1
 80046da:	d1e7      	bne.n	80046ac <main+0x7c>
	  if(u1_flag_SYSTICK_10ms==1)
 80046dc:	4b11      	ldr	r3, [pc, #68]	; (8004724 <main+0xf4>)
 80046de:	785b      	ldrb	r3, [r3, #1]
 80046e0:	f013 0f02 	tst.w	r3, #2
 80046e4:	d004      	beq.n	80046f0 <main+0xc0>
		  u1_flag_SYSTICK_10ms=0;
 80046e6:	4b0f      	ldr	r3, [pc, #60]	; (8004724 <main+0xf4>)
 80046e8:	785a      	ldrb	r2, [r3, #1]
 80046ea:	f36f 0241 	bfc	r2, #1, #1
 80046ee:	705a      	strb	r2, [r3, #1]
	  if(u1_flag_SYSTICK_100ms==1)
 80046f0:	4b0c      	ldr	r3, [pc, #48]	; (8004724 <main+0xf4>)
 80046f2:	785b      	ldrb	r3, [r3, #1]
 80046f4:	f013 0f04 	tst.w	r3, #4
 80046f8:	d0e6      	beq.n	80046c8 <main+0x98>
		  u1_flag_SYSTICK_100ms=0;
 80046fa:	4b0a      	ldr	r3, [pc, #40]	; (8004724 <main+0xf4>)
 80046fc:	785a      	ldrb	r2, [r3, #1]
 80046fe:	f36f 0282 	bfc	r2, #2, #1
 8004702:	705a      	strb	r2, [r3, #1]
 8004704:	e7e0      	b.n	80046c8 <main+0x98>
		  u1_flag_SYSTICK_1000ms=0;
 8004706:	4b07      	ldr	r3, [pc, #28]	; (8004724 <main+0xf4>)
 8004708:	785a      	ldrb	r2, [r3, #1]
 800470a:	f36f 02c3 	bfc	r2, #3, #1
 800470e:	705a      	strb	r2, [r3, #1]
 8004710:	e7df      	b.n	80046d2 <main+0xa2>
 8004712:	bf00      	nop
 8004714:	40011400 	.word	0x40011400
 8004718:	40010800 	.word	0x40010800
 800471c:	40010c00 	.word	0x40010c00
 8004720:	20003e64 	.word	0x20003e64
 8004724:	20003e50 	.word	0x20003e50

08004728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004728:	b500      	push	{lr}
 800472a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800472c:	4b20      	ldr	r3, [pc, #128]	; (80047b0 <HAL_MspInit+0x88>)
 800472e:	699a      	ldr	r2, [r3, #24]
 8004730:	f042 0201 	orr.w	r2, r2, #1
 8004734:	619a      	str	r2, [r3, #24]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	9301      	str	r3, [sp, #4]
 800473e:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004740:	2003      	movs	r0, #3
 8004742:	f7fc f863 	bl	800080c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8004746:	2200      	movs	r2, #0
 8004748:	4611      	mov	r1, r2
 800474a:	f06f 000b 	mvn.w	r0, #11
 800474e:	f7fc f86f 	bl	8000830 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8004752:	2200      	movs	r2, #0
 8004754:	4611      	mov	r1, r2
 8004756:	f06f 000a 	mvn.w	r0, #10
 800475a:	f7fc f869 	bl	8000830 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800475e:	2200      	movs	r2, #0
 8004760:	4611      	mov	r1, r2
 8004762:	f06f 0009 	mvn.w	r0, #9
 8004766:	f7fc f863 	bl	8000830 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800476a:	2200      	movs	r2, #0
 800476c:	4611      	mov	r1, r2
 800476e:	f06f 0004 	mvn.w	r0, #4
 8004772:	f7fc f85d 	bl	8000830 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004776:	2200      	movs	r2, #0
 8004778:	4611      	mov	r1, r2
 800477a:	f06f 0003 	mvn.w	r0, #3
 800477e:	f7fc f857 	bl	8000830 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8004782:	2200      	movs	r2, #0
 8004784:	4611      	mov	r1, r2
 8004786:	f06f 0001 	mvn.w	r0, #1
 800478a:	f7fc f851 	bl	8000830 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800478e:	2200      	movs	r2, #0
 8004790:	4611      	mov	r1, r2
 8004792:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004796:	f7fc f84b 	bl	8000830 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800479a:	4a06      	ldr	r2, [pc, #24]	; (80047b4 <HAL_MspInit+0x8c>)
 800479c:	6853      	ldr	r3, [r2, #4]
 800479e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80047a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047a6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047a8:	b003      	add	sp, #12
 80047aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80047ae:	bf00      	nop
 80047b0:	40021000 	.word	0x40021000
 80047b4:	40010000 	.word	0x40010000

080047b8 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80047b8:	4770      	bx	lr

080047ba <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80047ba:	e7fe      	b.n	80047ba <HardFault_Handler>

080047bc <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80047bc:	e7fe      	b.n	80047bc <MemManage_Handler>

080047be <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80047be:	e7fe      	b.n	80047be <BusFault_Handler>

080047c0 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80047c0:	e7fe      	b.n	80047c0 <UsageFault_Handler>

080047c2 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80047c2:	4770      	bx	lr

080047c4 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80047c4:	4770      	bx	lr

080047c6 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80047c6:	4770      	bx	lr

080047c8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80047c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047ca:	f7fb fcf7 	bl	80001bc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80047ce:	f7fc f894 	bl	80008fa <HAL_SYSTICK_IRQHandler>
 80047d2:	bd08      	pop	{r3, pc}

080047d4 <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel1 global interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 80047d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80047d6:	4802      	ldr	r0, [pc, #8]	; (80047e0 <DMA1_Channel1_IRQHandler+0xc>)
 80047d8:	f7fc f938 	bl	8000a4c <HAL_DMA_IRQHandler>
 80047dc:	bd08      	pop	{r3, pc}
 80047de:	bf00      	nop
 80047e0:	200001f8 	.word	0x200001f8

080047e4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
* @brief This function handles USB low priority or CAN RX0 interrupts.
*/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80047e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80047e6:	4802      	ldr	r0, [pc, #8]	; (80047f0 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 80047e8:	f7fc fe2f 	bl	800144a <HAL_PCD_IRQHandler>
 80047ec:	bd08      	pop	{r3, pc}
 80047ee:	bf00      	nop
 80047f0:	20004108 	.word	0x20004108

080047f4 <TIM4_IRQHandler>:

/**
* @brief This function handles TIM4 global interrupt.
*/
void TIM4_IRQHandler(void)
{
 80047f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80047f6:	4802      	ldr	r0, [pc, #8]	; (8004800 <TIM4_IRQHandler+0xc>)
 80047f8:	f7fd fc35 	bl	8002066 <HAL_TIM_IRQHandler>
 80047fc:	bd08      	pop	{r3, pc}
 80047fe:	bf00      	nop
 8004800:	20003e64 	.word	0x20003e64

08004804 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004804:	4b0f      	ldr	r3, [pc, #60]	; (8004844 <SystemInit+0x40>)
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	f042 0201 	orr.w	r2, r2, #1
 800480c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800480e:	6859      	ldr	r1, [r3, #4]
 8004810:	4a0d      	ldr	r2, [pc, #52]	; (8004848 <SystemInit+0x44>)
 8004812:	400a      	ands	r2, r1
 8004814:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800481c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004820:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004828:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004830:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004832:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004836:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004838:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800483c:	4b03      	ldr	r3, [pc, #12]	; (800484c <SystemInit+0x48>)
 800483e:	609a      	str	r2, [r3, #8]
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	40021000 	.word	0x40021000
 8004848:	f8ff0000 	.word	0xf8ff0000
 800484c:	e000ed00 	.word	0xe000ed00

08004850 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004850:	b500      	push	{lr}
 8004852:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 8004854:	4819      	ldr	r0, [pc, #100]	; (80048bc <MX_TIM3_Init+0x6c>)
 8004856:	4b1a      	ldr	r3, [pc, #104]	; (80048c0 <MX_TIM3_Init+0x70>)
 8004858:	6003      	str	r3, [r0, #0]
  htim3.Init.Prescaler = 71;
 800485a:	2347      	movs	r3, #71	; 0x47
 800485c:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800485e:	2300      	movs	r3, #0
 8004860:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1000;
 8004862:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004866:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004868:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800486a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800486c:	f7fd fcf4 	bl	8002258 <HAL_TIM_Base_Init>
 8004870:	b9a0      	cbnz	r0, 800489c <MX_TIM3_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004872:	a906      	add	r1, sp, #24
 8004874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004878:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800487c:	480f      	ldr	r0, [pc, #60]	; (80048bc <MX_TIM3_Init+0x6c>)
 800487e:	f7fd fb6b 	bl	8001f58 <HAL_TIM_ConfigClockSource>
 8004882:	b980      	cbnz	r0, 80048a6 <MX_TIM3_Init+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004884:	2320      	movs	r3, #32
 8004886:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004888:	2300      	movs	r3, #0
 800488a:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800488c:	4669      	mov	r1, sp
 800488e:	480b      	ldr	r0, [pc, #44]	; (80048bc <MX_TIM3_Init+0x6c>)
 8004890:	f7fd fdbe 	bl	8002410 <HAL_TIMEx_MasterConfigSynchronization>
 8004894:	b960      	cbnz	r0, 80048b0 <MX_TIM3_Init+0x60>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8004896:	b007      	add	sp, #28
 8004898:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 800489c:	214a      	movs	r1, #74	; 0x4a
 800489e:	4809      	ldr	r0, [pc, #36]	; (80048c4 <MX_TIM3_Init+0x74>)
 80048a0:	f7ff fe70 	bl	8004584 <_Error_Handler>
 80048a4:	e7e5      	b.n	8004872 <MX_TIM3_Init+0x22>
    _Error_Handler(__FILE__, __LINE__);
 80048a6:	2150      	movs	r1, #80	; 0x50
 80048a8:	4806      	ldr	r0, [pc, #24]	; (80048c4 <MX_TIM3_Init+0x74>)
 80048aa:	f7ff fe6b 	bl	8004584 <_Error_Handler>
 80048ae:	e7e9      	b.n	8004884 <MX_TIM3_Init+0x34>
    _Error_Handler(__FILE__, __LINE__);
 80048b0:	2157      	movs	r1, #87	; 0x57
 80048b2:	4804      	ldr	r0, [pc, #16]	; (80048c4 <MX_TIM3_Init+0x74>)
 80048b4:	f7ff fe66 	bl	8004584 <_Error_Handler>
}
 80048b8:	e7ed      	b.n	8004896 <MX_TIM3_Init+0x46>
 80048ba:	bf00      	nop
 80048bc:	20003ea4 	.word	0x20003ea4
 80048c0:	40000400 	.word	0x40000400
 80048c4:	08004e0c 	.word	0x08004e0c

080048c8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80048c8:	b500      	push	{lr}
 80048ca:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim4.Instance = TIM4;
 80048cc:	481b      	ldr	r0, [pc, #108]	; (800493c <MX_TIM4_Init+0x74>)
 80048ce:	4b1c      	ldr	r3, [pc, #112]	; (8004940 <MX_TIM4_Init+0x78>)
 80048d0:	6003      	str	r3, [r0, #0]
  htim4.Init.Prescaler = 71;
 80048d2:	2347      	movs	r3, #71	; 0x47
 80048d4:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048d6:	2300      	movs	r3, #0
 80048d8:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 1000;
 80048da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048de:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048e0:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048e2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80048e4:	f7fd fcd1 	bl	800228a <HAL_TIM_OC_Init>
 80048e8:	b9c8      	cbnz	r0, 800491e <MX_TIM4_Init+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048ea:	2300      	movs	r3, #0
 80048ec:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048ee:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80048f0:	a908      	add	r1, sp, #32
 80048f2:	4812      	ldr	r0, [pc, #72]	; (800493c <MX_TIM4_Init+0x74>)
 80048f4:	f7fd fd8c 	bl	8002410 <HAL_TIMEx_MasterConfigSynchronization>
 80048f8:	b9b0      	cbnz	r0, 8004928 <MX_TIM4_Init+0x60>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80048fa:	2330      	movs	r3, #48	; 0x30
 80048fc:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 500;
 80048fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004902:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8004904:	2302      	movs	r3, #2
 8004906:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004908:	2300      	movs	r3, #0
 800490a:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800490c:	220c      	movs	r2, #12
 800490e:	a901      	add	r1, sp, #4
 8004910:	480a      	ldr	r0, [pc, #40]	; (800493c <MX_TIM4_Init+0x74>)
 8004912:	f7fd fd05 	bl	8002320 <HAL_TIM_OC_ConfigChannel>
 8004916:	b960      	cbnz	r0, 8004932 <MX_TIM4_Init+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8004918:	b00b      	add	sp, #44	; 0x2c
 800491a:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 800491e:	2169      	movs	r1, #105	; 0x69
 8004920:	4808      	ldr	r0, [pc, #32]	; (8004944 <MX_TIM4_Init+0x7c>)
 8004922:	f7ff fe2f 	bl	8004584 <_Error_Handler>
 8004926:	e7e0      	b.n	80048ea <MX_TIM4_Init+0x22>
    _Error_Handler(__FILE__, __LINE__);
 8004928:	2170      	movs	r1, #112	; 0x70
 800492a:	4806      	ldr	r0, [pc, #24]	; (8004944 <MX_TIM4_Init+0x7c>)
 800492c:	f7ff fe2a 	bl	8004584 <_Error_Handler>
 8004930:	e7e3      	b.n	80048fa <MX_TIM4_Init+0x32>
    _Error_Handler(__FILE__, __LINE__);
 8004932:	2179      	movs	r1, #121	; 0x79
 8004934:	4803      	ldr	r0, [pc, #12]	; (8004944 <MX_TIM4_Init+0x7c>)
 8004936:	f7ff fe25 	bl	8004584 <_Error_Handler>
}
 800493a:	e7ed      	b.n	8004918 <MX_TIM4_Init+0x50>
 800493c:	20003e64 	.word	0x20003e64
 8004940:	40000800 	.word	0x40000800
 8004944:	08004e0c 	.word	0x08004e0c

08004948 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 8004948:	6802      	ldr	r2, [r0, #0]
 800494a:	4b09      	ldr	r3, [pc, #36]	; (8004970 <HAL_TIM_Base_MspInit+0x28>)
 800494c:	429a      	cmp	r2, r3
 800494e:	d000      	beq.n	8004952 <HAL_TIM_Base_MspInit+0xa>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004950:	4770      	bx	lr
{
 8004952:	b082      	sub	sp, #8
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004954:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8004958:	69da      	ldr	r2, [r3, #28]
 800495a:	f042 0202 	orr.w	r2, r2, #2
 800495e:	61da      	str	r2, [r3, #28]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	9301      	str	r3, [sp, #4]
 8004968:	9b01      	ldr	r3, [sp, #4]
}
 800496a:	b002      	add	sp, #8
 800496c:	e7f0      	b.n	8004950 <HAL_TIM_Base_MspInit+0x8>
 800496e:	bf00      	nop
 8004970:	40000400 	.word	0x40000400

08004974 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{

  if(tim_ocHandle->Instance==TIM4)
 8004974:	6802      	ldr	r2, [r0, #0]
 8004976:	4b0e      	ldr	r3, [pc, #56]	; (80049b0 <HAL_TIM_OC_MspInit+0x3c>)
 8004978:	429a      	cmp	r2, r3
 800497a:	d000      	beq.n	800497e <HAL_TIM_OC_MspInit+0xa>
 800497c:	4770      	bx	lr
{
 800497e:	b500      	push	{lr}
 8004980:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004982:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004986:	69da      	ldr	r2, [r3, #28]
 8004988:	f042 0204 	orr.w	r2, r2, #4
 800498c:	61da      	str	r2, [r3, #28]
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	9301      	str	r3, [sp, #4]
 8004996:	9b01      	ldr	r3, [sp, #4]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004998:	2200      	movs	r2, #0
 800499a:	4611      	mov	r1, r2
 800499c:	201e      	movs	r0, #30
 800499e:	f7fb ff47 	bl	8000830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80049a2:	201e      	movs	r0, #30
 80049a4:	f7fb ff76 	bl	8000894 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80049a8:	b003      	add	sp, #12
 80049aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80049ae:	bf00      	nop
 80049b0:	40000800 	.word	0x40000800

080049b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80049b4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 80049b6:	4c09      	ldr	r4, [pc, #36]	; (80049dc <MX_USB_DEVICE_Init+0x28>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	4909      	ldr	r1, [pc, #36]	; (80049e0 <MX_USB_DEVICE_Init+0x2c>)
 80049bc:	4620      	mov	r0, r4
 80049be:	f7fe fb44 	bl	800304a <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID);
 80049c2:	4908      	ldr	r1, [pc, #32]	; (80049e4 <MX_USB_DEVICE_Init+0x30>)
 80049c4:	4620      	mov	r0, r4
 80049c6:	f7fe fb57 	bl	8003078 <USBD_RegisterClass>

  USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS);
 80049ca:	4907      	ldr	r1, [pc, #28]	; (80049e8 <MX_USB_DEVICE_Init+0x34>)
 80049cc:	4620      	mov	r0, r4
 80049ce:	f7fe fb35 	bl	800303c <USBD_CUSTOM_HID_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 80049d2:	4620      	mov	r0, r4
 80049d4:	f7fe fb57 	bl	8003086 <USBD_Start>
 80049d8:	bd10      	pop	{r4, pc}
 80049da:	bf00      	nop
 80049dc:	20003ee4 	.word	0x20003ee4
 80049e0:	200000dc 	.word	0x200000dc
 80049e4:	20000008 	.word	0x20000008
 80049e8:	200000cc 	.word	0x200000cc

080049ec <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 80049ec:	6802      	ldr	r2, [r0, #0]
 80049ee:	4b0e      	ldr	r3, [pc, #56]	; (8004a28 <HAL_PCD_MspInit+0x3c>)
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d000      	beq.n	80049f6 <HAL_PCD_MspInit+0xa>
 80049f4:	4770      	bx	lr
{
 80049f6:	b500      	push	{lr}
 80049f8:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80049fa:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80049fe:	69da      	ldr	r2, [r3, #28]
 8004a00:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004a04:	61da      	str	r2, [r3, #28]
 8004a06:	69db      	ldr	r3, [r3, #28]
 8004a08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a0c:	9301      	str	r3, [sp, #4]
 8004a0e:	9b01      	ldr	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004a10:	2200      	movs	r2, #0
 8004a12:	4611      	mov	r1, r2
 8004a14:	2014      	movs	r0, #20
 8004a16:	f7fb ff0b 	bl	8000830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004a1a:	2014      	movs	r0, #20
 8004a1c:	f7fb ff3a 	bl	8000894 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8004a20:	b003      	add	sp, #12
 8004a22:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a26:	bf00      	nop
 8004a28:	40005c00 	.word	0x40005c00

08004a2c <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8004a2c:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004a2e:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 8004a32:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8004a36:	f7fe fb3f 	bl	80030b8 <USBD_LL_SetupStage>
 8004a3a:	bd08      	pop	{r3, pc}

08004a3c <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004a3c:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004a3e:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8004a42:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8004a46:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8004a4a:	f7fe fb62 	bl	8003112 <USBD_LL_DataOutStage>
 8004a4e:	bd08      	pop	{r3, pc}

08004a50 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004a50:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004a52:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8004a56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a58:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8004a5c:	f7fe fb8e 	bl	800317c <USBD_LL_DataInStage>
 8004a60:	bd08      	pop	{r3, pc}

08004a62 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8004a62:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004a64:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8004a68:	f7fe fc12 	bl	8003290 <USBD_LL_SOF>
 8004a6c:	bd08      	pop	{r3, pc}

08004a6e <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8004a6e:	b510      	push	{r4, lr}
 8004a70:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004a72:	2101      	movs	r1, #1
 8004a74:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8004a78:	f7fe fbf8 	bl	800326c <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004a7c:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
 8004a80:	f7fe fbd5 	bl	800322e <USBD_LL_Reset>
 8004a84:	bd10      	pop	{r4, pc}
	...

08004a88 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8004a88:	b510      	push	{r4, lr}
 8004a8a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004a8c:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8004a90:	f7fe fbef 	bl	8003272 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004a94:	69a3      	ldr	r3, [r4, #24]
 8004a96:	b123      	cbz	r3, 8004aa2 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004a98:	4a02      	ldr	r2, [pc, #8]	; (8004aa4 <HAL_PCD_SuspendCallback+0x1c>)
 8004a9a:	6913      	ldr	r3, [r2, #16]
 8004a9c:	f043 0306 	orr.w	r3, r3, #6
 8004aa0:	6113      	str	r3, [r2, #16]
 8004aa2:	bd10      	pop	{r4, pc}
 8004aa4:	e000ed00 	.word	0xe000ed00

08004aa8 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8004aa8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004aaa:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8004aae:	f7fe fbe9 	bl	8003284 <USBD_LL_Resume>
 8004ab2:	bd08      	pop	{r3, pc}

08004ab4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8004ab4:	b510      	push	{r4, lr}
 8004ab6:	4604      	mov	r4, r0
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8004ab8:	481b      	ldr	r0, [pc, #108]	; (8004b28 <USBD_LL_Init+0x74>)
 8004aba:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8004abe:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 8004ac2:	4b1a      	ldr	r3, [pc, #104]	; (8004b2c <USBD_LL_Init+0x78>)
 8004ac4:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004ac6:	2308      	movs	r3, #8
 8004ac8:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004aca:	2302      	movs	r3, #2
 8004acc:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60c3      	str	r3, [r0, #12]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004ad2:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004ad4:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004ad6:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004ad8:	f7fc f95d 	bl	8000d96 <HAL_PCD_Init>
 8004adc:	b9e8      	cbnz	r0, 8004b1a <USBD_LL_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004ade:	2318      	movs	r3, #24
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8004ae8:	f7fc fdb6 	bl	8001658 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004aec:	2358      	movs	r3, #88	; 0x58
 8004aee:	2200      	movs	r2, #0
 8004af0:	2180      	movs	r1, #128	; 0x80
 8004af2:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8004af6:	f7fc fdaf 	bl	8001658 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8004afa:	2398      	movs	r3, #152	; 0x98
 8004afc:	2200      	movs	r2, #0
 8004afe:	2181      	movs	r1, #129	; 0x81
 8004b00:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8004b04:	f7fc fda8 	bl	8001658 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8004b08:	23d8      	movs	r3, #216	; 0xd8
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	2101      	movs	r1, #1
 8004b0e:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8004b12:	f7fc fda1 	bl	8001658 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 8004b16:	2000      	movs	r0, #0
 8004b18:	bd10      	pop	{r4, pc}
    _Error_Handler(__FILE__, __LINE__);
 8004b1a:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8004b1e:	4804      	ldr	r0, [pc, #16]	; (8004b30 <USBD_LL_Init+0x7c>)
 8004b20:	f7ff fd30 	bl	8004584 <_Error_Handler>
 8004b24:	e7db      	b.n	8004ade <USBD_LL_Init+0x2a>
 8004b26:	bf00      	nop
 8004b28:	20004108 	.word	0x20004108
 8004b2c:	40005c00 	.word	0x40005c00
 8004b30:	08004e1c 	.word	0x08004e1c

08004b34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004b34:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8004b36:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004b3a:	f7fc f997 	bl	8000e6c <HAL_PCD_Start>
     
  switch (hal_status) {
 8004b3e:	b118      	cbz	r0, 8004b48 <USBD_LL_Start+0x14>
 8004b40:	2802      	cmp	r0, #2
 8004b42:	d003      	beq.n	8004b4c <USBD_LL_Start+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004b44:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8004b46:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8004b48:	2000      	movs	r0, #0
 8004b4a:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 8004b4c:	2001      	movs	r0, #1
    break;
 8004b4e:	bd08      	pop	{r3, pc}

08004b50 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8004b50:	b510      	push	{r4, lr}
 8004b52:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004b54:	4613      	mov	r3, r2
 8004b56:	4622      	mov	r2, r4
 8004b58:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004b5c:	f7fc f9b1 	bl	8000ec2 <HAL_PCD_EP_Open>

  switch (hal_status) {
 8004b60:	b118      	cbz	r0, 8004b6a <USBD_LL_OpenEP+0x1a>
 8004b62:	2802      	cmp	r0, #2
 8004b64:	d003      	beq.n	8004b6e <USBD_LL_OpenEP+0x1e>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004b66:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8004b68:	bd10      	pop	{r4, pc}
      usb_status = USBD_OK;
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	bd10      	pop	{r4, pc}
      usb_status = USBD_BUSY;
 8004b6e:	2001      	movs	r0, #1
    break;
 8004b70:	bd10      	pop	{r4, pc}

08004b72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004b72:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004b74:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004b78:	f7fc f9cc 	bl	8000f14 <HAL_PCD_EP_Close>
      
  switch (hal_status) {
 8004b7c:	b118      	cbz	r0, 8004b86 <USBD_LL_CloseEP+0x14>
 8004b7e:	2802      	cmp	r0, #2
 8004b80:	d003      	beq.n	8004b8a <USBD_LL_CloseEP+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004b82:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8004b84:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8004b86:	2000      	movs	r0, #0
 8004b88:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 8004b8a:	2001      	movs	r0, #1
    break;
 8004b8c:	bd08      	pop	{r3, pc}

08004b8e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004b8e:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004b90:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004b94:	f7fc fd0b 	bl	80015ae <HAL_PCD_EP_SetStall>

  switch (hal_status) {
 8004b98:	b118      	cbz	r0, 8004ba2 <USBD_LL_StallEP+0x14>
 8004b9a:	2802      	cmp	r0, #2
 8004b9c:	d003      	beq.n	8004ba6 <USBD_LL_StallEP+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004b9e:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8004ba0:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 8004ba6:	2001      	movs	r0, #1
    break;
 8004ba8:	bd08      	pop	{r3, pc}

08004baa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004baa:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8004bac:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004bb0:	f7fc fd2b 	bl	800160a <HAL_PCD_EP_ClrStall>
     
  switch (hal_status) {
 8004bb4:	b118      	cbz	r0, 8004bbe <USBD_LL_ClearStallEP+0x14>
 8004bb6:	2802      	cmp	r0, #2
 8004bb8:	d003      	beq.n	8004bc2 <USBD_LL_ClearStallEP+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004bba:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8004bbc:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 8004bc2:	2001      	movs	r0, #1
    break;
 8004bc4:	bd08      	pop	{r3, pc}

08004bc6 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004bc6:	f8d0 2220 	ldr.w	r2, [r0, #544]	; 0x220
  
  if((ep_addr & 0x80) == 0x80)
 8004bca:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004bce:	d106      	bne.n	8004bde <USBD_LL_IsStallEP+0x18>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004bd0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004bd4:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 8004bd8:	f891 022a 	ldrb.w	r0, [r1, #554]	; 0x22a
  }
}
 8004bdc:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004bde:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8004be2:	eb02 1143 	add.w	r1, r2, r3, lsl #5
 8004be6:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
 8004bea:	4770      	bx	lr

08004bec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004bec:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004bee:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004bf2:	f7fc f952 	bl	8000e9a <HAL_PCD_SetAddress>
     
  switch (hal_status) {
 8004bf6:	b118      	cbz	r0, 8004c00 <USBD_LL_SetUSBAddress+0x14>
 8004bf8:	2802      	cmp	r0, #2
 8004bfa:	d003      	beq.n	8004c04 <USBD_LL_SetUSBAddress+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004bfc:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8004bfe:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8004c00:	2000      	movs	r0, #0
 8004c02:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 8004c04:	2001      	movs	r0, #1
    break;
 8004c06:	bd08      	pop	{r3, pc}

08004c08 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004c08:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004c0a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004c0e:	f7fc f9c7 	bl	8000fa0 <HAL_PCD_EP_Transmit>
     
  switch (hal_status) {
 8004c12:	b118      	cbz	r0, 8004c1c <USBD_LL_Transmit+0x14>
 8004c14:	2802      	cmp	r0, #2
 8004c16:	d003      	beq.n	8004c20 <USBD_LL_Transmit+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004c18:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8004c1a:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 8004c20:	2001      	movs	r0, #1
    break;
 8004c22:	bd08      	pop	{r3, pc}

08004c24 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004c24:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004c26:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004c2a:	f7fc f99a 	bl	8000f62 <HAL_PCD_EP_Receive>
     
  switch (hal_status) {
 8004c2e:	b118      	cbz	r0, 8004c38 <USBD_LL_PrepareReceive+0x14>
 8004c30:	2802      	cmp	r0, #2
 8004c32:	d003      	beq.n	8004c3c <USBD_LL_PrepareReceive+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004c34:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8004c36:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8004c38:	2000      	movs	r0, #0
 8004c3a:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 8004c3c:	2001      	movs	r0, #1
    break;
 8004c3e:	bd08      	pop	{r3, pc}

08004c40 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
}
 8004c40:	4800      	ldr	r0, [pc, #0]	; (8004c44 <USBD_static_malloc+0x4>)
 8004c42:	4770      	bx	lr
 8004c44:	2000013c 	.word	0x2000013c

08004c48 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8004c48:	4770      	bx	lr

08004c4a <HAL_PCDEx_SetConnectionState>:
  * @param hpcd: PCD handle
  * @param state: Connection state (0: disconnected / 1: connected)
  * @retval None
  */
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8004c4a:	4770      	bx	lr

08004c4c <CUSTOM_HID_Init_FS>:
static int8_t CUSTOM_HID_Init_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	4770      	bx	lr

08004c50 <CUSTOM_HID_DeInit_FS>:
static int8_t CUSTOM_HID_DeInit_FS(void)
{
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
  /* USER CODE END 5 */
}
 8004c50:	2000      	movs	r0, #0
 8004c52:	4770      	bx	lr

08004c54 <CUSTOM_HID_OutEvent_FS>:
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8004c54:	2000      	movs	r0, #0
 8004c56:	4770      	bx	lr

08004c58 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8004c58:	2312      	movs	r3, #18
 8004c5a:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8004c5c:	4800      	ldr	r0, [pc, #0]	; (8004c60 <USBD_FS_DeviceDescriptor+0x8>)
 8004c5e:	4770      	bx	lr
 8004c60:	200000f8 	.word	0x200000f8

08004c64 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8004c64:	2304      	movs	r3, #4
 8004c66:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8004c68:	4800      	ldr	r0, [pc, #0]	; (8004c6c <USBD_FS_LangIDStrDescriptor+0x8>)
 8004c6a:	4770      	bx	lr
 8004c6c:	2000010c 	.word	0x2000010c

08004c70 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004c70:	b508      	push	{r3, lr}
 8004c72:	460a      	mov	r2, r1
  if(speed == 0)
 8004c74:	b128      	cbz	r0, 8004c82 <USBD_FS_ProductStrDescriptor+0x12>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004c76:	4905      	ldr	r1, [pc, #20]	; (8004c8c <USBD_FS_ProductStrDescriptor+0x1c>)
 8004c78:	4805      	ldr	r0, [pc, #20]	; (8004c90 <USBD_FS_ProductStrDescriptor+0x20>)
 8004c7a:	f7fe fd7b 	bl	8003774 <USBD_GetString>
  }
  return USBD_StrDesc;
}
 8004c7e:	4803      	ldr	r0, [pc, #12]	; (8004c8c <USBD_FS_ProductStrDescriptor+0x1c>)
 8004c80:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004c82:	4902      	ldr	r1, [pc, #8]	; (8004c8c <USBD_FS_ProductStrDescriptor+0x1c>)
 8004c84:	4802      	ldr	r0, [pc, #8]	; (8004c90 <USBD_FS_ProductStrDescriptor+0x20>)
 8004c86:	f7fe fd75 	bl	8003774 <USBD_GetString>
 8004c8a:	e7f8      	b.n	8004c7e <USBD_FS_ProductStrDescriptor+0xe>
 8004c8c:	20004568 	.word	0x20004568
 8004c90:	08004e60 	.word	0x08004e60

08004c94 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004c94:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004c96:	4c04      	ldr	r4, [pc, #16]	; (8004ca8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8004c98:	460a      	mov	r2, r1
 8004c9a:	4621      	mov	r1, r4
 8004c9c:	4803      	ldr	r0, [pc, #12]	; (8004cac <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8004c9e:	f7fe fd69 	bl	8003774 <USBD_GetString>
  return USBD_StrDesc;
}
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	bd10      	pop	{r4, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20004568 	.word	0x20004568
 8004cac:	08004e5c 	.word	0x08004e5c

08004cb0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004cb0:	b508      	push	{r3, lr}
 8004cb2:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8004cb4:	b128      	cbz	r0, 8004cc2 <USBD_FS_SerialStrDescriptor+0x12>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8004cb6:	4905      	ldr	r1, [pc, #20]	; (8004ccc <USBD_FS_SerialStrDescriptor+0x1c>)
 8004cb8:	4805      	ldr	r0, [pc, #20]	; (8004cd0 <USBD_FS_SerialStrDescriptor+0x20>)
 8004cba:	f7fe fd5b 	bl	8003774 <USBD_GetString>
  }
  return USBD_StrDesc;
}
 8004cbe:	4803      	ldr	r0, [pc, #12]	; (8004ccc <USBD_FS_SerialStrDescriptor+0x1c>)
 8004cc0:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8004cc2:	4902      	ldr	r1, [pc, #8]	; (8004ccc <USBD_FS_SerialStrDescriptor+0x1c>)
 8004cc4:	4802      	ldr	r0, [pc, #8]	; (8004cd0 <USBD_FS_SerialStrDescriptor+0x20>)
 8004cc6:	f7fe fd55 	bl	8003774 <USBD_GetString>
 8004cca:	e7f8      	b.n	8004cbe <USBD_FS_SerialStrDescriptor+0xe>
 8004ccc:	20004568 	.word	0x20004568
 8004cd0:	08004e74 	.word	0x08004e74

08004cd4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004cd4:	b508      	push	{r3, lr}
 8004cd6:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8004cd8:	b128      	cbz	r0, 8004ce6 <USBD_FS_ConfigStrDescriptor+0x12>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004cda:	4905      	ldr	r1, [pc, #20]	; (8004cf0 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004cdc:	4805      	ldr	r0, [pc, #20]	; (8004cf4 <USBD_FS_ConfigStrDescriptor+0x20>)
 8004cde:	f7fe fd49 	bl	8003774 <USBD_GetString>
  }
  return USBD_StrDesc;
}
 8004ce2:	4803      	ldr	r0, [pc, #12]	; (8004cf0 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004ce4:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004ce6:	4902      	ldr	r1, [pc, #8]	; (8004cf0 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004ce8:	4802      	ldr	r0, [pc, #8]	; (8004cf4 <USBD_FS_ConfigStrDescriptor+0x20>)
 8004cea:	f7fe fd43 	bl	8003774 <USBD_GetString>
 8004cee:	e7f8      	b.n	8004ce2 <USBD_FS_ConfigStrDescriptor+0xe>
 8004cf0:	20004568 	.word	0x20004568
 8004cf4:	08004e30 	.word	0x08004e30

08004cf8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004cf8:	b508      	push	{r3, lr}
 8004cfa:	460a      	mov	r2, r1
  if(speed == 0)
 8004cfc:	b128      	cbz	r0, 8004d0a <USBD_FS_InterfaceStrDescriptor+0x12>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004cfe:	4905      	ldr	r1, [pc, #20]	; (8004d14 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004d00:	4805      	ldr	r0, [pc, #20]	; (8004d18 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8004d02:	f7fe fd37 	bl	8003774 <USBD_GetString>
  }
  return USBD_StrDesc;
}
 8004d06:	4803      	ldr	r0, [pc, #12]	; (8004d14 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004d08:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004d0a:	4902      	ldr	r1, [pc, #8]	; (8004d14 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004d0c:	4802      	ldr	r0, [pc, #8]	; (8004d18 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8004d0e:	f7fe fd31 	bl	8003774 <USBD_GetString>
 8004d12:	e7f8      	b.n	8004d06 <USBD_FS_InterfaceStrDescriptor+0xe>
 8004d14:	20004568 	.word	0x20004568
 8004d18:	08004e44 	.word	0x08004e44

08004d1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004d1c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004d1e:	e003      	b.n	8004d28 <LoopCopyDataInit>

08004d20 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004d20:	4b0b      	ldr	r3, [pc, #44]	; (8004d50 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004d22:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004d24:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004d26:	3104      	adds	r1, #4

08004d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004d28:	480a      	ldr	r0, [pc, #40]	; (8004d54 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004d2a:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004d2c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004d2e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004d30:	d3f6      	bcc.n	8004d20 <CopyDataInit>
  ldr r2, =_sbss
 8004d32:	4a0a      	ldr	r2, [pc, #40]	; (8004d5c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004d34:	e002      	b.n	8004d3c <LoopFillZerobss>

08004d36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004d36:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004d38:	f842 3b04 	str.w	r3, [r2], #4

08004d3c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004d3c:	4b08      	ldr	r3, [pc, #32]	; (8004d60 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004d3e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004d40:	d3f9      	bcc.n	8004d36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004d42:	f7ff fd5f 	bl	8004804 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d46:	f000 f80f 	bl	8004d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004d4a:	f7ff fc71 	bl	8004630 <main>
  bx lr
 8004d4e:	4770      	bx	lr
  ldr r3, =_sidata
 8004d50:	08004e8c 	.word	0x08004e8c
  ldr r0, =_sdata
 8004d54:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004d58:	20000110 	.word	0x20000110
  ldr r2, =_sbss
 8004d5c:	20000110 	.word	0x20000110
  ldr r3, = _ebss
 8004d60:	20004768 	.word	0x20004768

08004d64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004d64:	e7fe      	b.n	8004d64 <ADC1_2_IRQHandler>
	...

08004d68 <__libc_init_array>:
 8004d68:	b570      	push	{r4, r5, r6, lr}
 8004d6a:	2500      	movs	r5, #0
 8004d6c:	4e0c      	ldr	r6, [pc, #48]	; (8004da0 <__libc_init_array+0x38>)
 8004d6e:	4c0d      	ldr	r4, [pc, #52]	; (8004da4 <__libc_init_array+0x3c>)
 8004d70:	1ba4      	subs	r4, r4, r6
 8004d72:	10a4      	asrs	r4, r4, #2
 8004d74:	42a5      	cmp	r5, r4
 8004d76:	d109      	bne.n	8004d8c <__libc_init_array+0x24>
 8004d78:	f000 f81a 	bl	8004db0 <_init>
 8004d7c:	2500      	movs	r5, #0
 8004d7e:	4e0a      	ldr	r6, [pc, #40]	; (8004da8 <__libc_init_array+0x40>)
 8004d80:	4c0a      	ldr	r4, [pc, #40]	; (8004dac <__libc_init_array+0x44>)
 8004d82:	1ba4      	subs	r4, r4, r6
 8004d84:	10a4      	asrs	r4, r4, #2
 8004d86:	42a5      	cmp	r5, r4
 8004d88:	d105      	bne.n	8004d96 <__libc_init_array+0x2e>
 8004d8a:	bd70      	pop	{r4, r5, r6, pc}
 8004d8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d90:	4798      	blx	r3
 8004d92:	3501      	adds	r5, #1
 8004d94:	e7ee      	b.n	8004d74 <__libc_init_array+0xc>
 8004d96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d9a:	4798      	blx	r3
 8004d9c:	3501      	adds	r5, #1
 8004d9e:	e7f2      	b.n	8004d86 <__libc_init_array+0x1e>
 8004da0:	08004e84 	.word	0x08004e84
 8004da4:	08004e84 	.word	0x08004e84
 8004da8:	08004e84 	.word	0x08004e84
 8004dac:	08004e88 	.word	0x08004e88

08004db0 <_init>:
 8004db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004db2:	bf00      	nop
 8004db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004db6:	bc08      	pop	{r3}
 8004db8:	469e      	mov	lr, r3
 8004dba:	4770      	bx	lr

08004dbc <_fini>:
 8004dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dbe:	bf00      	nop
 8004dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dc2:	bc08      	pop	{r3}
 8004dc4:	469e      	mov	lr, r3
 8004dc6:	4770      	bx	lr
